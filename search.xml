<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Neo4j数据库基本操作</title>
      <link href="//43e3b8c.html"/>
      <url>//43e3b8c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><pre><code class="lang-shell">docker pull neo4jdocker run -d --name neo4j -p 7474:7474 -p 7687:7687 -v docker/neo4j/conf:/var/lib/neo4j/conf  neo4docker run -d --name neo4j -p 7474:7474 -p 7687:7687  -v /home/docker/neo4j/conf:/var/lib/neo4j/conf -v /home/docker/neo4j/import:/var/lib/neo4j/import  -v /home/docker/neo4j/data:/data -v /home/docker/neo4j/logs:/logs neo4j:4.4.10</code></pre><p>​    -v /home/neo4j/data:/data   //把容器内的数据目录挂载到宿主机的对应目录下 -v /home/neo4j/logs:/logs   //挂载日志目录</p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><pre><code class="lang-neo4j">CREATE (ee:Person &#123;name:&#39;name&#39;&#125;)</code></pre><ul><li><p><code>CREATE</code> 创建节点</p></li><li><p><code>()</code> 表示节点信息</p></li><li><p><code>Person</code> 节点的标签【类】， ee 节点变量 【对象】</p></li><li><p><code>&#123;&#125;</code>包含节点的属性 【类的属性】</p></li><li><p><code>(), ()</code> 批量创建</p><pre><code class="lang-neo4j">MATCH (ee:Person) WHERE ee.name = &#39;Emil&#39;CREATE (js:Person &#123; name: &#39;Johan&#39;, from: &#39;Sweden&#39;, learn: &#39;surfing&#39; &#125;),(ir:Person &#123; name: &#39;Ian&#39;, from: &#39;England&#39;, title: &#39;author&#39; &#125;),(rvb:Person &#123; name: &#39;Rik&#39;, from: &#39;Belgium&#39;, pet: &#39;Orval&#39; &#125;),(ally:Person &#123; name: &#39;Allison&#39;, from: &#39;California&#39;, hobby: &#39;surfing&#39; &#125;),(ee)-[:KNOWS &#123;since: 2001&#125;]-&gt;(js),(ee)-[:KNOWS &#123;rating: 5&#125;]-&gt;(ir),(js)-[:KNOWS]-&gt;(ir),(js)-[:KNOWS]-&gt;(rvb),(ir)-[:KNOWS]-&gt;(js),(ir)-[:KNOWS]-&gt;(盟友),(rvb)-[:KNOWS]-&gt;(盟友)</code></pre></li></ul><h3 id="查询节点"><a href="#查询节点" class="headerlink" title="查询节点"></a>查询节点</h3><pre><code class="lang-neo4j">MATCH (ee:Person) where ee.name = &#39;name&#39; RETURN ee;</code></pre><ul><li><code>MATCH</code>     ： 指定节点和关系的模式</li><li><code>(ee: Person)</code>: 是带标签的单节点模式， 它将匹配项分配给变量。 ee</li><li><code>WHERE</code>过滤查询。</li><li><code>ee.name = &#39;Emil&#39;</code>将 name 属性与 value 进行比较<code>Emil</code>。</li><li><code>RETURN</code>返回特定结果。</li></ul><h4 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h4><pre><code class="lang-neo4j">MATCH (ee:Person)-[:KNOWS]-(friends)WHERE ee.name = &#39;Emil&#39; RETURN ee, friends</code></pre><ul><li><p>查询关联的实体</p><blockquote><p>和Tom Hanks 一起演过电影的演员的名字</p></blockquote></li></ul><pre><code class="lang-neo4j">MATCH (tom:Person &#123;name:&quot;Tom Hanks&quot;&#125;)-[:ACTED_IN]-&gt;(m)&lt;-[:ACTED_IN]-(coActors) RETURN DISTINCT coActors.name</code></pre><ul><li>查询关系</li></ul><pre><code class="lang-neo4j">MATCH (people:Person)-[relatedTo]-(:Movie &#123;title: &quot;Cloud Atlas&quot;&#125;) RETURN people.name, Type(relatedTo), relatedTo.roles</code></pre><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><pre><code class="lang-neo4j">match (n &#123;&lt;property-name&gt;:&lt;value&gt;&#125; ) detach delete (n)</code></pre><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><pre><code class="lang-shell">vim neo4j.conf#*****************************************************************# Neo4j configuration## For more details and a complete list of settings, please see# https://neo4j.com/docs/operations-manual/current/reference/configuration-settings/#*****************************************************************# The name of the default database#dbms.default_database=neo4j# Paths of directories in the installation.#dbms.directories.data=data#dbms.directories.plugins=plugins#dbms.directories.logs=logs#dbms.directories.lib=lib#dbms.directories.run=run#dbms.directories.licenses=licenses#dbms.directories.transaction.logs.root=data/transactions# This setting constrains all `LOAD CSV` import files to be under the `import` directory. Remove or comment it out to# allow files to be loaded from anywhere in the filesystem; this introduces possible security problems. See the# `LOAD CSV` section of the manual for details.dbms.directories.import=import# Whether requests to Neo4j are authenticated.# To disable authentication, uncomment this line#dbms.security.auth_enabled=false# Enable this to be able to upgrade a store from an older version.#dbms.allow_upgrade=true#********************************************************************# Memory Settings#********************************************************************## Memory settings are specified kilobytes with the &#39;k&#39; suffix, megabytes with# &#39;m&#39; and gigabytes with &#39;g&#39;.# If Neo4j is running on a dedicated server, then it is generally recommended# to leave about 2-4 gigabytes for the operating system, give the JVM enough# heap to hold all your transaction state and query context, and then leave the# rest for the page cache.# Java Heap Size: by default the Java heap size is dynamically calculated based# on available system resources. Uncomment these lines to set specific initial# and maximum heap size.#dbms.memory.heap.initial_size=512m#dbms.memory.heap.max_size=512m# The amount of memory to use for mapping the store files.# The default page cache memory assumes the machine is dedicated to running# Neo4j, and is heuristically set to 50% of RAM minus the Java heap size.#dbms.memory.pagecache.size=10g# Limit the amount of memory that all of the running transaction can consume.# By default there is no limit.#dbms.memory.transaction.global_max_size=256m# Limit the amount of memory that a single transaction can consume.# By default there is no limit.#dbms.memory.transaction.max_size=16m# Transaction state location. It is recommended to use ON_HEAP.dbms.tx_state.memory_allocation=ON_HEAP#*****************************************************************# Network connector configuration#*****************************************************************# With default configuration Neo4j only accepts local connections.# To accept non-local connections, uncomment this line:#dbms.default_listen_address=0.0.0.0# You can also choose a specific network interface, and configure a non-default# port for each connector, by setting their individual listen_address.# The address at which this server can be reached by its clients. This may be the server&#39;s IP address or DNS name, or# it may be the address of a reverse proxy which sits in front of the server. This setting may be overridden for# individual connectors below.#dbms.default_advertised_address=localhost# You can also choose a specific advertised hostname or IP address, and# configure an advertised port for each connector, by setting their# individual advertised_address.# By default, encryption is turned off.# To turn on encryption, an ssl policy for the connector needs to be configured# Read more in SSL policy section in this file for how to define a SSL policy.# Bolt connectordbms.connector.bolt.enabled=true#dbms.connector.bolt.tls_level=DISABLED#dbms.connector.bolt.listen_address=:7687#dbms.connector.bolt.advertised_address=:7687# HTTP Connector. There can be zero or one HTTP connectors.dbms.connector.http.enabled=true#dbms.connector.http.listen_address=:7474#dbms.connector.http.advertised_address=:7474# HTTPS Connector. There can be zero or one HTTPS connectors.dbms.connector.https.enabled=false#dbms.connector.https.listen_address=:7473#dbms.connector.https.advertised_address=:7473# Number of Neo4j worker threads.#dbms.threads.worker_count=#*****************************************************************# SSL policy configuration#*****************************************************************# Each policy is configured under a separate namespace, e.g.#    dbms.ssl.policy.&lt;scope&gt;.*#    &lt;scope&gt; can be any of &#39;bolt&#39;, &#39;https&#39;, &#39;cluster&#39; or &#39;backup&#39;## The scope is the name of the component where the policy will be used# Each component where the use of an ssl policy is desired needs to declare at least one setting of the policy.# Allowable values are &#39;bolt&#39;, &#39;https&#39;, &#39;cluster&#39; or &#39;backup&#39;.# E.g if bolt and https connectors should use the same policy, the following could be declared#   dbms.ssl.policy.bolt.base_directory=certificates/default#   dbms.ssl.policy.https.base_directory=certificates/default# However, it&#39;s strongly encouraged to not use the same key pair for multiple scopes.## N.B: Note that a connector must be configured to support/require#      SSL/TLS for the policy to actually be utilized.## see: dbms.connector.*.tls_level# SSL settings (dbms.ssl.policy.&lt;scope&gt;.*)#  .base_directory       Base directory for SSL policies paths. All relative paths within the#                        SSL configuration will be resolved from the base dir.##  .private_key          A path to the key file relative to the &#39;.base_directory&#39;.##  .private_key_password The password for the private key.##  .public_certificate   A path to the public certificate file relative to the &#39;.base_directory&#39;.##  .trusted_dir          A path to a directory containing trusted certificates.##  .revoked_dir          Path to the directory with Certificate Revocation Lists (CRLs).##  .verify_hostname      If true, the server will verify the hostname that the client uses to connect with. In order#                        for this to work, the server public certificate must have a valid CN and/or matching#                        Subject Alternative Names.##  .client_auth          How the client should be authorized. Possible values are: &#39;none&#39;, &#39;optional&#39;, &#39;require&#39;.##  .tls_versions         A comma-separated list of allowed TLS versions. By default only TLSv1.2 is allowed.##  .trust_all            Setting this to &#39;true&#39; will ignore the trust truststore, trusting all clients and servers.#                        Use of this mode is discouraged. It would offer encryption but no security.##  .ciphers              A comma-separated list of allowed ciphers. The default ciphers are the defaults of#                        the JVM platform.# Bolt SSL configuration#dbms.ssl.policy.bolt.enabled=true#dbms.ssl.policy.bolt.base_directory=certificates/bolt#dbms.ssl.policy.bolt.private_key=private.key#dbms.ssl.policy.bolt.public_certificate=public.crt#dbms.ssl.policy.bolt.client_auth=NONE# Https SSL configuration#dbms.ssl.policy.https.enabled=true#dbms.ssl.policy.https.base_directory=certificates/https#dbms.ssl.policy.https.private_key=private.key#dbms.ssl.policy.https.public_certificate=public.crt#dbms.ssl.policy.https.client_auth=NONE# Cluster SSL configuration#dbms.ssl.policy.cluster.enabled=true#dbms.ssl.policy.cluster.base_directory=certificates/cluster#dbms.ssl.policy.cluster.private_key=private.key#dbms.ssl.policy.cluster.public_certificate=public.crt# Backup SSL configuration#dbms.ssl.policy.backup.enabled=true#dbms.ssl.policy.backup.base_directory=certificates/backup#dbms.ssl.policy.backup.private_key=private.key#dbms.ssl.policy.backup.public_certificate=public.crt#*****************************************************************# Logging configuration#*****************************************************************# To enable HTTP logging, uncomment this line#dbms.logs.http.enabled=true# Number of HTTP logs to keep.#dbms.logs.http.rotation.keep_number=5# Size of each HTTP log that is kept.#dbms.logs.http.rotation.size=20m# To enable GC Logging, uncomment this line#dbms.logs.gc.enabled=true# GC Logging Options# see https://docs.oracle.com/en/java/javase/11/tools/java.html#GUID-BE93ABDC-999C-4CB5-A88B-1994AAAC74D5#dbms.logs.gc.options=-Xlog:gc*,safepoint,age*=trace# Number of GC logs to keep.#dbms.logs.gc.rotation.keep_number=5# Size of each GC log that is kept.#dbms.logs.gc.rotation.size=20m# Log level for the debug log. One of DEBUG, INFO, WARN and ERROR. Be aware that logging at DEBUG level can be very verbose.#dbms.logs.debug.level=INFO# Size threshold for rotation of the debug log. If set to zero then no rotation will occur. Accepts a binary suffix &quot;k&quot;,# &quot;m&quot; or &quot;g&quot;.#dbms.logs.debug.rotation.size=20m# Maximum number of history files for the internal log.#dbms.logs.debug.rotation.keep_number=7#*****************************************************************# Miscellaneous configuration#*****************************************************************# Enable this to specify a parser other than the default one.#cypher.default_language_version=3.5# Determines if Cypher will allow using file URLs when loading data using# `LOAD CSV`. Setting this value to `false` will cause Neo4j to fail `LOAD CSV`# clauses that load data from the file system.#dbms.security.allow_csv_import_from_file_urls=true# Value of the Access-Control-Allow-Origin header sent over any HTTP or HTTPS# connector. This defaults to &#39;*&#39;, which allows broadest compatibility. Note# that any URI provided here limits HTTP/HTTPS access to that URI only.#dbms.security.http_access_control_allow_origin=*# Value of the HTTP Strict-Transport-Security (HSTS) response header. This header# tells browsers that a webpage should only be accessed using HTTPS instead of HTTP.# It is attached to every HTTPS response. Setting is not set by default so# &#39;Strict-Transport-Security&#39; header is not sent. Value is expected to contain# directives like &#39;max-age&#39;, &#39;includeSubDomains&#39; and &#39;preload&#39;.#dbms.security.http_strict_transport_security=# Retention policy for transaction logs needed to perform recovery and backups.dbms.tx_log.rotation.retention_policy=1 days# Whether or not any database on this instance are read_only by default.# If false, individual databases may be marked as read_only using dbms.database.read_only.# If true, individual databases may be marked as writable using dbms.databases.writable.#dbms.databases.default_to_read_only=false# Comma separated list of JAX-RS packages containing JAX-RS resources, one# package name for each mountpoint. The listed package names will be loaded# under the mountpoints specified. Uncomment this line to mount the# org.neo4j.examples.server.unmanaged.HelloWorldResource.java from# neo4j-server-examples under /examples/unmanaged, resulting in a final URL of# http://localhost:7474/examples/unmanaged/helloworld/&#123;nodeId&#125;#dbms.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged# A comma separated list of procedures and user defined functions that are allowed# full access to the database through unsupported/insecure internal APIs.#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*# A comma separated list of procedures to be loaded by default.# Leaving this unconfigured will load all procedures found.#dbms.security.procedures.allowlist=apoc.coll.*,apoc.load.*,gds.*#********************************************************************# JVM Parameters#********************************************************************# G1GC generally strikes a good balance between throughput and tail# latency, without too much tuning.dbms.jvm.additional=-XX:+UseG1GC# Have common exceptions keep producing stack traces, so they can be# debugged regardless of how often logs are rotated.dbms.jvm.additional=-XX:-OmitStackTraceInFastThrow# Make sure that `initmemory` is not only allocated, but committed to# the process, before starting the database. This reduces memory# fragmentation, increasing the effectiveness of transparent huge# pages. It also reduces the possibility of seeing performance drop# due to heap-growing GC events, where a decrease in available page# cache leads to an increase in mean IO response time.# Try reducing the heap memory, if this flag degrades performance.dbms.jvm.additional=-XX:+AlwaysPreTouch# Trust that non-static final fields are really final.# This allows more optimizations and improves overall performance.# NOTE: Disable this if you use embedded mode, or have extensions or dependencies that may use reflection or# serialization to change the value of final fields!dbms.jvm.additional=-XX:+UnlockExperimentalVMOptionsdbms.jvm.additional=-XX:+TrustFinalNonStaticFields# Disable explicit garbage collection, which is occasionally invoked by the JDK itself.dbms.jvm.additional=-XX:+DisableExplicitGC#Increase maximum number of nested calls that can be inlined from 9 (default) to 15dbms.jvm.additional=-XX:MaxInlineLevel=15# Disable biased lockingdbms.jvm.additional=-XX:-UseBiasedLocking# Restrict size of cached JDK buffers to 256 KBdbms.jvm.additional=-Djdk.nio.maxCachedBufferSize=262144# More efficient buffer allocation in Netty by allowing direct no cleaner buffers.dbms.jvm.additional=-Dio.netty.tryReflectionSetAccessible=true# Exits JVM on the first occurrence of an out-of-memory error. Its preferable to restart VM in case of out of memory errors.# dbms.jvm.additional=-XX:+ExitOnOutOfMemoryError# Expand Diffie Hellman (DH) key size from default 1024 to 2048 for DH-RSA cipher suites used in server TLS handshakes.# This is to protect the server from any potential passive eavesdropping.dbms.jvm.additional=-Djdk.tls.ephemeralDHKeySize=2048# This mitigates a DDoS vector.dbms.jvm.additional=-Djdk.tls.rejectClientInitiatedRenegotiation=true# Enable remote debugging#dbms.jvm.additional=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005# This filter prevents deserialization of arbitrary objects via java object serialization, addressing potential vulnerabilities.# By default this filter whitelists all neo4j classes, as well as classes from the hazelcast library and the java standard library.# These defaults should only be modified by expert users!# For more details (including filter syntax) see: https://openjdk.java.net/jeps/290#dbms.jvm.additional=-Djdk.serialFilter=java.**;org.neo4j.**;com.neo4j.**;com.hazelcast.**;net.sf.ehcache.Element;com.sun.proxy.*;org.openjdk.jmh.**;!*# Increase the default flight recorder stack sampling depth from 64 to 256, to avoid truncating frames when profiling.dbms.jvm.additional=-XX:FlightRecorderOptions=stackdepth=256# Allow profilers to sample between safepoints. Without this, sampling profilers may produce less accurate results.dbms.jvm.additional=-XX:+UnlockDiagnosticVMOptionsdbms.jvm.additional=-XX:+DebugNonSafepoints# Disable logging JMX endpoint.dbms.jvm.additional=-Dlog4j2.disable.jmx=true# Limit JVM metaspace and code cache to allow garbage collection. Used by cypher for code generation and may grow indefinitely unless constrained.# Useful for memory constrained environments#dbms.jvm.additional=-XX:MaxMetaspaceSize=1024m#dbms.jvm.additional=-XX:ReservedCodeCacheSize=512m#********************************************************************# Wrapper Windows NT/2000/XP Service Properties#********************************************************************# WARNING - Do not modify any of these properties when an application#  using this configuration file has been installed as a service.#  Please uninstall the service before modifying this section.  The#  service can then be reinstalled.# Name of the servicedbms.windows_service_name=neo4j#********************************************************************# Other Neo4j system properties#********************************************************************dbms.memory.pagecache.size=512Mdbms.default_listen_address=0.0.0.0dbms.directories.logs=/logs</code></pre>]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL&amp;PostgresQL慢查询日志</title>
      <link href="//b92ce138.html"/>
      <url>//b92ce138.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="查看设置"><a href="#查看设置" class="headerlink" title="查看设置"></a>查看设置</h3><pre><code class="lang-sql">$ mysql -u root -pEnter password: Welcome to the MySQL monitor.  Commands end with ; or \g.Your MySQL connection id is 18Server version: 8.0.21 HomebrewCopyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.mysql&gt; show variables like &#39;%query%&#39;;+------------------------------+-----------------------------------+| Variable_name                | Value                             |+------------------------------+-----------------------------------+| binlog_rows_query_log_events | OFF                               || ft_query_expansion_limit     | 20                                || have_query_cache             | NO                                || long_query_time              | 10.000000                         || query_alloc_block_size       | 8192                              || query_prealloc_size          | 8192                              || slow_query_log               | OFF                               || slow_query_log_file          | /usr/local/var/mysql/Pro-slow.log |+------------------------------+-----------------------------------+8 rows in set (0.00 sec)</code></pre><ul><li>long_query_time : 设置记录查询语句时间的阈值, 单位 (S)</li><li>slow_query_log : 慢查询日志的开关</li><li>slow_query_log_file : 慢查询日志的路径,<code>文件路径可以不用设置,如果mysql对当前路径不能写,日志开关不起作用</code></li></ul><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><blockquote><p>修改 <code>/usr/local/etc/my.cnf</code> 配置文件内容,在[mysqld]中提那家一下内容</p></blockquote><pre><code class="lang-vim">long_query_time=1 slow_query_log =1slow_query_log_file= /usr/local/var/mysql/Pro-slow.loglog_queries_not_using_indexes=1 # 开启无索引的查询记录</code></pre><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><pre><code class="lang-shell"># Mac&gt; mysql.server restart# Linux &gt; service mysqld restart</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code class="lang-shell">mysql&gt; show variables like &#39;%query%&#39;;+------------------------------+-----------------------------------+| Variable_name                | Value                             |+------------------------------+-----------------------------------+| binlog_rows_query_log_events | OFF                               || ft_query_expansion_limit     | 20                                || have_query_cache             | NO                                || long_query_time              | 1.000000                          || query_alloc_block_size       | 8192                              || query_prealloc_size          | 8192                              || slow_query_log               | ON                                || slow_query_log_file          | /usr/local/var/mysql/Pro-slow.log |+------------------------------+-----------------------------------+8 rows in set (0.01 sec)mysql&gt; select sleep(2);+----------+| sleep(2) |+----------+|        0 |+----------+1 row in set (2.00 sec)mysql&gt; exitBye$ cat /usr/local/var/mysql/Pro-slow.log/usr/local/Cellar/mysql/8.0.21/bin/mysqld, Version: 8.0.21 (Homebrew). started with:Tcp port: 3306  Unix socket: /tmp/mysql.sockTime                 Id Command    Argument# Time: 2021-10-06T12:52:12.249937Z# User@Host: root[root] @ localhost []  Id:     8# Query_time: 2.003272  Lock_time: 0.000000 Rows_sent: 1  Rows_examined: 1SET timestamp=1633524730;select sleep(2);</code></pre><blockquote><p>删除日志文件后需要重启mysql 才能保存,不然文件不会重建.</p></blockquote><h3 id="修改日志文件存储到挂载磁盘"><a href="#修改日志文件存储到挂载磁盘" class="headerlink" title="修改日志文件存储到挂载磁盘"></a>修改日志文件存储到挂载磁盘</h3><pre><code class="lang-shell"># 1. 移动日志文件到 /home下mv /usr/local/var/mysql/Pro-slow.log /home/# 2. 在原本日志路径建立软连接ln -s /home/Pro-slow.log /usr/local/var/mysql/Pro-slow.log</code></pre><h2 id="PostgreSQL1"><a href="#PostgreSQL1" class="headerlink" title="PostgreSQL1"></a>PostgreSQL<a href="#refer-anchor-1"><sup>1</sup></a></h2><blockquote><p>当前 PostgreSQL 使用的是docker 镜像,对应 版本为 <code>daocloud.io/library/postgres:11-alpine</code></p></blockquote><p>PostgreSQL 设置<a href="#refer-anchor-3"><sup>3</sup></a>:</p><div class="table-container"><table><thead><tr><th>参数名称</th><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>logging_collector</td><td>on</td><td>Start a subprocess to capture stderr output and/or csvlogs into log files.</td></tr><tr><td>log_min_duration_statement</td><td>1s</td><td>Sets the minimum execution time above which statements will be logged.</td></tr><tr><td>log_filename</td><td>postgresql-%Y-%m-%d_%H%M%S.log</td><td>Sets the file name pattern for log files.</td></tr><tr><td>log_rotation_size</td><td>100MB</td><td>Automatic log file rotation will occur after N kilobytes.</td></tr><tr><td>log_directory</td><td>log</td><td>Sets the destination directory for log files.</td></tr></tbody></table></div><h3 id="查看设置-1"><a href="#查看设置-1" class="headerlink" title="查看设置"></a>查看设置</h3><pre><code class="lang-shell">$ psql -h localhost -U postgres -p 3456Password for user postgres: psql (13.4, server 11.4)Type &quot;help&quot; for help.postgres=# show log_min_duration_statement; log_min_duration_statement ---------------------------- 1s(1 row)postgres=#</code></pre><h3 id="修改设置"><a href="#修改设置" class="headerlink" title="修改设置"></a>修改设置</h3><blockquote><p>通过 <code>docker exec -it posgres /bin/bash</code> 进入docker 容器,修改 <code>/var/lib/postgresql/data/postgresql.conf</code>文件,修改内容如下:</p></blockquote><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20211008172936048.png" alt="image-20211006215637406"></p><h3 id="重新加载设置"><a href="#重新加载设置" class="headerlink" title="重新加载设置"></a>重新加载设置</h3><blockquote><p>参考<a href="#refer-anchor-1"><sup>1</sup></a></p></blockquote><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><blockquote><p>日志文件设置为 log 的存储位置为 <code>/var/lib/postgresql/data/log/</code></p></blockquote><pre><code class="lang-shell">$ psql -h localhost -U postgres -p 3456  Password for user postgres: psql (13.4, server 11.4)Type &quot;help&quot; for help.postgres=# select pg_sleep(2); pg_sleep ----------(1 row)postgres=# exit$ docker exec -it postgres /bin/bash                                                                                                                                                                                     22:45  bash-5.0# cd /var/lib/postgresql/data/log/bash-5.0# lspostgresql-2021-10-06_144542.logbash-5.0# cat postgresql-2021-10-06_144542.log 2021-10-06 14:45:42.013 UTC [19] LOG:  database system was shut down at 2021-10-06 14:45:40 UTC2021-10-06 14:45:42.016 UTC [1] LOG:  database system is ready to accept connections2021-10-06 14:47:05.283 UTC [42] FATAL:  password authentication failed for user &quot;postgres&quot;2021-10-06 14:47:05.283 UTC [42] DETAIL:  Password does not match for user &quot;postgres&quot;.    Connection matched pg_hba.conf line 95: &quot;host all all all md5&quot;2021-10-06 14:47:22.512 UTC [44] LOG:  duration: 2001.597 ms  statement: select pg_sleep(2);bash-5.0#</code></pre><h3 id="配置修改错误后，docker-不能重启解决方案2"><a href="#配置修改错误后，docker-不能重启解决方案2" class="headerlink" title="配置修改错误后，docker 不能重启解决方案2"></a>配置修改错误后，docker 不能重启解决方案<a href="#refer-anchor-2"><sup>2</sup></a></h3><blockquote><p><code>虽然docker容器未启动,但是docker cp 命令依然可以用,所以使用docker cp命令拷贝出来,修改正确后再拷贝回相对应的位置,即可.</code></p></blockquote><p>虽然 Linux 能找到容器文件的挂载位置,但是Mac没找到相应的文件.</p><p><code>screen ~/Library/Containers/com.docker.docker/Data/vms/0/tty</code></p><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><h5 id ='refer-anchor-1'><a href ="https://www.jianshu.com/p/78fe12174d25">postgresql开启慢查询日志</a></h5><h5 id ='refer-anchor-2'><a href ="https://zhuanlan.zhihu.com/p/159426055">Docker容器无法启动,里面的配置文件如何修改</a></h5>   <h5 id ='refer-anchor-3'><a href ="https://www.cnblogs.com/alianbog/p/5596921.html">Postgresql日志收集</a></h5>   ]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基本操作</title>
      <link href="//235b27fb.html"/>
      <url>//235b27fb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git-基本操作笔记"><a href="#Git-基本操作笔记" class="headerlink" title="Git 基本操作笔记"></a>Git 基本操作笔记</h1><h2 id="切换分支1"><a href="#切换分支1" class="headerlink" title="切换分支1"></a>切换分支<sup><a href="#fn_1" id="reffn_1">1</a></sup></h2><pre><code class="lang-shell">$ git checkout -b test     # 创建并切换$ git switch master          # git 2.23 之后$ git switch -c dev          # 创建并切换</code></pre><h3 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h3><blockquote><p>-b <new_branch><br>        Create a new branch named <new_branch> and start it at <start_point>; see git-branch(1) for details.</p><p>-B <new_branch><br>        Creates the branch <new_branch> and start it at <start_point>; if it already exists, then reset it to <start_point>. This is equivalent to running “git branch” with “-f”; see git-branch(1) for details.</p></blockquote><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><blockquote><p>-c <new-branch>, —create <new-branch><br>   Create a new branch named <new-branch> starting at <start-point> before switching to the branch. This is a convenient shortcut for:</p></blockquote><p><code>$ git branch &lt;new-branch&gt;</code><br><code>$ git switch &lt;new-branch&gt;</code></p><h2 id="暂存内容-git-stash"><a href="#暂存内容-git-stash" class="headerlink" title="暂存内容 git stash"></a>暂存内容 <code>git stash</code></h2><blockquote><p>在 dev 分支未开发完成,不必要commit 时,如果需要切换分支，需要将当前内容暂时存起来。</p></blockquote><p>stash 文档内容如下：</p><pre><code class="lang-shell">SYNOPSIS       git stash list [&lt;options&gt;]       git stash show [&lt;options&gt;] [&lt;stash&gt;]       git stash drop [-q|--quiet] [&lt;stash&gt;]       git stash ( pop | apply ) [--index] [-q|--quiet] [&lt;stash&gt;]       git stash branch &lt;branchname&gt; [&lt;stash&gt;]       git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]                    [-u|--include-untracked] [-a|--all] [-m|--message &lt;message&gt;]                    [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]]                    [--] [&lt;pathspec&gt;...]]       git stash clear       git stash create [&lt;message&gt;]       git stash store [-m|--message &lt;message&gt;] [-q|--quiet] &lt;commit&gt;</code></pre><pre><code class="lang-shell">$ git stash [push] Save your local modifications to a new stash entry and roll them back to HEAD (in the working tree and in the index). The &lt;message&gt;           part is optional and gives the description along with the stashed state. For quickly making a snapshot, you can omit &quot;push&quot;. In this mode, non-option arguments are not allowed to prevent a misspelled           subcommand from making an unwanted stash entry. The two exceptions to this are stash -p which acts as alias for stash push -p and           pathspec elements, which are allowed after a double hyphen -- for disambiguation.$ git stash list list [&lt;options&gt;]           List the stash entries that you currently have.$ git stash poppop [--index] [-q|--quiet] [&lt;stash&gt;]           Remove a single stashed state from the stash list and apply it on top of the current working tree state, i.e., do the inverse           operation of git stash push. The working directory must match the index.           Applying the state can fail with conflicts; in this case, it is not removed from the stash list. You need to resolve the conflicts by           hand and call git stash drop manually afterwards.$ git stash apply apply [--index] [-q|--quiet] [&lt;stash&gt;]           Like pop, but do not remove the state from the stash list. Unlike pop, &lt;stash&gt; may be any commit that looks like a commit created by           stash push or stash create.</code></pre><h2 id="合并分支2"><a href="#合并分支2" class="headerlink" title="合并分支2"></a>合并分支<sup><a href="#fn_2" id="reffn_2">2</a></sup></h2><p>git merge —ff / —no-ff / —ff-only</p><pre><code class="lang-shell">--ff, --no-ff, --ff-only    Specifies how a merge is handled when the merged-in history is already a descendant of the current history. --ff is the default unless merging an annotated (and possibly signed) tag that is not stored in its natural place in the refs/tags/ hierarchy, in which case --no-ff is assumed.    With --ff, when possible resolve the merge as a fast-forward (only update the branch pointer to match the merged branch; do not create a merge commit). When not possible (when the merged-in history is not a descendant of the current history), create a merge commit.    With --no-ff, create a merge commit in all cases, even when the merge could instead be resolved as a fast-forward.    With --ff-only, resolve the merge as a fast-forward when possible. When not possible, refuse to merge and exit with a non-zero status.</code></pre><h2 id="修复Bug过程"><a href="#修复Bug过程" class="headerlink" title="修复Bug过程"></a>修复Bug过程</h2><blockquote><p>当前在 dev 开发， 需要在 master 上 修复Bug</p><ol><li>保存当前修改内容</li><li>切换master分子</li><li>创建修复Bug分支</li><li>修复Bug</li><li>切换主分支</li><li>合并</li><li>切换dev 分支</li><li>恢复暂存的内容</li></ol></blockquote><pre><code class="lang-shell">1. git stash 2. git checkout master 3. git checkout -b issue-101  4. # 修复Bug...5. git switch master6. git merge --no-ff -m &quot;merged bug fix 101&quot; issue-1017. git switch dev8. git stash list9. git stash pop## Bug 修复完成</code></pre><h2 id="添加新功能过程"><a href="#添加新功能过程" class="headerlink" title="添加新功能过程"></a>添加新功能过程</h2><blockquote><p>为了防止把主分支内容搞乱，每添加一个新功能，最好新建一个<code>feature</code>分支  </p><ol><li><p>创建新功能分支</p></li><li><p>开发内容<br>3.1  合并到 开发分支<br> 3.2  删除新开发内容</p></li></ol></blockquote><pre><code class="lang-shell"># 当前 master 分支1. git switch -c feature-xx2. # 开发...3. git merge --no-ff -m &quot;merged feature&quot; dev4. git branch -d[-D] feature-xx # 在未合并的情况下，使用 D 强制删除分支</code></pre><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><h5 id = "fn_1"> [ ^ 1 ]: <a href = "https://blog.csdn.net/qq756684177/article/details/104454371">工具系列 | git checkout 可替换命令 git switch 和 git restore</a></h5><h5 id = "fn_3"> [ ^ 2 ]: <a href ='https://www.jianshu.com/p/418323ed2b03'>git merge和git merge --no-ff的区别</a></h5><blockquote id="fn_2"><sup>2</sup>. <a href="http://wwww.baidu.com">adssds</a><a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Utils </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python环境配置</title>
      <link href="//a5a3c0b9.html"/>
      <url>//a5a3c0b9.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python-环境搭建"><a href="#Python-环境搭建" class="headerlink" title="Python 环境搭建"></a>Python 环境搭建</h1><h2 id="下载Python安装包3-9-6"><a href="#下载Python安装包3-9-6" class="headerlink" title="下载Python安装包3.9.6"></a>下载Python安装包<a href="https://www.python.org/downloads/">3.9.6</a></h2><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210824175001969.png" alt="image-20210824175001969"></p><p><strong>一路 继续 就可以了</strong></p><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210824175204549.png" alt="image-20210824175204549"></p><h2 id="Python-多版本配置-配置环境变量"><a href="#Python-多版本配置-配置环境变量" class="headerlink" title="Python 多版本配置 - 配置环境变量"></a>Python 多版本配置 - 配置环境变量</h2><blockquote><p> 安装新版本后, Python3 命令运行的仍为旧版本 [可能是旧环境变量的原因,修改下就好了]</p></blockquote><pre><code class="lang-shell">$ python3                                                                                                                                      Python 3.8.5 (v3.8.5:580fbb018f, Jul 20 2020, 12:11:27)[Clang 6.0 (clang-600.0.57)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt;$ python3.8                                                                                                                                    Python 3.8.5 (v3.8.5:580fbb018f, Jul 20 2020, 12:11:27)[Clang 6.0 (clang-600.0.57)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; $ python3.9                                                                                                                                   Python 3.9.6 (v3.9.6:db3ff76da1, Jun 28 2021, 11:49:53)[Clang 6.0 (clang-600.0.57)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt;</code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><blockquote><p>修改 <code>.bash_profile</code> 文件 - 注释掉就配置文件, 添加新 Python 版本的路径,<code>一般只修改版本号即可</code>. Mac有多个配置文件<a href="#refer-anchor-1"><sup>1</sup></a></p></blockquote><pre><code class="lang-shell"># Setting PATH for Python 3.8# The original version is saved in .bash_profile.pysave# PATH=&quot;/Library/Frameworks/Python.framework/Versions/3.8/bin:$&#123;PATH&#125;&quot;PATH=&quot;/Library/Frameworks/Python.framework/Versions/3.9/bin:$&#123;PATH&#125;&quot;export PATH</code></pre><h3 id="Linux别名2"><a href="#Linux别名2" class="headerlink" title="Linux别名2"></a>Linux别名<a href="#refer-anchor-2"><sup>2</sup></a></h3><blockquote><p>使用别名的方式为 Python 新版本的执行脚本起个别名</p></blockquote><pre><code class="lang-shell">alias python3=&#39;/usr/local/bin/python3.9&#39;                                                                                                     python3                                                                                                                                      Python 3.9.6 (v3.9.6:db3ff76da1, Jun 28 2021, 11:49:53)[Clang 6.0 (clang-600.0.57)] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt;</code></pre><p>⚠️<strong>:该方法只是修改 python3 的命令,但是不能从根本上解决问题</strong></p><h4 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h4><blockquote><p>该方法只修改了Python3的命令, 但是 Python 的其他命令仍为就版本,如 pip3 示例如下:</p></blockquote><pre><code class="lang-shell">$ pip3 -Vpip 21.0.1 from /Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/pip (python 3.8)$ source .bash_profile # 修改环境变量后$ pip3 -V                                                                                                                              pip 21.1.3 from /Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/pip (python 3.9)</code></pre><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li><p><a href="https://www.jetbrains.com/pycharm/download/#section=mac">PyCharm</a></p><blockquote><p>Jetbrains的Python开发工具</p></blockquote><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210829202519056.png" alt="image-20210829202519056"></p></li></ol><ol><li><p><a href="(https://jupyter.org/">Jupyter</a></p><blockquote><p>类似于一个服务, 在 termianl 中运行<code>jupyter-notebook</code>, 在浏览器中访问服务地址,即可开始开发学习了.</p></blockquote><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210829125813239.png" alt="image-20210829125813239"></p></li></ol><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><hr><h5 id ='refer-anchor-1'><a href ="https://www.cnblogs.com/songjianming/articles/12497740.htm">[1]: Mac中环境变量加载顺序</a></h5>   <h5 id="refer-anchor-2"><a href ="https://blog.csdn.net/qq_44821149/article/details/104065460">[2]: Linux起别名详解</a></h5>   ]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的博客</title>
      <link href="//99c36cb.html"/>
      <url>//99c36cb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo-博客搭建"><a href="#Hexo-博客搭建" class="headerlink" title="Hexo 博客搭建"></a>Hexo 博客搭建</h1><blockquote><p>本文主要记录在搭建自己的个人博客时搜索的相关文章链接.</p></blockquote><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><blockquote><ol><li><a href="http://nodejs.cn/download/">Node.js</a></li><li><a href="https://hexo.io/zh-cn/">Hexo</a></li><li><a href="https://git-scm.com/">Git</a></li></ol></blockquote><h2 id="相关配置插件"><a href="#相关配置插件" class="headerlink" title="相关配置插件"></a>相关配置插件</h2><blockquote><ol><li><a href="https://www.cnblogs.com/fby698/p/12663089.html">音乐播放插件</a></li><li><a href="https://blog.csdn.net/weixin_40834438/article/details/106365433">看板娘</a></li><li><a href="http://busuanzi.ibruce.info/">不算子统计插件</a></li><li>图床 - <a href="https://blog.csdn.net/qq_39564555/article/details/105080209">利用码云 gitee + PicGo 搭建个人免费图床</a></li></ol></blockquote><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><blockquote><p>创建\编写\发布 博客小脚本,<a href="#tool-1">参见文末</a></p><ol><li><a href="https://segmentfault.com/a/1190000017986794">创建Git仓库</a></li><li>编写博客</li><li>发布</li></ol></blockquote><h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><blockquote><ol><li>不算子统计数据不显示</li></ol></blockquote><h3 id="参考内容引用优化"><a href="#参考内容引用优化" class="headerlink" title="参考内容引用优化"></a>参考内容引用优化</h3><blockquote><p>Matery 主题: 解决点击链接位置偏移的问题, 一下配置在文章中开启目录生才生效</p></blockquote><ol><li><p>文章内引用编号设置锚点</p><pre><code class="lang-html">文件[&lt;sup&gt;1&lt;/sup&gt;](#refer-anchor-1)</code></pre></li></ol><ol><li><p>参考内容链接设置</p><pre><code class="lang-html"> &lt;h5 id =&#39;refer-anchor-1&#39;&gt;&lt;a href =&quot;https://www.cnblogs.com/songjianming/articles/12497740.htm&quot;&gt;[1]: Mac中环境变量加载顺序&lt;/a&gt;&lt;/h5&gt;</code></pre></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr><h5 id ='tool-1'>编写博客小脚本</h5>   <pre><code class="lang-shell">#!/bin/shread -p &quot;创建(N)/发布(P)/本地发布(S)博客:&quot; typeif [ $type = &#39;N&#39; ]then    read -p &quot;博客名称:&quot; name    echo `hexo new $name`    open -a /Applications/Typora.app  $path/source/_posts/$name.md    echo &#39;N&#39;elif [ $type = &#39;P&#39; ]then    hexo clean    hexo g    hexo d    echo &quot;finished!&quot;elif [ $type = &#39;S&#39; ]then     hexo s    echo &quot;finished!&quot;else    echo &quot;see you again!&quot;fi</code></pre>]]></content>
      
      
      <categories>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Utils </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法导论(二)</title>
      <link href="//2a0926d8.html"/>
      <url>//2a0926d8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="一、-渐进符号"><a href="#一、-渐进符号" class="headerlink" title="一、 渐进符号"></a>一、 渐进符号</h2><h4 id="O符号-大O符号"><a href="#O符号-大O符号" class="headerlink" title="O符号 (大O符号)"></a>O符号 (大O符号)</h4><blockquote><p><strong>定义</strong>: <script type="math/tex">f(n) = O(g(n)) f(n) 属于 g(n)的函数集, \exists</script>常数c, n<sub>0</sub>  c&gt; 0 , n<sub>0</sub> &gt; 0</p><p><strong>使得</strong> $f(n) \leq O(g(n))$ 对于充分大的 n 成立,  n &gt;= n<sub>0</sub></p></blockquote><h4 id="Ex-2n-2-O-n-3-等号是不对称的"><a href="#Ex-2n-2-O-n-3-等号是不对称的" class="headerlink" title="Ex: $ 2n^2 = O(n^3) $ 等号是不对称的"></a>Ex: $ 2n^2 = O(n^3) $ <strong>等号是不对称的</strong></h4><script type="math/tex; mode=display">O(g(n)) =  \{ f(n) |\  \exists ,c > 0, n_0 > 0, 使得\ f(n) \ 以\ 0 和\ c *g(n)为界\   0 \leq f(f(n)) \leq c *g(n) \  for \ all \  n \geq n_0 \}</script><p><code>不是等于 =&gt; 是一种 属于的关系</code></p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>$ f(n) = n^3 + O(n^2)$ 表示</p><p>$ f(n) = n^3 + O(n^2) \  \exists h(n) \in O(n^2) =&gt; f(n) = n^3 + h(n)  , 存在 n &gt; n_0$</p><p>有低阶项以某个常数 * $n^2$ 为 界</p><h4 id="Ex-n-2-O-n-O-n-2-此处不对称-表示-is"><a href="#Ex-n-2-O-n-O-n-2-此处不对称-表示-is" class="headerlink" title="Ex $ n^ 2  +O(n) = O(n^2)$ 此处不对称, 表示 is "></a>Ex $ n^ 2  +O(n) = O(n^2)$ <strong>此处不对称, 表示 is </strong></h4><blockquote><p>任何$n^2  +O(n)$ 都是 $O(n^2)$ 反之不然</p></blockquote><p>$ means \ for  \ any \ f(n) \in O(n) \ there \ is \ an \ h(n) \in O(n^2) \ such \ that \ n^2 + f(n) = h(n) $</p><h4 id="Ω符号-大Ω符号"><a href="#Ω符号-大Ω符号" class="headerlink" title="Ω符号 (大Ω符号)"></a>Ω符号 (大Ω符号)</h4><h4 id="theta-符号-大-theta符号"><a href="#theta-符号-大-theta符号" class="headerlink" title="\theta 符号 (大\theta符号)"></a><script type="math/tex">\theta</script> 符号 (大<script type="math/tex">\theta</script>符号)</h4><h2 id="二、-严格符号"><a href="#二、-严格符号" class="headerlink" title="二、 严格符号"></a>二、 严格符号</h2><h4 id="o-符号-小o符号"><a href="#o-符号-小o符号" class="headerlink" title="o 符号 (小o符号)"></a>o 符号 (小o符号)</h4><h4 id="ω-符号-小ω符号"><a href="#ω-符号-小ω符号" class="headerlink" title="ω 符号 (小ω符号)"></a>ω 符号 (小ω符号)</h4><h2 id="解递归式"><a href="#解递归式" class="headerlink" title="解递归式"></a>解递归式</h2>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="//6208627e.html"/>
      <url>//6208627e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><blockquote><p>为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p><p>将请求的业务逻辑,放在链表里,通过遍历链表,查询需要完成的逻辑,并执行逻辑.</p></blockquote><pre><code class="lang-java">public &lt;T&gt; interface Ihandle&#123;    public boolean canDo(T c);    public void doHandler(T c);&#125;public class firstHandler implement Ihandler&#123;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式接口(二)</title>
      <link href="//10d15d1a.html"/>
      <url>//10d15d1a.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h1><ul><li><a href="https://www.bilibili.com/video/av55246614?p=164">P164</a></li></ul><h2 id="继承的特点"><a href="#继承的特点" class="headerlink" title="继承的特点"></a>继承的特点</h2><p><strong>单继承</strong></p><pre><code class="lang-java">class A&#123;&#125;class B extends A&#123;&#125;  ‍️class C extends A,B&#123;&#125; ‍️</code></pre><p><strong>多级继承</strong></p><ul><li><p>Java.long.Object</p><p>  class A{}<br>  class B extends A {}  ‍️<br>  class C extends B {}  ‍️  </p></li></ul><p><strong>多子类</strong></p><h2 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类 (abstract)"></a>抽象类 (abstract)</h2><ul><li><p><a href="https://www.bilibili.com/video/av55246614?p=165">P165</a></p><ul><li>子类就是一个父类，所以是继承关系。</li><li>子类中共有的方法，但是所有子类都不一样</li></ul></li></ul><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><pre><code>含有抽象方法的类，必须是抽象类</code></pre><pre><code class="lang-java">    public abstract class Animal&#123;        //抽象方法定义        public abstract void eat();        //普通方法定义        public void move ()&#123;        &#125;    &#125;</code></pre><ul><li>不能直接使用<strong>new</strong>关键字</li><li>必须用子类继承抽象父类</li><li>子类必须实现父类中所有的抽象方法</li><li>创建子类对象进行使用</li></ul><pre><code class="lang-java">public class Cat extends Animal&#123;    @Override    public void eat()&#123;        sout(&quot;猫吃鱼！&quot;);    &#125;&#125;Cat cat = new Cat;cat.eat();</code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>抽象类<strong>不能创建对象</strong></li><li>抽象类中，可以有构造函数，是供子类创建对象时，初始化父类成员使用的。<ul><li>如果构造函数是抽象的，则子类中用 supper()调用</li><li>先创建父类</li><li>后创建子类</li></ul></li><li>抽象类不一定有抽象方法，没有抽象方法的抽象类，也不能直接创建对象</li><li>抽象类的子类，必须实现父类<strong>所有</strong>的抽象方法，否则依然是一个抽象类</li></ul><h3 id="发红包案例"><a href="#发红包案例" class="headerlink" title="发红包案例"></a>发红包案例</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><pre><code>红包分为普通红包和运气红包</code></pre><ol><li>群主有钱</li><li>成员收红包，余额增加</li></ol><ul><li>类： 群主、普通成员、用户类  </li><li>共性：姓名、余额  </li><li>独有：  <ul><li>群主： 发红包</li><li>成员： 收红包</li></ul></li><li>发红包<ul><li>返回值类型： ArrayList<Integer></li><li>方法名称： send</li><li>参数列表：<ul><li>总金额： int totalMoney</li><li>分数： int count<pre><code class="lang-java">public ArrayList &lt;Integer&gt; send (int totalMoney,int count)&#123;...&#125;</code></pre></li></ul></li></ul></li><li>收红包<ul><li>返回值类型：void</li><li>方法名：receive</li><li>参数列表：ArrayList<Integer></li></ul></li></ul><pre><code class="lang-java">public void receive (ArrayList &lt;Integer&gt; list)&#123;    ...&#125;</code></pre><h2 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h2><p>接口就是一个 <strong>公共的规范接口</strong><br>符合标准 -&gt; 通用<br>关键字 interface -&gt; <strong>.class 文件</strong></p><ul><li>包含的内容<ul><li>常量</li><li>抽象方法</li><li>默认方法 JDK8</li><li>静态方法 JDK8</li><li>私有方法 JDK9</li></ul></li></ul><p><strong>接口是引用类型</strong></p><p>public interface 接口名称{<br>    //接口内容<br>}</p><ul><li>定义</li><li><p>注意：</p><ul><li><p>接口不能直接使用，必须使用一个实现类来实现接口</p><pre><code class="lang-java">public class 实现类名 implements 接口名称&#123;&#125;</code></pre></li><li>实现类<strong>必须</strong>重写 接口中所有的抽象类</li><li>创建实现类使用接口</li><li>如果有抽象方法没有重写，那么该类就是一个<strong>抽象类</strong></li></ul></li></ul><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><ul><li><p>从JDK8 允许默认方法</p></li><li><p>可以解决接口升级问题</p><ul><li>如果接口添加抽象方法，就会导致所有子类全部实现</li><li>使用default 方法，在<strong>接口中实现方法体</strong></li></ul></li><li>使用</li></ul><pre><code class="lang-java">    public default 返回值 方法名称(方法参数)&#123;        //可以有方法体        //public 可以省略    &#125;</code></pre><ul><li>默认方法会被实现类所<strong>继承</strong> </li><li>也可被实现类<strong>重写</strong></li></ul><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>static ：共享方法</p><pre><code class="lang-java">    public static void test()&#123;        //带有方法体    &#125;</code></pre><ul><li>接口名称可以直接 <strong>.</strong> 调用</li><li><strong>不能通过实现类调用静态方法</strong> <ul><li>实现多个接口，静态方法可能发生冲突</li><li>不需要创建实现类对象</li></ul></li></ul><h3 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h3><pre><code>一种安全机制</code></pre><ul><li>普通<ul><li>多个<strong>默认</strong>方法之间重复代码问题</li></ul></li></ul><pre><code class="lang-java">private void test()&#123;&#125;</code></pre><ul><li>静态<ul><li>多个<strong>静态</strong>方法之间重复代码问题</li></ul></li></ul><pre><code class="lang-java">private static void test()&#123;&#125;</code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>接口中够可以定义成员”变量” <strong>public static final</strong> (省略依旧)<br>不可修改</p><p>public static final int x = 1;</p><p>共有、接口名称 <strong>.</strong> 访问</p><ul><li>常量必须赋值</li><li>完全大写</li><li>下划线连接单词</li></ul><p><a href="https://www.bilibili.com/video/av55246614?p=182">接口小结</a></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>在Java 9+ 版本中，接口的内容有：</li></ul><ol><li>成员变量其实是称量，格式：<ul><li>[public] [static] [final] 数据类型 常量名 = 数据值;</li><li>注意：<ul><li>常量必须进行赋值，且不可改变</li><li>常量名完全大写，用下划线分割</li></ul></li></ul></li><li>接口中最重要的是抽象方法，格式：<ul><li>[public] [abstract] 返回值类型 方法名称 (参数列表);</li><li>注意:<ul><li>实现类必须实现所有的抽象方法</li></ul></li></ul></li><li>从Java8 开始 ,允许定义默认方法，格式：    <ul><li>[public] default 返回值类型 方法名称(参数列表){ 方法体 }</li><li>注意:<ul><li>默认方法也可以被覆盖重写</li></ul></li></ul></li><li>从Java8 开始, 允许定义静态方法，格式:<ul><li>[public] static 返回值类型 方法名称(参数列表) { 方法体 }</li><li>注意：<ul><li>通过接口名称直接调用，不能通过实现类进行调用</li></ul></li></ul></li><li>从Java9 开始, 允许定义私有方法,格式：<ul><li>普通私有方法：private 返回值类型 方法名称(参数列表){ 方法体 }</li><li>静态私有方法：private static 返回值类型 方法名称(参数列表){ 方法体  }</li><li>注意:<ul><li>private 的方法只能在接口内调用，不能被实现类和别人使用。</li></ul></li></ul></li></ol><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><pre><code>接口不能有静态代码块和构造方法 抽象类有构造方法一个类的直接父类只有一个，但是可以实现多个接口    public class MyInterfaceImpl implements MyInterfaceA,MyInterfaceB&#123;&#125;两个抽象方法重名，只需覆盖重写一次即可重名的默认方法，实现类一定对重复的覆盖重写    一个类如果直接父类中的方法，和接口中的方法发生冲突，直接使用父类的方法继承 优先于 接口实现</code></pre><ul><li>类与类是单继承的</li><li>类与接口是多实现的</li><li><p>接口与接口之间是多继承的</p><ul><li>多个父接口当中的抽象方法冲突可以</li><li>多个父接口当中的默认方法冲突，那么子接口必须进行默认方法覆盖，【必须带着 default 关键字】</li></ul></li><li><p><a href="https://www.bilibili.com/video/av55246614?p=184">P184 结束</a></p></li></ul><hr><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><ul><li><p><a href="https://www.bilibili.com/video/av55246614?p=410">P410 开始</a></p><p>  有且只有一个抽象方法的接口，称之为函数式接口<br>  可以包含其他的方法（默认方法、静态方法、私有方法）<br>  函数式编程 Lambda</p></li></ul><pre><code class="lang-java">/**    @FunctionalInterface        可以监测是否是一个函数式接口 */@FunctionalInterfacepublic interface MyFocationInterface&#123;&#125;    public abstract void method();</code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre><code>一般可以作为参数和返回值来使用</code></pre><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><pre><code class="lang-java">    //定义一个方法，参数使用函数式接口     public static void test (MyFunctionInterface myInter)&#123;        myInter.method();    &#125;    main()&#123;        //调用 show 方法，参数使用函数式接口的实现类对象         show (new MyFunctionInterfaceImpl());        //调用show方法 ，参数使用 匿名内部类        show(new MyFunctionInterface()&#123;            @Override            public void method()&#123;                sout(&quot;使用匿名内部类重写接口中的抽象方法！&quot;);            &#125;        &#125;);        //调用show方法 ，参数使用 Lambda 表达式        show(()-&gt; sout(&quot;Lambda实现接口的抽象方法！&quot;));    &#125;</code></pre><pre><code>匿名内部类生成 .class 文件Lambda表达式不会生成 .class 文件</code></pre><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="Lambda-的延迟执行"><a href="#Lambda-的延迟执行" class="headerlink" title="Lambda 的延迟执行"></a>Lambda 的延迟执行</h3><p>日志可以快速定位问题</p><pre><code class="lang-java">package Demo4.Lambda;/*    日志案例    性能浪费的问题：        调用  showLog 传递的第二个参数是一个拼接后的字符串        先拼接 后调用方法        showLog 如果等级不是 1 级，不会输出，字符串白 拼接了，浪费     使用Lambda 特性进行 优化     使用前提：必须存在函数式接口        延迟加载*/public class Demo01Logger &#123;    //定义一个根据日志等级，显示日志信息    public static void showLog(int level,String message) &#123;        if(level == 1)&#123;            System.out.println(message);        &#125;    &#125;    public static void main(String[] args) &#123;        //定义三个日志信息        String msg1 = &quot;Hello&quot;;        String msg2 = &quot;World&quot;;        String msg3 = &quot;Java&quot;;        //调用showLog 方法，传递参数        showLog(1,msg1+msg2+msg3);        //========================        //Lambda 优化        showLog2(1,()-&gt;msg1+msg2+msg3);    &#125;    //传递等级 和 接口    public static void showLog2(int level ,MessageBuilder builder)&#123;        if(level == 1)&#123;            System.out.println(builder.builderMessage());        &#125;    &#125;&#125;@FunctionalInterfacepublic interface MessageBuilder &#123;    public abstract String builderMessage();&#125;</code></pre><pre><code>使用 Lambda 表达式 作为参数传递，仅仅把参数传递到showLog 中只有满足条件，日志的等级为1     才会调用接口 MessageBuilder 中的方法 BuilderMessage    才会进行字符串的拼接如果条件不满足 level != 1    MessageBuilder 中的方法不会调用    资源不会浪费</code></pre><p><strong>Runable</strong> 是一个 函数式接口</p><pre><code class="lang-java">public class RunnableLambda &#123;    public static void threadRun (Runnable run)&#123;        new Thread(run).start();    &#125;    public static void main(String[] args) &#123;        //匿名内部类        threadRun(new Runnable() &#123;            @Override            public void run() &#123;                System.out.println(Thread.currentThread().getName() +&quot;--&gt; 线程启动！&quot;);            &#125;        &#125;);        //Lambda 表达式        threadRun(()-&gt; System.out.println(Thread.currentThread().getName() +&quot;--&gt; 线程启动!&quot;));        new Thread(()-&gt;System.out.println(Thread.currentThread().getName() +&quot;--&gt; 线程启动!&quot;)).start();    &#125;&#125;</code></pre><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>Comparator 也是一个 函数式借口</p>]]></content>
      
      
      <categories>
          
          <category> Lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> 函数式接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解及其使用</title>
      <link href="//b022c5f1.html"/>
      <url>//b022c5f1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><pre><code class="lang-java">import java.lang.annotation.ElementType;import java.lang.annotation.Retention;import java.lang.annotation.RetentionPolicy;import java.lang.annotation.Target;@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)public @interface MyAnnotation &#123;    String value() default &quot;defaultValue&quot;;&#125;</code></pre><blockquote><p><code>@Target</code>:  指定注解的使用范围; ElementType 枚举 TYPE, FIELD,METHOD…</p><p><code>@Retention</code>:  指示带注释类型的注释将保留多长时间。默认: @Retention 上的 @Retention(RetentionPolicy.RUNTIME); RetentionPolicy 枚举 CLASS\RUNTIME\SOURCE</p></blockquote><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><pre><code class="lang-java">import com.yang.annotation.MyAnnotation;@MyAnnotation(&quot;value&quot;)public class Entity() &#123;&#125;</code></pre><h3 id="3-获取注解内容"><a href="#3-获取注解内容" class="headerlink" title="3. 获取注解内容"></a>3. 获取注解内容</h3><blockquote><p>通过反射获取注解内变量的值</p></blockquote><pre><code class="lang-java">import com.yang.annotation.MyAnnotation;import javax.swing.text.html.parser.Entity;public class Test &#123;    void content() &#123;        System.out.println(Entity.class.getAnnotation(MyAnnotation.class).value());    &#125;&#125;</code></pre><h4 id="获取注解的方法"><a href="#获取注解的方法" class="headerlink" title="获取注解的方法"></a>获取注解的方法</h4><blockquote><p>对应 ElementType的 TYPE\FIELD\METHOD</p></blockquote><ol><li>TYPE (Class 类下)<blockquote><p>getAnnotation(Class<A> annotationClass) - 获取指定类型的注解 , 无返回 null<br>getAnnotations() - 返回所有注解<br>getAnnotationsByType(Class<A> annotationClass)<br>Returns annotations that are associated with this element.</p></blockquote></li><li>Field <blockquote><p>getAnnotatedType()<br>Returns an AnnotatedType object that represents the use of a type to specify the declared type of the field represented by this Field.<br>getAnnotation(Class<T> annotationClass)<br>Returns this element’s annotation for the specified type if such an annotation is present, else null.<br>getAnnotationsByType(Class<T> annotationClass)<br>Returns annotations that are associated with this element.</p></blockquote></li><li>METHOD<blockquote><pre><code>```vimgetAnnotatedReturnType()    ```Returns an AnnotatedType object that represents the use of a type to specify the return type of the method/constructor represented by this Executable.getAnnotation(Class&lt;T&gt; annotationClass)Returns this element&#39;s annotation for the specified type if such an annotation is present, else null.    getDeclaredAnnotations() - 返回元素注解列表Returns annotations that are directly present on this element.</code></pre></blockquote></li></ol><h3 id="4-输出内容"><a href="#4-输出内容" class="headerlink" title="4. 输出内容"></a>4. 输出内容</h3><pre><code class="lang-shell">value</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>干掉Switch</title>
      <link href="//ceb286b0.html"/>
      <url>//ceb286b0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>优化目标</strong>： 去掉Switch</p></blockquote><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><blockquote><p>对于前端页面的筛选查询，查询条件具有不确定性，不同的字段可能使用的条件也是不同的，需要对不同的字段创建不同的查询条件。</p><ul><li><p>查询：使用MyBatsiPlus 的 QueryWrapper 进行单表查询。</p></li><li><p>根据JSONObject 对象中的不同的Key调用不同的QueryWrapper 对象方法，组织查询条件。</p></li></ul></blockquote><h2 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h2><pre><code class="lang-java">/** * @author &lt;a href=&quot;mailto:1595550476@qq.com&quot;&gt;KawYang&lt;/a&gt; * Created by MacBook Pro on 2021/05/06. */@Servicepublic class ThirdPartLogServiceImpl implements ThirdPartLogService &#123;    @Autowired    private RequestLogMapper requestLogMapper;       // 模糊查询列表方法    @Override    public List&lt;LogInfo&gt; getList(JSONObject jsonObject, Integer page, Integer size) &#123;        // 根据JSONObject组织 QueryWrapper        QueryWrapper&lt;RequestLog&gt; queryWrapper = new QueryWrapper&lt;&gt;();        makeQuery(jsonObject, queryWrapper);        queryWrapper.orderByAsc(&quot;id&quot;);        queryWrapper.last(&quot;limit &quot; +((page-1) * size) + &quot;,&quot; +size);        return requestLogMapper.selectList(queryWrapper).stream()                .peek(System.out::println)                .map(RequestLog::transToResponse)                .collect(Collectors.toList());    &#125;      // 待优化的代码块 - 去掉 代码中的 switch     private void makeQuery(JSONObject jsonObject, QueryWrapper queryWrapper) &#123;        jsonObject.keySet().stream()                  // 过滤掉错误条件                  .filter(e-&gt;jsonObject.getObject(e, Object.class) != null &amp;&amp; !jsonObject.getString(e).isEmpty()        ).forEach(e -&gt;&#123;            switch (e)&#123;                case &quot;endTime&quot;:                    queryWrapper.le(keyMap.get(e), jsonObject.getObject(e, Date.class)); break;                case &quot;startTime&quot;:                    queryWrapper.ge(keyMap.get(e), jsonObject.getObject(e, Date.class)); break;                default:                    queryWrapper.eq(keyMap.get(e), jsonObject.getObject(e, String.class)); break;            &#125;        &#125;);    &#125;    /**     * jsonObject.key -&gt; table.key     * 将 JSONObject 的 Key 转换成 表 中的Kay     */    private static final Map&lt;String, String&gt; keyMap = new HashMap&lt;String, String&gt;()&#123;        &#123;            put(&quot;startTime&quot;, &quot;add_time&quot;);            put(&quot;endTime&quot;, &quot;add_time&quot;);            put(&quot;doctor&quot;, &quot;doctor&quot;);            put(&quot;subType&quot;, &quot;sub_type&quot;);            put(&quot;status&quot;, &quot;status&quot;);            put(&quot;backStatus&quot;, &quot;back_status&quot;);        &#125;    &#125;;&#125;</code></pre><blockquote><p><strong>分析</strong>: Switch max 执行的次数为 ： jsonObject 的 Kay 的数量 与 swatch 的case 数量的 <strong>笛卡尔积</strong> 时间复杂度为 $O(n^2)$</p><p><strong>优化</strong>: 由于 startTime 和 endTime 只处理一次, 可以先处理，再用循环处理默认方法 -&gt;将时间复杂度降成 $O(n)$.</p><p>函数式接口的定义： 执行的方法<code>queryWrapper.le(keyMap.get(e), jsonObject.getObject(e, Date.class))</code>中有三个参数 ， 其中 e 在 前两个case 中可以写死，所以可以需要定义两个参数。方法中不需要返回值，可以选择java8 的 <code>BiConsumer</code>函数接口。</p><pre><code class="lang-java">@FunctionalInterfacepublic interface BiConsumer&lt;T, U&gt;&#123;void accept(T t, U u);...&#125;</code></pre></blockquote><h2 id="初次优化"><a href="#初次优化" class="headerlink" title="初次优化"></a>初次优化</h2><pre><code class="lang-java">      // 先定义函数式接口  - 不同的 Key 值调用不同的方法    private BiConsumer&lt;JSONObject, QueryWrapper&gt; FN1 = (json, queryWrapper) -&gt; queryWrapper.le(keyMap.get(&quot;endTime&quot;), json.getObject(&quot;endTime&quot;, Date.class));    private BiConsumer&lt;JSONObject, QueryWrapper&gt; FN2 = (json, queryWrapper) -&gt; queryWrapper.ge(keyMap.get(&quot;startTime&quot;), json.getObject(&quot;startTime&quot;, Date.class));    private void makeQuery(JSONObject jsonObject, QueryWrapper queryWrapper) &#123;          // 先将  startTime 和 endTime 进行处理          if (jsonObject.containsKey(&quot;endTime&quot;)) FN1.accept(jsonObject, queryWrapper);        if (jsonObject.containsKey(&quot;startTime&quot;)) FN2.accept(jsonObject, queryWrapper);        jsonObject.keySet().stream()                      // 过滤掉已处理                .filter(d -&gt; d != &quot;endTime&quot; &amp;&amp; d != &quot;startTime&quot;)                      // 过滤掉错误数据                .filter(e-&gt; jsonObject.getObject(e, Object.class) != null &amp;&amp; !jsonObject.getString(e).isEmpty())                      // 未处理的组织 queryWrapper                .forEach(e -&gt; queryWrapper.eq(keyMap.get(e), jsonObject.getObject(e, String.class)));    &#125;    /**     * jsonObject.key -&gt; table.key     */    private static final Map&lt;String, String&gt; keyMap = new HashMap&lt;String, String&gt;()&#123;        &#123;            put(&quot;startTime&quot;, &quot;add_time&quot;);            put(&quot;endTime&quot;, &quot;add_time&quot;);            put(&quot;doctor&quot;, &quot;doctor&quot;);            put(&quot;subType&quot;, &quot;sub_type&quot;);            put(&quot;status&quot;, &quot;status&quot;);            put(&quot;backStatus&quot;, &quot;back_status&quot;);        &#125;    &#125;;&#125;</code></pre><blockquote><p><strong>缺点</strong>： 只将前两个 case 转换成函数式方法，默认处理方法未处理，导致内容不够整洁。</p></blockquote><h2 id="再次优化"><a href="#再次优化" class="headerlink" title="再次优化"></a>再次优化</h2><pre><code class="lang-java">    /**     * 组织查询条件     */    private final Consumer3&lt;JSONObject, QueryWrapper&lt;RequestLog&gt;, String&gt; FN1 = (json, queryWrapper, key) -&gt; queryWrapper.le(keyMap.get(key), json.getObject(key, Date.class));    private final Consumer3&lt;JSONObject, QueryWrapper&lt;RequestLog&gt;, String&gt; FN2 = (json, queryWrapper, key) -&gt; queryWrapper.ge(keyMap.get(key), json.getObject(key, Date.class));    private final Consumer3&lt;JSONObject, QueryWrapper&lt;RequestLog&gt;, String&gt; FN3 = (json, queryWrapper, key) -&gt; queryWrapper.eq(keyMap.get(key), json.getString(key));        // 使用表驱动的方式    private final  HashMap&lt;String, Consumer3&lt;JSONObject, QueryWrapper&lt;RequestLog&gt;, String&gt;&gt;        funcMap = new HashMap&lt;String, Consumer3&lt;JSONObject, QueryWrapper&lt;RequestLog&gt;, String&gt;&gt;()&#123;        &#123;            put(&quot;endTime&quot;, FN1);            put(&quot;startTime&quot;, FN2);            put(&quot;other&quot;, FN3);        &#125;    &#125;;    private void makeQuery(JSONObject jsonObject, QueryWrapper&lt;RequestLog&gt; queryWrapper) &#123;        jsonObject.keySet().stream()                      // 筛选出符合条件的数据                .filter(e -&gt; jsonObject.getObject(e, Object.class) != null &amp;&amp; !jsonObject.getString(e).isEmpty())                      //                .forEach(e -&gt;&#123;                    if(funcMap.containsKey(e)) funcMap.get(e).accept(jsonObject, queryWrapper,e);                    else funcMap.get(&quot;other&quot;).accept(jsonObject, queryWrapper,e);                &#125;);    &#125;</code></pre><blockquote><p><strong>总结</strong>:  采用表驱动的方式，将不同的查询条件，<code>分发</code>到不同的函数式方法中，完成条件的拼接。</p><p>在 makeQuery 方法中 遍历一次就可完成 条件的拼接。时间复杂度为 $O(n)$</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> Java </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习清单</title>
      <link href="//0.html"/>
      <url>//0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="学习清单"><a href="#学习清单" class="headerlink" title="学习清单"></a>学习清单</h2><ul><li><p>[ ] 算法 - bilibili</p><ul><li>[ ] 排序</li><li>[ ] 动态规划</li><li>[ ] 贪心算法</li><li>[ ] LeetCode </li></ul><blockquote><p> <strong>数组 -&gt;字符串 -&gt;链表-&gt;二分查找-&gt;排序-&gt;哈希表-&gt; 栈-&gt;队列 -&gt;树 、递归、回溯 -&gt; 堆</strong></p></blockquote></li><li><p>[ ] Java</p><ul><li><p>[ ] SpringCloud</p></li><li><p>[ ] SpringBoot</p></li><li><p>[ ] Redis</p></li><li><p>[ ] Maven</p></li><li><p>[ ] Grandle?</p></li><li><p>[ ] 消息队列</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甩掉循环</title>
      <link href="//ed2447d1.html"/>
      <url>//ed2447d1.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>lambda 在集合中的 Stream 操作</p></blockquote><h3 id="Stream-操作"><a href="#Stream-操作" class="headerlink" title="Stream 操作"></a>Stream 操作</h3><blockquote><p>Stream 操作分为 <code>中间操作</code>和 <code>最终操作</code>两种</p><p>中间操作 返回的依然是 stream 对象<br>最终操作 返回特定 的 计算结果</p></blockquote><h4 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h4><blockquote><p>包括但不局限于: map、 filter、 distinct、 sorted、 peek、 limit、 skip、 parallel、 unordered</p><ul><li>map       : 一一映射 , A -&gt; B</li><li>filter    : 过滤操作 , A(n) -&gt; A(n - x)</li><li>distinct  : 选取不同元素<sup><a href="#fn_4" id="reffn_4">4</a></sup>, A{a, b, c, a} -&gt; A{a, b, c}<br><code>在有序流的情况下，不同元素的选择是稳定的。但是，在无序流的情况下，不同元素的选择不一定是稳定的，并且可以更改</code></li><li>sorted    : 排序<sup><a href="#fn_1" id="reffn_1">1</a></sup></li><li>peek      : 该方法主要用于支持调试，您希望在流程中流过某个特定点时查看元素</li><li>limit     : 返回 不超过 n 长度的数据 [ limit(long n)]</li><li>skip      : 丢弃前 n 个数据 [skip(long n)]</li></ul></blockquote><h4 id="最终操作"><a href="#最终操作" class="headerlink" title="最终操作"></a>最终操作</h4><blockquote><p>包括但不局限于：forEach、 toArray、 min、 max、 count、 anyMatch、 allMatch、 noneMatch、 findFirst、 findAny、 iterator等</p><ul><li>forEach   :  遍历</li><li>toArray   :  转换成列表</li><li>min   : 最小</li><li>max: 最大</li></ul></blockquote><ul><li><p>count:数量</p></li><li><p>anyMatch: 条件判断 相当于 <code>||</code>  返回 boolean</p></li><li><p>allMatch: 条件判断 相当于 <code>&amp;&amp;</code> 返回 boolean</p></li><li><p>noneMatch: 条件判断 相当于 <code>!</code> 返回 boolean</p><ul><li>例如: <code>Arrays.asList(1, 3, 2, 3).stream().anyMatch(e -&gt; e==1)</code></li></ul></li><li><p>findFirst: 查找第一个元素</p><ul><li>例如: <code>Optional&lt;Integer&gt; first = integers.stream().findFirst();</code></li><li>first.get() 获取元素</li><li><code>Optional&lt;T&gt; findFirst()</code></li></ul></li><li><p>findAny: 查找一个元素 相对 findFirst 具有不稳定性</p><ul><li><code>Optional&lt;T&gt; findAny()</code></li></ul></li><li><p>iterator : 迭代器</p><ul><li><code>static &lt;T&gt; Stream&lt;T&gt; iterate(T seed,Predicate&lt;? super T&gt; hasNext,UnaryOperator&lt;T&gt; next)</code></li><li><code>static &lt;T&gt; Stream&lt;T&gt; iterate(T seed,  UnaryOperator&lt;T&gt; f)</code></li></ul></li><li><p>groupingBy <sup><a href="#fn_2" id="reffn_2">2</a></sup> : 分组</p><p>  ​    </p></li></ul><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><blockquote id="fn_1"><sup>1</sup>. <a href="https://www.baeldung.com/java-8-sort-lambda">sorted</a><a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2 "><sup>2 </sup>. <a href="https://www.cnblogs.com/mr-wuxiansheng/p/7911626.html">groupingBy</a><a href="#reffn_2 " title="Jump back to footnote [2 ] in the text."> &#8617;</a></blockquote>]]></content>
      
      
      <categories>
          
          <category> Lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 入门</title>
      <link href="//fa8faa2e.html"/>
      <url>//fa8faa2e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker入门菜鸟教程"><a href="#Docker入门菜鸟教程" class="headerlink" title="Docker入门菜鸟教程"></a>Docker入门<sup><a href="#fn_菜鸟教程" id="reffn_菜鸟教程">菜鸟教程</a></sup></h1><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><h3 id="镜像-Image"><a href="#镜像-Image" class="headerlink" title="镜像(Image)"></a>镜像(<strong>Image</strong>)</h3><blockquote><p>Docker 镜像（Image），就相当于是一个 root 文件系统。</p></blockquote><h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(<strong>Container</strong>)</h3><blockquote><p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</p></blockquote><h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库(Repository)"></a>仓库(<strong>Repository</strong>)</h3><blockquote><p>仓库可看成一个代码控制中心，用来保存镜像。</p></blockquote><h2 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h2><blockquote><ol><li><p>官方 ： <a href="https://hub.docker.com">https://hub.docker.com</a></p></li><li><p>国内：</p><p>Https://c.163.com/hub</p><p><a href="http://hub.daocloud.io/">http://hub.daocloud.io/</a></p></li><li><p>公司内部</p><ol><li>添加配置 /etc/docker/daemon.json</li><li>重启服务 <code>systemctl daemon-reload, systemctl restart docker</code></li></ol></li></ol></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装相应的依赖"><a href="#安装相应的依赖" class="headerlink" title="安装相应的依赖"></a>安装相应的依赖</h3><pre><code class="lang-sh">sudo apt-get install \    apt-transport-https \    ca-certificates \    curl \    gnupg2 \    software-properties-common</code></pre><h3 id="添加密钥"><a href="#添加密钥" class="headerlink" title="添加密钥"></a>添加密钥</h3><pre><code class="lang-sh">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><pre><code class="lang-sh">sudo apt-key fingerprint 0EBFCD88</code></pre><h3 id="修改稳定版仓库"><a href="#修改稳定版仓库" class="headerlink" title="修改稳定版仓库"></a>修改稳定版仓库</h3><pre><code class="lang-sh">sudo add-apt-repository \   &quot;deb [arch=amd64] https://download.docker.com/linux/debian \  $(lsb_release -cs) \  stable&quot;</code></pre><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><pre><code class="lang-sh">$ sudo apt-get update$ sudo apt-get install docker-ce docker-ce-cli containerd.io# 查看不同的版本信息$ apt-cache madison docker-ce# 安装 前后 version 相互对应$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io# 如下$ sudo apt-get install docker-ce=5:18.09.0\~3-0\~debian-stretch docker-ce-cli=5:18.09.0\~3-0\~debian-stretch containerd.io</code></pre><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><ul><li><p>拉取 ubuntu 镜像 : <code>docker pull ubuntu[:latest]</code><br>docker pull daocloud.io/library/tomcat:8.5.15-jre8</p></li><li><p>查看镜像：<code>docker images</code></p></li><li><p>删除镜像：<code>docker rmi &lt;image id&gt;</code></p></li></ul><h3 id="镜像导入-导出"><a href="#镜像导入-导出" class="headerlink" title="镜像导入/导出"></a>镜像导入/导出</h3><ul><li><p>导出</p><p>docker save -o <file> <id></p></li><li><p>导入</p><p>docker load -i <file></p></li><li><p>修改镜像ID</p><p>docker tag <image id> name:version</p><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3></li><li><p>运行容器: <code>docker run ubuntu -it /bin/bash</code> </p></li></ul><p><strong>常用参数 ：</strong></p><p>-d: 后台运行</p><p>-p : 映射当前 Linux 的端口和容器端口。-p linux: 容器</p><p>—name : 制定容器的名字</p><p>-v :指定数据卷的路径: -v  &lt;路径｜数据卷name&gt;:<innerfile> <imageId></p><ul><li><p>查看运行的容器：<code>docker ps [-aq]</code> q只查看标示</p></li><li><p>查看运行的容器: <code>docker logs -f</code> 滚动查看</p></li><li><p>Docker logs —tail 10 最新10条</p></li><li><p>进入容器：<code>docker exec -it bash</code></p></li><li><p>停止运行容器：<code>docker stop &lt;id|name&gt;</code></p></li><li><p>查看容器：<code>docker container ls -a</code></p></li><li><p>启动容器：<code>docker run｜start &lt;id|name&gt;</code></p></li><li><p>删除容器(先停止): <code>docker rm &lt;id|name&gt;</code></p><p>docker rm $(docker ps -qa) //删除所有容器</p></li><li><p>文件复制： 宿主机 <code>docker cp file id:innerfile</code></p></li></ul><hr><blockquote><p>Mvn clean package -DskipTests 打包</p></blockquote><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>宿主机的目录映射到容器</p><ul><li><p>创建数据卷</p><p><code>docker volume create &lt;name&gt;</code></p></li><li><p>默认存放的目录 /var/lib/docker/volmne/<name>/_data</p></li><li><p>查看详细信息</p><p>docker volume inspect <name></p><p>docker volume ls</p></li><li><p>删除数据卷</p><p>docker volume rm <name></p></li><li><p>-v :指定数据卷的路径: -v  &lt;路径｜数据卷name&gt;:<innerfile> <imageId></p><blockquote><p>指定路径不能够自带 inner 文件中的内容，需要自己创建</p><p>指定数据卷名：会将 inner 中的文件内容 “映射”到数据卷中的 _data文件中</p></blockquote></li></ul><h4 id="docker-命令权限问题"><a href="#docker-命令权限问题" class="headerlink" title="docker 命令权限问题"></a>docker 命令权限问题</h4><pre><code class="lang-shell"># 创建docker用户组sudo groupadd docker# 将用户添加到 docker 组中sudo gpasswd -a $USER docker# 切换当前会话到新 group 或者重启 X 会话newgrp docker</code></pre><h2 id="自定义镜像"><a href="#自定义镜像" class="headerlink" title="自定义镜像"></a>自定义镜像</h2><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20200816171434986.png" alt="image-20200816171434986"></p><h2 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker-Compose"></a>Docker-Compose</h2><blockquote><p>批量管理容器</p><p>通过Docker-Compose.yml文件管理</p></blockquote><h3 id="下载-Docker-Compose"><a href="#下载-Docker-Compose" class="headerlink" title="下载 Docker-Compose"></a>下载 Docker-Compose</h3><ol><li>github 下载</li><li>修改文件名，权限设置为可执行</li><li>配置环境变量</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><blockquote><p>yml 文件  key: value 空格</p><p>不能使用【Tab】键</p></blockquote><pre><code class="lang-yml">version: &#39;3.1&#39;servie:  mysql:     restart: always # docker 启动 容器跟着启动    image: daocloud.io/library/mysql # 制定镜像的路径    container_name: mysql # 制定容器名称    ports:       - 3306: 3306      # - 3308: 122 多个映射    environment:      MYSQL_ROOT_PASSWORD: root      TZ: Asia/Shanghai    volumes:       - /opt/docker/mysql/data: /var/lib/mysql #映射数据卷  tomcat:     resatart: always    images: daocloud.io/library/tomcat    container_name: tomcat    ports:      - 8080: 8080    environment:      TZ: Asia/Shanghai    volumes:      - /opt/docker_tomcat/tomcat_webapps: /usr/local/tomcat/webapps      - /opt/docker_tomcat/logs/: /usr.local/tomcat/logs</code></pre><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><blockquote><p>运行 docker-compase 会找当前目录 的 yml 文件</p></blockquote><ul><li>启动容器 <code>docker-compase up -d</code></li><li>关闭 <code>docker-compose down</code></li><li>启动已存在的容器：<code>docker-compose start｜stop ｜restart</code></li><li>查看 <code>docker-compose ps</code></li></ul><h3 id="Docker-compose-管理-Dockerfile文件"><a href="#Docker-compose-管理-Dockerfile文件" class="headerlink" title="Docker-compose 管理 Dockerfile文件"></a>Docker-compose 管理 Dockerfile文件</h3><p><a href="">yml文件</a></p><pre><code class="lang-yml">version: &#39;3.1&#39;servie:  ssm:     restart: always # docker 启动 容器跟着启动    build:      context: ../ # dockerfile 目录      dockerfile: Dockerfile # dockerfile 文件    image: ssm:1.0.1 # 制定镜像的路径    container_name: ssm # 制定容器名称    ports:       - 8081: 8080    environment:      TZ: Asia/Shanghai</code></pre><p><a href="">dockerfile</a></p><pre><code>from daocloud.io/library/tomcatcopy ssm.war /usr/local/tomcat/webapp</code></pre><blockquote><p>没有自定义镜像，docker compose 会创建镜像，如果有镜像，会直接使用</p><p> 如果想重新构建：docker-compose build ｜ docker-compose up —build</p></blockquote><h2 id="color-red-CI-CD"><a href="#color-red-CI-CD" class="headerlink" title="$\color{red}{ CI CD}$"></a>$\color{red}{ CI CD}$</h2><p>。。。</p><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><a href="https://www.lixian.fun/3812.html">笔记连接</a></p>]]></content>
      
      
      <categories>
          
          <category> Utils </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda入门</title>
      <link href="//1ba1fa2d.html"/>
      <url>//1ba1fa2d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h2><pre><code class="lang-java">@Documented@Retention(RetentionPolicy.RUNTIME)@Target(ElementType.TYPE)public @interface FunctionalInterface &#123;&#125;</code></pre><blockquote><p>函数式接口: 注解用于接口，只允许有一个抽象函数</p><ul><li>java.lang.Runnable,</li><li>java.awt.event.ActionListener,</li><li>java.util.Comparator,</li><li>java.util.concurrent.Callable</li><li>java.util.function包下的接口，如Consumer、Predicate、Supplier等</li></ul></blockquote><h2 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h2><p><strong>基本语法：</strong></p><p><strong>(parameters) -&gt; expression</strong> 或 <strong>(parameters) -&gt;{ statements; }</strong></p><p>当 statements 只包含一句语句时可以省略 <code>&#123; &#125;</code></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ol><li>编写函数式接口</li></ol><pre><code class="lang-java">@FunctionalInterfaceinterface MyInterface2&#123;    public abstract int method(int x,int y);&#125;</code></pre><ol><li>将接口作为函数参数</li></ol><pre><code class="lang-java">private static void test2(MyInterface2 myInterface2,int x,int y)&#123;    myInterface2.method(x,y);&#125;</code></pre><ol><li>调用方法，使用lambda 表达式</li></ol><pre><code class="lang-java">test2((x,y)-&gt;&#123;            int sum = x + y;            return sum;&#125;,2,3);</code></pre><ul><li>可以转换为</li></ul><pre><code class="lang-java">test2((x,y)-&gt;x + y,2,3);</code></pre><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="完整格式"><a href="#完整格式" class="headerlink" title="完整格式"></a>完整格式</h3><pre><code class="lang-java">(int x, int y )-&gt;&#123;    int sum = x + y;    return sum;&#125;</code></pre><h3 id="省略参数类型"><a href="#省略参数类型" class="headerlink" title="省略参数类型"></a>省略参数类型</h3><pre><code class="lang-java">(x, y )-&gt;&#123;    int sum = x + y;    return sum;&#125;</code></pre><h3 id="省略参数括号"><a href="#省略参数括号" class="headerlink" title="省略参数括号"></a>省略参数括号</h3><blockquote><p>当参数列表包含一个参数时可以省略 <code>()</code>,<code>参数的数据类型不许一块省略</code></p></blockquote><pre><code class="lang-java">x-&gt;&#123;    int double_nu = x * 2;    return double_nu;&#125;</code></pre><h3 id="省略大括号"><a href="#省略大括号" class="headerlink" title="省略大括号"></a>省略大括号</h3><blockquote><p>当实现方法的语句只包含一句，或直接返回值时可以省略</p></blockquote><pre><code class="lang-java">(int x, int y ) -&gt; x + y(int x) -&gt; 2 * x</code></pre><hr><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><a href="https://www.jianshu.com/p/52cdc402fb5d">@FunctionInterface</a></p><p><a href="https://blog.csdn.net/qq_37176126/article/details/81273195">JAVA8 Lambda 使用实例</a></p>]]></content>
      
      
      <categories>
          
          <category> Lambda </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lambda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript-学习总结</title>
      <link href="//20425d10.html"/>
      <url>//20425d10.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote></blockquote><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ul><li>var : 在代码块中重新定义会覆盖外部变量,可以先使用后声明,重新声明后变量值不会丢失.</li><li>let : 解决 var 作用域问题,let 在其声明的作用域内起作用.</li><li>const : 常量不可修改,声明时必须初始化,类似java常量,对于对象类型,内部信息可以变化.<strong>const</strong> 关键字在不同作用域，或不同块级作用域中是可以重新声明赋值的:</li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote><p>/表达式/[修饰符]</p><ul><li>修饰符<ul><li>i - 执行对大小写不敏感皮配</li><li>g - 全局搜索</li><li>m - 执行多行匹配</li></ul></li></ul></blockquote><pre><code class="lang-javascript">var patt = /Runnable/i;var s = &quot;Runnable&quot;;//var n = s.search(patt); // 返回匹配的位置var txt = s.replace(patt, &quot;replace_text&quot;); // 返回替换后的字符串// patt.text(s); // 返回 Bool 类型,检测是否符合 patt 表达式格式patt.exec(s); // 返回 数组存放匹配的结果</code></pre><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h4 id="创建新HTML元素节点-appendChild"><a href="#创建新HTML元素节点-appendChild" class="headerlink" title="创建新HTML元素节点 - appendChild()"></a>创建新HTML元素节点 - appendChild()</h4><pre><code class="lang-javascript">let element = document.createElement(&quot;p&quot;);let node = document.createTextNode(&quot;内容&quot;);element.appendChild(node);</code></pre><h4 id="创建新HTML-元素-insertBefore"><a href="#创建新HTML-元素-insertBefore" class="headerlink" title="创建新HTML 元素 - insertBefore()"></a>创建新HTML 元素 - insertBefore()</h4><pre><code class="lang-javascript">//在 element 元素内的 ele2 之前插入 ele1element.insertBefore(ele1, ele2);</code></pre><pre><code class="lang-javascript">let element = document.getElementById(&quot;div1&quot;);let ele1 = document.createElement(&quot;p&quot;);let ele2 = document.getElementById(&quot;div1-p1&quot;);element.insertBefore(ele1, ele2);</code></pre><h4 id="移除元素-removeChild"><a href="#移除元素-removeChild" class="headerlink" title="移除元素 - removeChild()"></a>移除元素 - removeChild()</h4><pre><code class="lang-javascript">let element = document.getElementById(&quot;div1&quot;);element.removeChild( document.getElementById(&quot;div1-p1&quot;) );</code></pre><h4 id="替换元素-replaceChild"><a href="#替换元素-replaceChild" class="headerlink" title="替换元素 -  replaceChild()"></a>替换元素 -  replaceChild()</h4><pre><code class="lang-javascript">let element = document.getElementById(&quot;div1&quot;);let newEle = document.createElement(&quot;p&quot;).appendChild(document.creatTextNode(&quot;新元素&quot;));let oldEle = document.getElementById(&quot;div1-p1&quot;);element.replaceChild(newEle, oldEle);</code></pre><h3 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h3><p>getElementsByTagName()</p><pre><code class="lang-javascript">let elements = document.getElementsByTagName(&quot;p&quot;);for(let i = 0; i&lt;elements.length; i++)&#123;    elements[i].style.color = &quot;red&quot;;&#125;</code></pre><blockquote><p>HTMLCollection 类似数组而<code>不是数组</code></p></blockquote><h3 id="NodeLiet-对象"><a href="#NodeLiet-对象" class="headerlink" title="NodeLiet 对象"></a>NodeLiet 对象</h3><pre><code class="lang-javascript">let elements = document.querySelectorAll(&quot;p&quot;);for(let i = 0; i&lt;elements.length; i++)&#123;    elements[i].style.backgroundColor = &quot;red&quot;;&#125;</code></pre><h5 id="区别"><a href="#区别" class="headerlink" title="区别:"></a>区别:</h5><p>HTMLCollection 可以通过 id , name 或 索引来获取</p><p>NodeList 只能通过 索引 获取, 只有 NodeList 对象有包含属性节点和文本节点。</p><h2 id="JavaScript对象"><a href="#JavaScript对象" class="headerlink" title="JavaScript对象"></a>JavaScript对象</h2><blockquote><p>函数也可以是对象</p></blockquote><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><ul><li>使用<code>Object</code>定义并创建对象</li><li>使用<code>函数</code>来定义对象,然后创建新的对象实例</li></ul><pre><code class="lang-javascript">let obj = new Object();obj.firstName = &quot;Kaw&quot;;obj.lastName = &quot;Yang&quot;;obj.age = 21;// obj = &#123; firstName:&quot;Kaw&quot;, lastName:&quot;Yang&quot;, age:21&#125;// 使用对象构造器function Person (firstName , lastName , age)&#123;    this.firstName = firstName;    this.lastName = lastName;    this.age = age;    function ChangeName(firstName)&#123;        this.firstName = firstName;    &#125;&#125;let person = new Person(&quot;&quot;, &quot;&quot;, 2);</code></pre><blockquote><p>JavaScript 是面向对象的, 但是不使用类</p><p>JavaScript 基于 ==prototype(原型)== ，而不是基于类的。</p></blockquote><h4 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h4><pre><code class="lang-javascript">let person = &#123; firstName:&quot;Kaw&quot;, lastName:&quot;Yang&quot;, age:21&#125;;for(let x in person)&#123;    alert(x +&quot;==&gt;&quot; + person[x]);&#125;</code></pre><h3 id="原型prototype对象"><a href="#原型prototype对象" class="headerlink" title="原型prototype对象"></a>原型prototype对象</h3><blockquote><p>所有对象都是通过原型对象继承来的</p></blockquote><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>通过原型对象,可以对一个已经存在的对象 de 构造器 添加属性.</p><pre><code class="lang-javascript">function Person (firstName , lastName , age)&#123;    this.firstName = firstName;    this.lastName = lastName;    this.age = age;    function ChangeName(firstName)&#123;        this.firstName = firstName;    &#125;&#125;Person.prototype.nationality = &quot;China&quot;;let person = new Person(&quot;Kaw&quot;, &quot;Yang&quot;, 21);for(let x in person)&#123;    alert(x +&quot;==&gt;&quot; + person[x]);&#125;</code></pre><h3 id="数字对象-Number"><a href="#数字对象-Number" class="headerlink" title="数字对象 - Number"></a>数字对象 - Number</h3><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><pre><code class="lang-javascript">var a=123;b=a.toFixed(2); // b=&quot;123.00&quot;var a=123;b=a.toPrecision(2); // b=&quot;1.2e+2&quot;</code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="匹配-match"><a href="#匹配-match" class="headerlink" title="匹配 - match"></a>匹配 - match</h4><h4 id="替换-replace"><a href="#替换-replace" class="headerlink" title="替换 - replace"></a>替换 - replace</h4><h4 id="转换-toUpperCase-toLowerCase"><a href="#转换-toUpperCase-toLowerCase" class="headerlink" title="转换 - toUpperCase/ toLowerCase"></a>转换 - toUpperCase/ toLowerCase</h4><h4 id="数组-split"><a href="#数组-split" class="headerlink" title="数组 - split"></a>数组 - split</h4><h4 id="转义"><a href="#转义" class="headerlink" title="转义 - \"></a>转义 - \</h4><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><pre><code class="lang-javascript">let d = new Date();d.getFullYear();d.getTime(); // 时间戳1970 年 1 月 1 日 至今d.toUTCString(); // 将当日的日期（根据 UTC）转换为字符串。d.getDay();  // 返回数字 0 为周天d.getMonth)(); // 从 0 开始</code></pre><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><pre><code class="lang-javascript">new Date();new Date(value);new Date(dateString);new Date(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]);</code></pre><h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><pre><code class="lang-javascript">d.setFullYear(2020, 01, 01);d.setDate( d.getDate() + 5); // 5 天后</code></pre><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><pre><code class="lang-javascript">var x=new Date();x.setFullYear(2100,0,14);var today = new Date();if (x&gt;today)&#123;    alert(&quot;今天是2100年1月14日之前&quot;);&#125;else&#123;    alert(&quot;今天是2100年1月14日之后&quot;);&#125;</code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>数组中可以有不同的对象</p><p>属性: length , 方法:  indexOf(value);</p><p>使用原型机制添加方法:</p><p>​    Array.prototype.myFun = function(){}</p></blockquote><h4 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h4><pre><code class="lang-javascript">// 1.let array = new Array();array[0] =&quot;&quot;;array[1] = &quot;&quot;;// 2.let array = new Array(&quot;&quot;, &quot;&quot;, ..);// 3. let array = [ &quot;&quot;, &quot;&quot;, ..];</code></pre><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li><p>concat(array, ..) // 合并</p></li><li><p>join() // 组成字符串 <code>,</code>分割 </p></li><li><p>pop() //删除最后一个</p></li><li><p>push(); //添加到最后</p></li><li><p>将一个数组中的元素的顺序反转排序 - reverse()</p></li><li><p>删除数组的第一个元素 - shift()</p></li><li><p>从一个数组中选择元素 - slice()</p></li><li>数组排序（按字母顺序升序）- sort()</li><li>数字排序（按数字顺序升序）- sort()</li><li>数字排序（按数字顺序降序）- sort(function(a, b){return b-a} )</li><li>在数组的第2位置添加一个元素 - splice()</li><li>转换数组到字符串 -toString()</li><li>在数组的开头添加新元素 - unshift()</li></ul><h3 id="Math"><a href="#Math" class="headerlink" title="Math()"></a>Math()</h3><h4 id="round-四舍五入-floor-向下取"><a href="#round-四舍五入-floor-向下取" class="headerlink" title="round() - 四舍五入 floor 向下取"></a>round() - 四舍五入 floor 向下取</h4><h4 id="random-随机-0-1"><a href="#random-随机-0-1" class="headerlink" title="random() - 随机(0,1)"></a>random() - 随机(0,1)</h4><h4 id="max-a-b-a-b-最大"><a href="#max-a-b-a-b-最大" class="headerlink" title="max(a,b) - a,b 最大"></a>max(a,b) - a,b 最大</h4><h4 id="min-a-b-a-b最小"><a href="#min-a-b-a-b最小" class="headerlink" title="min(a,b) -a,b最小"></a>min(a,b) -a,b最小</h4><h4 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h4><ul><li>sqrt() // 开方</li><li>PI // 𝞹</li><li>Math.floor(Math.random() * 11) // 0 -11 </li></ul><h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><blockquote><p>RegExp：是正则表达式（regular expression）的简写。</p></blockquote><pre><code class="lang-javascript">let patt = new RegExp(&quot;\\w+&quot;, &quot;ig&quot;);let patt = /w+/ig</code></pre><div class="table-container"><table><thead><tr><th>方法</th><th>使用</th><th>返回值</th></tr></thead><tbody><tr><td>match</td><td>str.match(patt)</td><td><strong><em>[“RUnoob”, index: 6, input: “Visit RUnoob”, groups: undefined]</em></strong>   0: “RUnoob” groups: undefined index: 6 input: “Visit RUnoob” length: 1 <strong>proto</strong>: Array(0)</td></tr><tr><td>test</td><td>str.test(patt)</td><td>Boolean</td></tr><tr><td>exec</td><td>patt.exec(str)</td><td><strong>[“e”, index: 2, input: “The best things in life are free”, groups: undefined]</strong> 0: “e”groups: undefinedindex: 2input: “The best things in life are free”length: 1 <strong>proto</strong>: Array(0)</td></tr><tr><td></td><td></td></tr></tbody></table></div><h2 id="浏览器BOM-Browser-Object-Model"><a href="#浏览器BOM-Browser-Object-Model" class="headerlink" title="浏览器BOM - Browser Object Model"></a>浏览器BOM - Browser Object Model</h2><h4 id="window-对象"><a href="#window-对象" class="headerlink" title="window 对象"></a>window 对象</h4><blockquote><p>DOM 自动成为 window 对象的成员</p></blockquote><h4 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h4><ul><li>window.innerWidth</li><li>window.innerHeigh</li><li>window.open()</li><li>window.moveTo()</li><li>window.close()</li><li>window.resizeTo()</li></ul><h4 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h4><p>/…</p><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><ul><li>location.href</li><li>location.pathname</li><li>location.assign(href) // 重新加载</li></ul><h4 id="History"><a href="#History" class="headerlink" title="History"></a>History</h4><blockquote><ol><li><p><em>History {length: 7, scrollRestoration: “auto”, state: null}</em></p></li><li><ol><li>length: 7</li><li>scrollRestoration: “auto”</li><li>state: null</li><li><strong>proto</strong>: History</li></ol></li></ol></blockquote><ul><li><p>history.back() - 上一页</p></li><li><p>history.forward() - 下一页</p></li></ul><h4 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h4><blockquote><p>访问者浏览器信息</p></blockquote><h4 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h4><blockquote><p>window 下的方法</p></blockquote><h5 id="警告弹窗-alert"><a href="#警告弹窗-alert" class="headerlink" title="警告弹窗 - alert"></a>警告弹窗 - alert</h5><ul><li>显示警告信息 \n 换行</li></ul><h5 id="确认弹窗-confirm"><a href="#确认弹窗-confirm" class="headerlink" title="确认弹窗 - confirm"></a>确认弹窗 - confirm</h5><ul><li>返回 Boolean 类型</li></ul><h5 id="提示弹窗-prompt"><a href="#提示弹窗-prompt" class="headerlink" title="提示弹窗 - prompt"></a>提示弹窗 - prompt</h5><ul><li>参数 : tag1 -&gt; 提示信息 , tag2 -&gt; 默认输入框内容</li><li>返回值: 输入的内容</li></ul><h4 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h4><ul><li>let i = setInterval(function, time) <ul><li>clearInterval(i)  - 停止</li></ul></li><li>let t = setTimeout(funcation, time)<ul><li>clearTimeout(t) - 停止</li></ul></li></ul><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><blockquote><p>cookie 是一些数据,存储在客户端的文本文件.</p><p>当服务器向客户端发送页面技术后不会记录客户端的信息</p><p>cookie 用于存储客户端信息.</p></blockquote><ul><li><p>创建cookie</p><p>document.cookie = “username =<strong>yang</strong>;key=value”</p></li><li><p>读取 cookie</p><p>let cook = document.cookie;</p></li><li><p>修改 cookie</p><p>document.cookie = “username= <strong>changeName</strong>;key=value”</p></li><li><p>删除 cookie</p><p>document.cookie = “username=; key=value”</p></li></ul><pre><code class="lang-javascript">/// 实现的功能: 如果 有 name 的 cookie 显示, 没有就设置 cookiefunction showCookie() &#123;    // 1. 获取 cookie    let cookies = document.cookie;    // 2. 裁剪 cookie    let cookieList = cookies.split(&quot;;&quot;);    // 3. 查找 name cookie 的值    for (let i =0; i&lt; cookieList.length; i++)&#123;        // 删除 前后 空格        let name_cookie = cookieList[i].trim();        // 查找到name 的cookie        if(name_cookie.indexOf(&quot;name&quot;) === 0)&#123;            // 裁剪出 cookie 的值            let name = name_cookie.substr(&quot;name=&quot;.length, name_cookie.length);            // 没有设置 cookie , 跳出循环, 设置 cookie            if(name.length === 0)&#123;                break;            &#125;else&#123;                // cookie 有值, 返回结束                alert(&quot;欢迎回来 &quot; + name);                return;                &#125;        &#125;    &#125;    let name = prompt(&quot;请输入用户名：&quot;);    document.cookie = &quot;name=&quot; + name + &quot;;&quot;&#125;//// setCookie(key, value, tiem)  ==&gt; 设置cookie //// getCookie(key) ==&gt; 获取 cookie//// checkCookie() ==&gt; 检查cookie 业务</code></pre><hr><h2 id="类库"><a href="#类库" class="headerlink" title="类库"></a>类库</h2><h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><ul><li>是目前最受欢迎的框架</li><li>使用CSS选择器的方式进行操作</li><li>同时提供了用户界面和插件</li><li></li></ul><h3 id="MooTools-动画特效"><a href="#MooTools-动画特效" class="headerlink" title="MooTools - 动画特效"></a>MooTools - 动画特效</h3><h2 id="Prototype-Web任务API"><a href="#Prototype-Web任务API" class="headerlink" title="Prototype - Web任务API"></a>Prototype - Web任务API</h2>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="//2f57a694.html"/>
      <url>//2f57a694.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="http://tool.oschina.net">工具网站</a></p><p><a href="https://tool.oschina.net/regex">正则表达式</a></p><h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><pre><code class="lang-python">import recontent = &#39;Hello 123 4567 World_This is a Regex Demo&#39;print(len(content))# Hello开头 \s 所有空字符 \d 数字 \s \d&#123;4&#125; 四个数字 \w 字母数字及下划线 .代替任意字符 * 一个或者多个 Demo结尾result = re.match(&quot;^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;.*Demo$&quot;,content)print(result)print(result.group())print(result.span())</code></pre><pre><code class="lang-shell">41&lt;re.Match object; span=(0, 41), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt;Hello 123 4567 World_This is a Regex Demo(0, 41)</code></pre><h2 id="泛匹配"><a href="#泛匹配" class="headerlink" title="泛匹配"></a>泛匹配</h2><pre><code class="lang-python">import recontent = &#39;Hello 123 4567 World_This is a Regex Demo&#39;print(len(content))# Hello开头 \s 所有空字符 \d 数字 \s \d&#123;4&#125; 四个数字 \w 字母数字及下划线 .代替任意字符 * 一个或者多个 Demo结尾result = re.match(&quot;^Hello.*Demo$&quot;,content)print(result)print(result.group())print(result.span())</code></pre><pre><code class="lang-shell">41&lt;re.Match object; span=(0, 41), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt;Hello 123 4567 World_This is a Regex Demo(0, 41)</code></pre><h2 id="匹配目标"><a href="#匹配目标" class="headerlink" title="匹配目标"></a>匹配目标</h2><pre><code class="lang-python">import recontent = &#39;Hello 123 4567 World_This is a Regex Demo&#39;result = re.match(&#39;^Hello\s(\d+\s\d+)\sWorld.*Demo$&#39;,content)print(result)print(result.group(0))print(result.group(1))print(result.span())</code></pre><pre><code class="lang-shell">&lt;re.Match object; span=(0, 41), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt;Hello 123 4567 World_This is a Regex Demo123 4567(0, 41)</code></pre><h2 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h2><pre><code class="lang-python">import recontent = &#39;Hello 123 4567 World_This is a Regex Demo&#39;result = re.match(&#39;^He.*(\d+\s\d+).*Demo$&#39;,content)print(result)print(result.group(0))print(result.group(1))print(result.span())</code></pre><pre><code class="lang-shell">&lt;re.Match object; span=(0, 41), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt;Hello 123 4567 World_This is a Regex Demo3 4567(0, 41)</code></pre><h2 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h2><p>匹配尽可能少的字符 获取的结果尽可能多</p><pre><code class="lang-python">import recontent = &#39;Hello 123 4567 World_This is a Regex Demo&#39;result = re.match(&#39;^He.*?(\d+\s\d+).*Demo$&#39;,content)print(result)print(result.group(0))print(result.group(1))print(result.span())</code></pre><pre><code class="lang-shell">&lt;re.Match object; span=(0, 41), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt;Hello 123 4567 World_This is a Regex Demo123 4567(0, 41)</code></pre><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><pre><code class="lang-python">import recontent = &#39;&#39;&#39;Hello 123 4567 World_This is a Regex Demo&#39;&#39;&#39;result = re.match(&#39;^He.*?(\d+\s\d+).*?Demo$&#39;,content,re.S)# . 不能匹配换行符 添加 re.Sprint(result)print(result.group(0))print(result.group(1))print(result.span())</code></pre><pre><code class="lang-shell">&lt;re.Match object; span=(0, 42), match=&#39;Hello 123 4567 \nWorld_This is a Regex Demo&#39;&gt;Hello 123 4567 World_This is a Regex Demo123 4567(0, 42)</code></pre><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><pre><code class="lang-python">import recontent = &#39;price is $5.00&#39;r = re.match(&#39;price is \$5\.00&#39;,content)print(r)</code></pre><pre><code class="lang-shell">&lt;re.Match object; span=(0, 14), match=&#39;price is $5.00&#39;&gt;</code></pre><p>$\color{red}{尽量使用泛匹配，使用货号得到匹配目标，尽量使用非贪婪模式，有换行就用 re.S}$</p><h1 id="re-Search"><a href="#re-Search" class="headerlink" title="re.Search"></a>re.Search</h1><blockquote><p>扫描匹配</p></blockquote><pre><code class="lang-python">import recontent = &#39;XHello 123 4567 World_This is a Regex Demo&#39;print(len(content))result = re.match(&quot;Hello.*Demo$&quot;,content)print(result)</code></pre><pre><code class="lang-shell">42None</code></pre><pre><code class="lang-python">content = &#39;XHello 123 4567 World_This is a Regex Demo&#39;print(len(content))# Hello开头 \s 所有空字符 \d 数字 \s \d&#123;4&#125; 四个数字 \w 字母数字及下划线 .代替任意字符 * 一个或者多个 Demo结尾result = re.search(&quot;Hello.*Demo$&quot;,content)print(result)print(result.group())print(result.span())</code></pre><pre><code class="lang-shell">42&lt;re.Match object; span=(1, 42), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt;Hello 123 4567 World_This is a Regex Demo(1, 42)</code></pre><h2 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall"></a>re.findall</h2><h2 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile"></a>re.compile</h2><h3 id="匹配联系练习"><a href="#匹配联系练习" class="headerlink" title="匹配联系练习"></a>匹配联系练习</h3><pre><code class="lang-python">import re html = &quot;&quot;&quot;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;&quot;&quot;results = re.search(&#39;&lt;li.*active.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#39;,html,re.S)if results:    print(results.group(0)+&quot;\n------&quot;)    print(results.group(1),results.group(2))</code></pre><pre><code class="lang-shell">&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;------齐秦 往事随风</code></pre><pre><code class="lang-python">import re html = &quot;&quot;&quot;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;    &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;&quot;&quot;results = re.search(&#39;&lt;li.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#39;,html,re.S)if results:    print(results.group(0)+&quot;\n------&quot;)    print(results.group(1),results.group(2))</code></pre><pre><code class="lang-shell">&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;------任贤齐 沧海一声笑</code></pre><pre><code class="lang-python">import re html = &quot;&quot;&quot;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;    &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;&quot;&quot;results = re.search(&#39;&lt;li.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#39;,html)if results:    print(results.group(0)+&quot;\n------&quot;)    print(results.group(1),results.group(2))</code></pre><pre><code class="lang-shell">&lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;------beyond 光辉岁月</code></pre><pre><code class="lang-python">import re html = &quot;&quot;&quot;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;    &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;&quot;&quot;results = re.findall(&#39;&lt;li.*?href=&quot;(.*?)&quot;\ssinger=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#39;,html,re.S)if results:    for result in results:        print(result[0],result[1],result[2])</code></pre><pre><code class="lang-shell">/2.mp3 任贤齐 沧海一声笑/3.mp3 齐秦 往事随风/4.mp3 beyond 光辉岁月/5.mp3 陈慧琳 记事本</code></pre><pre><code class="lang-python">import re html = &quot;&quot;&quot;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt; &lt;li data一view=*5&quot;&gt;    &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;&quot;&quot;results = re.findall(&#39;&lt;li.*?&gt;\s*?(&lt;a.*?&gt;)?(\w+)(&lt;/a&gt;)?\s*?&lt;/li&gt;&#39;,html,re.S)if results:    for result in results:        print(result)</code></pre><pre><code class="lang-shell">(&#39;&#39;, &#39;一路上有你&#39;, &#39;&#39;)(&#39;&lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;&#39;, &#39;沧海一声笑&#39;, &#39;&lt;/a&gt;&#39;)(&#39;&lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;&#39;, &#39;往事随风&#39;, &#39;&lt;/a&gt;&#39;)(&#39;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;&#39;, &#39;光辉岁月&#39;, &#39;&lt;/a&gt;&#39;)(&#39;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;&#39;, &#39;记事本&#39;, &#39;&lt;/a&gt;&#39;)(&#39;&lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;&#39;, &#39;但愿人长久&#39;, &#39;&lt;/a&gt;&#39;)</code></pre><h2 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h2><blockquote><p> 替换字符串中每一个匹配的子串后返回替换后的字符串</p></blockquote><pre><code class="lang-python">import re content = &#39;Hello World!&#39;content = re.sub (&#39;o&#39;,&quot;O&quot;,content)print(content)</code></pre><pre><code class="lang-shell">HellO WOrld!</code></pre><pre><code class="lang-python">import re content = &#39;Hello World!&#39;content = re.sub (&#39;(World!)&#39;,r&#39;\1 你好!&#39;,content)print(content)</code></pre><pre><code class="lang-shell">Hello World! 你好!</code></pre><pre><code class="lang-python">import rehtml = &quot;&quot;&quot;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt; &lt;li data一view=*5&quot;&gt;    &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&quot;&quot;&quot;html = re.sub(&quot;&lt;a .*?&gt;|&lt;/a&gt;&quot;,&#39;&#39;,html)print(html)r = re.findall(&#39;&lt;li.*?&gt;(.*?)&lt;/li&gt;&#39;,html,re.S)for i in r:    print(i.strip())</code></pre><pre><code class="lang-shell">&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        沧海一声笑    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;    往事随风    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;光辉岁月&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;记事本 &lt;/li&gt; &lt;li data一view=*5&quot;&gt;    但愿人长久    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;一路上有你沧海一声笑往事随风光辉岁月记事本但愿人长久</code></pre><h1 id="re-compile-1"><a href="#re-compile-1" class="headerlink" title="re.compile"></a>re.compile</h1><blockquote><p>将正则表达式串编译成正则表达对象，方便复用</p></blockquote><pre><code class="lang-python">import recontent = &#39;Hello 123 4567 World_This is a Regex Demo&#39;print(len(content))pattern = re.compile(&quot;^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;.*Demo$&quot;,re.S)result = re.match(pattern,content)print(result)print(result.group())print(result.span())</code></pre><pre><code class="lang-shell">41&lt;re.Match object; span=(0, 41), match=&#39;Hello 123 4567 World_This is a Regex Demo&#39;&gt;Hello 123 4567 World_This is a Regex Demo(0, 41)</code></pre><h1 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h1><pre><code class="lang-python">import re import requestsheaders = &#123;    &#39;User-Agent&#39;:&#39;Mozilla/5.0(Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#39;,&#125;html = requests.get(&#39;https://book.douban.com/&#39;, headers=headers)print(html.status_code)html = html.textpattern = re.compile(&#39;&lt;li.*?cover.*?href=&quot;(.*?)&quot;\stitle=&quot;(.*?)&quot;.*?author&quot;&gt;(.*?)&lt;/div&gt;.*?year&quot;&gt;(.*?)&lt;/span&gt;.*?publisher&quot;&gt;(.*?)&lt;/span&gt;.*?&lt;/li&gt;&#39;,re.S)r = re.findall(pattern,html)number = 0for x in r:    for i in x:        print(i.strip())    print(&quot;--------------&quot;)    number += 1print(number)</code></pre><pre><code class="lang-shell">200--------------https://book.douban.com/subject/34937425/?icn=index-latestbook-subject在路上[美] 杰克·凯鲁亚克2020-3云南人民出版社--------------https://book.douban.com/subject/34873195/?icn=index-latestbook-subject小津安二郎全日记[日] 小津安二郎&amp;nbsp;/&amp;nbsp;[日] 田中真澄2020-2上海译文出版社--------------https://book.douban.com/subject/34840588/?icn=index-latestbook-subject望乡[日] 凑佳苗2020-2-1文治图书·四川文艺出版社--------------https://book.douban.com/subject/34948397/?icn=index-latestbook-subject巴黎记于坚2020-2-1江苏凤凰文艺出版社/楚尘文化--------------40</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>\w = [A-Za-z0-9_]  </p></li><li><p>汉字： [\u4E00-\u9FA5]  </p></li><li><p>[]:含有  </p></li><li><p>[^]: 不含有</p></li><li><p>[a-z]:包含小写字符</p></li></ul><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210829230649412.png" alt="image-20210829230649412"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫模拟登录</title>
      <link href="//94e157f8.html"/>
      <url>//94e157f8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="知乎"><a href="#知乎" class="headerlink" title="知乎"></a>知乎</h1><hr><h2 id="请求网页获取-xsrf"><a href="#请求网页获取-xsrf" class="headerlink" title="请求网页获取 _xsrf"></a>请求网页获取 _xsrf</h2><h2 id="发送登录请求"><a href="#发送登录请求" class="headerlink" title="发送登录请求"></a>发送登录请求</h2><h2 id="保存cookies"><a href="#保存cookies" class="headerlink" title="保存cookies"></a>保存cookies</h2><h2 id="发送请求——附带-cookies"><a href="#发送请求——附带-cookies" class="headerlink" title="发送请求——附带 cookies"></a>发送请求——附带 cookies</h2><pre><code class="lang-python">import requestsheaders = &#123;    &#39;Usr-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko)&#39;                 &#39;Chrome/80.0.3987.149 Safari/537.36&#39;&#125;print(requests.get(&quot;https://passport.csdn.net/&quot;, headers=headers).cookies)post_url = &#39;https://passport.csdn.net/v1/register/pc/login/doLogin&#39;post_data = &#123;    &#39;loginType&#39;: &quot;1&quot;,    &#39;pwdOrVerifyCode&#39;: &quot;password&quot;,    &#39;userIdentification&#39;: &quot;phonenumber&quot;,    &#39;uaToken&#39;: &quot;122#8Y2cj400EEayBJpZMEpaEJponDJE7SNEEP7rEJ+/5s8S4oQLpo7iEDpWnDEeK51HpyGZp9hBuDEEJFOPpC76EJponDJL7gNpEPXZpJRgu4Ep+FQLpoGUEJLWn4yP7SQEEyuLpECBECGJwEaHwShAom5f0W3OLq1pGzH8AWgvXAmCOjozPgSO7Fyn/L37juDZve7egrkn2aVoYNGNgCwsskVqoAT2QGmDkPQ3txOMNrCoVdowlqObKeP3c61uHOH+YBBzw2OyvTfm9iq1Vx/ZqjjiOGrBBKdnCQkNIgCcn4IZiQpiT0s3Beravw3KM7ux7hVMFp1RwM3QQdYg1XsR9IfYzS7+zI1KQX+W5dvtQ7szfy7+EiBWLnfa+xReOivlSse+fdAur6LZmiXSyfgG3eGPPML6+aK9xbuLAkc5b82tVNhD+Am7Ej0HHId1FyLYu0Gf57aAQCPb5c9jDRWWExb88oL6+3jpTjLDS0tEgRVJngL4eTMpRqtrKXXfYR5pyBvmqM3bD5pMngJrBM+2DLVr8oRfJDEERgMdt1+oEEpxkMp1ul5bDRXZ8oL6JNEEyBfDqMfbDDpanSL4ul0EDLVr8Cp6J4bEyF3mqW32E9vxnSpT8PIEDRVbeovUJDE8Z9PJzWG0QEVaVNnIGRk2GNC8NiQSjW2jUsTndqrUd1SU1Tc111Flsle5yRM8uVYCwHTiKVaGzrFZIDoOyAJJ+kO+APLxFXdCYdmX2u7jw1dk6q3mpel0VBaMwo1p4D+5BqlvwIfRlU+ILxemb9CLh2StZHEgF7sFF7rLVUgVLrx4+IRm0nuDAz3AeLpalGkGHvsm8yDg+ctLT7UZr3KY8nyAa+WEHuEzgnaPBhC4MhyCKJvG0izf93F/5dQuyC3ESM6HGiwUPuw58jZKtmz+oAbOqS8dGJ/nG1DvZC4SS++QFz4IZ1ScWEUaTOK636bzyluLP3KNWz/NggUgPGwN/kZqLtGtzDebIcnwwLHBCeC5L7SGoxa7pAGkkiJntHrhBIOfCbapRtjZPLElYxI+2aQOGFIryMB3&quot;,    &#39;webUmidToken&#39;: &quot;&quot;&#125;response = requests.post(url=post_url, data=post_url ,headers=headers)print(response)</code></pre><pre><code class="lang-html">&lt;RequestsCookieJar[]&gt;&lt;Response [400]&gt;</code></pre><blockquote><p>测试没成功过,测了几次账号就被识别为风险账号,并且维持了好久😟😟……</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Urllib库学习示例</title>
      <link href="//335fcf78.html"/>
      <url>//335fcf78.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="urllib库详解"><a href="#urllib库详解" class="headerlink" title="urllib库详解"></a>urllib库详解</h1><blockquote><p><a href="https://docs.python.org/3/library/urllib.html">Urllib</a></p><p>说明: 本文章从 jupyter-notebook 导出，代码示例后边附带执行结果</p></blockquote><h2 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen"></a>urlopen</h2><pre><code class="lang-python">import urllib.requestrespons = urllib.request.urlopen(&#39;http://www.baidu.com&#39;)print(respons.read())</code></pre><pre><code class="lang-shell">b&#39;&lt;!DOCTYPE html&gt;\n&lt;!--STATUS OK-- ....GMT&quot;;\n&#125;\n&lt;/script&gt;\n\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n\n\r\n\n\n\r\n&#39;</code></pre><pre><code class="lang-python">from urllib import request,parsedata = bytes(parse.urlencode(&#123;&#39;hello&#39;,&#39;world&#39;&#125;),encoding=&#39;utf8&#39;)Krespons = request.urlopen(&quot;http://httpbin.org/post&quot;,data=data)print(respons.read()</code></pre><pre><code class="lang-shell">TypeError: not a valid non-string sequence or mapping object</code></pre><pre><code class="lang-python">import urllib.requestimport urllib.parseresponse = urllib.request.urlopen(&#39;http://httpbin.org/get&#39;,timeout=1)print(response.read())</code></pre><pre><code class="lang-shell">b&#39;&#123;\n  &quot;args&quot;: &#123;&#125;, \n  &quot;headers&quot;: &#123;\n    &quot;Accept-Encoding&quot;: &quot;identity&quot;, \n    &quot;Host&quot;: &quot;httpbin.org&quot;, \n    &quot;User-Agent&quot;: &quot;Python-urllib/3.8&quot;, \n    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-5e685eb4-d59a135ce1fa43cca8b5ee52&quot;\n  &#125;, \n  &quot;origin&quot;: &quot;27.205.175.189&quot;, \n  &quot;url&quot;: &quot;http://httpbin.org/get&quot;\n&#125;\n&#39;</code></pre><pre><code class="lang-python">import socketimport urllib.requestimport urllib.errortry:    response = urllib.request.urlopen(&quot;http://httpbin.org/get&quot;,timeout=0.1)except urllib.error.URLError as e:    if isinstance(e.reason,socket.timeout):        print(&quot;time out&quot;)</code></pre><pre><code class="lang-shell">time out</code></pre><h1 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h1><h2 id="相应类型"><a href="#相应类型" class="headerlink" title="相应类型"></a>相应类型</h2><pre><code class="lang-python">import urllib.requestrespons = urllib.request.urlopen(&#39;http://www.baidu.com&#39;)print(type(respons))</code></pre><pre><code class="lang-shell">&lt;class &#39;http.client.HTTPResponse&#39;&gt;</code></pre><h2 id="状态码、响应头"><a href="#状态码、响应头" class="headerlink" title="状态码、响应头"></a>状态码、响应头</h2><pre><code class="lang-python">import urllib.requestresponse = urllib.request.urlopen(&quot;http://www.baidu.com&quot;)print(response.status)print(response.getheaders())print(response.getheader(&quot;Server&quot;))</code></pre><pre><code class="lang-shell">200[(&#39;Bdpagetype&#39;, &#39;1&#39;), (&#39;Bdqid&#39;, &#39;0x9d1c4a77001313ef&#39;), (&#39;Cache-Control&#39;, &#39;private&#39;), (&#39;Content-Type&#39;, &#39;text/html;charset=utf-8&#39;), (&#39;Date&#39;, &#39;Wed, 11 Mar 2020 04:10:39 GMT&#39;), (&#39;Expires&#39;, &#39;Wed, 11 Mar 2020 04:10:11 GMT&#39;), (&#39;P3p&#39;, &#39;CP=&quot; OTI DSP COR IVA OUR IND COM &quot;&#39;), (&#39;P3p&#39;, &#39;CP=&quot; OTI DSP COR IVA OUR IND COM &quot;&#39;), (&#39;Server&#39;, &#39;BWS/1.1&#39;), (&#39;Set-Cookie&#39;, &#39;BAIDUID=7480366FF79E5FF56CAC7898C7D55AF6:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com&#39;), (&#39;Set-Cookie&#39;, &#39;BIDUPSID=7480366FF79E5FF56CAC7898C7D55AF6; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com&#39;), (&#39;Set-Cookie&#39;, &#39;PSTM=1583899839; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=/; domain=.baidu.com&#39;), (&#39;Set-Cookie&#39;, &#39;BAIDUID=7480366FF79E5FF5A8DA60736A18B286:FG=1; max-age=31536000; expires=Thu, 11-Mar-21 04:10:39 GMT; domain=.baidu.com; path=/; version=1; comment=bd&#39;), (&#39;Set-Cookie&#39;, &#39;BDSVRTM=0; path=/&#39;), (&#39;Set-Cookie&#39;, &#39;BD_HOME=1; path=/&#39;), (&#39;Set-Cookie&#39;, &#39;H_PS_PSSID=30962_1448_21126_30825_30823_26350_30717; path=/; domain=.baidu.com&#39;), (&#39;Traceid&#39;, &#39;1583899839273736577011321005438265398255&#39;), (&#39;Vary&#39;, &#39;Accept-Encoding&#39;), (&#39;Vary&#39;, &#39;Accept-Encoding&#39;), (&#39;X-Ua-Compatible&#39;, &#39;IE=Edge,chrome=1&#39;), (&#39;Connection&#39;, &#39;close&#39;), (&#39;Transfer-Encoding&#39;, &#39;chunked&#39;)]BWS/1.1</code></pre><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><pre><code class="lang-python">import urllib.requestresponse = urllib.request.urlopen(&quot;http://www.baidu.com&quot;)print(response.read().decode(&#39;utf8&#39;))</code></pre><pre><code class="lang-shell">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;&lt;head&gt;        就是页面</code></pre><pre><code class="lang-python">from urllib import request,parseurl = &quot;http://www.httpbin.org/post&quot;headers = &#123;    &#39;user-agent&#39;:&#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#39;,&#125;dict = &#123;    &#39;name&#39;:&#39;Germey&#39;&#125;data = bytes(parse.urlencode(dict),encoding=&#39;utf8&#39;)# 创建Request对象req = request.Request(url=url,data=data,headers=headers,method=&#39;POST&#39;)# 添加 Header 方式req.add_header(&#39;host&#39;,&#39;httpbin.org&#39;)response = request.urlopen(req)print(response.read().decode(&#39;utf-8&#39;))</code></pre><pre><code class="lang-json">&#123;  &quot;args&quot;: &#123;&#125;,   &quot;data&quot;: &quot;&quot;,   &quot;files&quot;: &#123;&#125;,   &quot;form&quot;: &#123;    &quot;name&quot;: &quot;Germey&quot;  &#125;,   &quot;headers&quot;: &#123;    &quot;Accept-Encoding&quot;: &quot;identity&quot;,     &quot;Content-Length&quot;: &quot;11&quot;,     &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,     &quot;Host&quot;: &quot;httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-5e687f6b-f4593ed1a5edb7c20cb7a5b0&quot;  &#125;,   &quot;json&quot;: null,   &quot;origin&quot;: &quot;27.205.175.189&quot;,   &quot;url&quot;: &quot;http://httpbin.org/post&quot;&#125;</code></pre><h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><hr><blockquote><p> 辅助工具</p></blockquote><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><pre><code class="lang-python">import urllib.requestproxy_handler = urllib.request.ProxyHandler(&#123;    &#39;http&#39;:&#39;http://127.0.0.1:9743&#39;&#125;)try:    opener = urllib.request.build_opener(proxy_handler)    response = opener.open (&#39;http://httpbin.org/get&#39;)    print(response.read())except Exception as e:    print(e)</code></pre><pre><code class="lang-shell">&lt;urlopen error [Errno 61] Connection refused&gt;</code></pre><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><hr><blockquote><p>维持登录状态</p></blockquote><pre><code class="lang-python">import http.cookiejar,urllib.requestcookie = http.cookiejar.CookieJar()handler = urllib.request.HTTPCookieProcessor(cookie)opener = urllib.request.build_opener(handler)response = opener.open(&quot;http://www.baidu.com&quot;)for item in cookie:    print(item.name +&quot;=&quot;+item.value)</code></pre><pre><code class="lang-shell">BAIDUID=16DDE24800BD4A43500B34B419C6C3D6:FG=1BIDUPSID=16DDE24800BD4A43D4069E48CBA88E8DH_PS_PSSID=30962_1430_21118_30839_30824_30717PSTM=1583909187BDSVRTM=0BD_HOME=1</code></pre><pre><code class="lang-python"># 将Cookie保存到文件中import http.cookiejar,urllib.requestfilename = &quot;/Users/mac/MyCodes/python/cookie.txt&quot;cookie = http.cookiejar.MozillaCookieJar(filename)handler = urllib.request.HTTPCookieProcessor(cookie)opener = urllib.request.build_opener(handler)response = opener.open(&quot;http://www.baidu.com&quot;)cookie.save(ignore_discard=True,ignore_expires=True)</code></pre><pre><code class="lang-python"># 将Cookie保存到文件中import http.cookiejar,urllib.requestfilename = &quot;/Users/mac/MyCodes/python/cookie1.txt&quot;cookie = http.cookiejar.LWPCookieJar(filename)handler = urllib.request.HTTPCookieProcessor(cookie)opener = urllib.request.build_opener(handler)response = opener.open(&quot;http://www.baidu.com&quot;)cookie.save(ignore_discard=True,ignore_expires=True)</code></pre><pre><code class="lang-python"># 读取Cookieimport http.cookiejar,urllib.requestcookie = http.cookiejar.LWPCookieJar()# 读取Cookiecookie.load(&quot;/Users/mac/MyCodes/python/cookie1.txt&quot;,ignore_discard=True,ignore_expires=True)handler = urllib.request.HTTPCookieProcessor(cookie)opener = urllib.request.build_opener(handler)response = opener.open(&quot;http://www.baidu.com&quot;)print(response.read().decode(&#39;utf-8&#39;))</code></pre><pre><code class="lang-shell"># 测试结果内容非常多,影响阅读.所以都删了</code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><pre><code class="lang-python">from urllib import request,errortry:    response = request.urlopen(&quot;http://cuiqingcai.com/index.htm&quot;)except error.URLError as e:    print(e.reason)</code></pre><pre><code class="lang-shell">[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1108)</code></pre><pre><code class="lang-python">from urllib import request,errortry:    response = request.urlopen(&quot;http://cuiqingcai.com/index.htm&quot;)except error.HTTPError as e:    print(e.reason,e.code,e.headers,sep=&#39;\n&#39;)except error.URLError as e:    print(e.reason)else:    print(&#39;Request Successfully&#39;)</code></pre><pre><code class="lang-shell">[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1108)</code></pre><pre><code class="lang-python">import socketimport urllib.requestimport urllib.errortry:    response = request.urlopen(&quot;http://www.baidu.com&quot;,timeout=0.01)except urllib.error.URLError as e:    print(e.reason)    if isinstance(e.reason,socket.timeout):        print(&quot;TIME OUT&quot;)</code></pre><pre><code class="lang-shell">shelltimed outTIME OUT</code></pre><h2 id="URL解析"><a href="#URL解析" class="headerlink" title="URL解析"></a>URL解析</h2><h2 id="urlparse"><a href="#urlparse" class="headerlink" title="urlparse"></a>urlparse</h2><p><code>urllib.parse.urlparse(urlstring, scheme=&#39;&#39;, allow_fragments=True)</code></p><pre><code class="lang-python">from urllib.parse import urlparseresult = urlparse(&#39;http://www.baidu.com/index.html;user?id=5#comment&#39;)print(type(result),result)</code></pre><pre><code class="lang-html">&lt;class &#39;urllib.parse.ParseResult&#39;&gt; ParseResult(scheme=&#39;http&#39;, netloc=&#39;www.baidu.com&#39;, path=&#39;/index.html&#39;, params=&#39;user&#39;, query=&#39;id=5&#39;, fragment=&#39;comment&#39;)</code></pre><pre><code class="lang-python">from urllib.parse import urlparseresult = urlparse(&#39;www.baidu.com/index.html;user?id=5#comment&#39;,scheme=&#39;https&#39;)print(type(result),result)</code></pre><pre><code class="lang-html">&lt;class &#39;urllib.parse.ParseResult&#39;&gt; ParseResult(scheme=&#39;https&#39;, netloc=&#39;&#39;, path=&#39;www.baidu.com/index.html&#39;, params=&#39;user&#39;, query=&#39;id=5&#39;, fragment=&#39;comment&#39;)</code></pre><pre><code class="lang-python">from urllib.parse import urlparseresult = urlparse(&#39;www.baidu.com/index.html;user?id=5#comment&#39;,scheme=&#39;https&#39;,allow_fragments=False)print(type(result),result)</code></pre><pre><code class="lang-shell">&lt;class &#39;urllib.parse.ParseResult&#39;&gt; ParseResult(scheme=&#39;https&#39;, netloc=&#39;&#39;, path=&#39;www.baidu.com/index.html&#39;, params=&#39;user&#39;, query=&#39;id=5#comment&#39;, fragment=&#39;&#39;)</code></pre><h2 id="urlunparse"><a href="#urlunparse" class="headerlink" title="urlunparse"></a>urlunparse</h2><blockquote><p>url拼接</p></blockquote><h2 id="urljoin"><a href="#urljoin" class="headerlink" title="urljoin"></a>urljoin</h2><pre><code class="lang-python">from urllib.parse import urljoinprint(urljoin(&#39;http://www.cwi.nl/%7Eguido/Python.html&#39;, &#39;FAQ.html&#39;))print(urljoin(&#39;http://www.cwi.nl/%7Eguido/Python.html&#39;,&#39;//www.python.org/%7Eguido&#39;))</code></pre><pre><code class="lang-shell">http://www.cwi.nl/%7Eguido/FAQ.htmlhttp://www.python.org/%7Eguido</code></pre><h2 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode"></a>urlencode</h2><blockquote><p>字典转换成URL参数</p></blockquote><pre><code class="lang-python">from urllib.parse import urlencodeparams = &#123;    &#39;name&#39;:&#39;test&#39;,    &#39;age&#39;:33&#125;base_url = &quot;http://www.baidu.com?&quot;print(base_url+urlencode(params))</code></pre><pre><code class="lang-shell">http://www.baidu.com?name=test&amp;age=33</code></pre><h2 id="urllib-robotparser"><a href="#urllib-robotparser" class="headerlink" title="urllib.robotparser"></a>urllib.robotparser</h2><p>设置某些网址不能访问</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium学习示例</title>
      <link href="//a31ea4d6.html"/>
      <url>//a31ea4d6.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><blockquote><p><a href="https://www.selenium.dev/">Selenium</a></p><p>说明: 本文章从 jupyter-notebook 导出，代码示例后边附带执行结果</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><pre><code class="lang-python">from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.common.keys import Keysfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.support.wait import WebDriverWaitbrowser = webdriver.Chrome()try:    browser.get(&#39;https://www.zhipin.com/c101010100-p100199/?ka=search_100199&#39;)#     input = browser.find_element_by_id(&#39;kw&#39;)#     input.send_keys(&#39;Python&#39;)#     input.send_keys(Keys.ENTER)    wait = WebDriverWait(browser,10)    wait.until(EC.presence_of_element_located((By.CLASS_NAME,&#39;info-primary&#39;)))    print(browser.current_url)    print(browser.get_cookies())    print(browser.page_source)finally:#     browser.close()    print(&#39;finish!&#39;)</code></pre><pre><code class="lang-shell">finish</code></pre><h1 id="声明浏览器对象"><a href="#声明浏览器对象" class="headerlink" title="声明浏览器对象"></a>声明浏览器对象</h1><pre><code class="lang-python">from selenium import webdriverbrowser = webdriver.Chrome()# browser = webdriver.Firefox()# browser = webdriver.Edge()browser1 = webdriver.Safari()browser.close()browser1.close()</code></pre><h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><pre><code class="lang-python">from selenium import webdriverbrowser = webdriver.Chrome()browser.get(&#39;http://www.taobao.com&#39;)print(browser.page_source)browser.close()</code></pre><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><h3 id="单个元素"><a href="#单个元素" class="headerlink" title="单个元素"></a>单个元素</h3><pre><code class="lang-python">from selenium import webdriverbrowser = webdriver.Chrome()browser.get(&#39;https://www.lagou.com/beijing-zhaopin/Java/10&#39;)x = browser.find_element_by_xpath(&#39;//div[@class=&quot;pager_container&quot;]/a[last()]&#39;)print(type(x))print(x.get_attribute(&#39;href&#39;))browser.close()</code></pre><pre><code class="lang-shell">&lt;class &#39;selenium.webdriver.remote.webelement.WebElement&#39;&gt;https://www.lagou.com/beijing-zhaopin/Java/11/</code></pre><pre><code class="lang-python">from selenium import webdriverfrom selenium.webdriver.common.by import Bybrowser = webdriver.Chrome()browser.get(&#39;https://www.taobao.com&#39;)input_first = browser.find_element(By.ID,&#39;q&#39;)print(input_first)browser.close()</code></pre><h2 id="多个元素"><a href="#多个元素" class="headerlink" title="多个元素"></a>多个元素</h2><pre><code class="lang-python">from selenium import webdriverfrom selenium.webdriver.common.by import Bybrowser = webdriver.Chrome()browser.get(&#39;https://www.taobao.com&#39;)input_first = browser.find_elements_by_css_selector(&#39;.service-bd li&#39;)# 列表for i in input_first:    print(i)input_first = browser.find_elements(By.CSS_SELECTOR,&#39;.service-bd li&#39;)# 列表for i in input_first:    print(i)browser.close()</code></pre><h2 id="元素交互操作"><a href="#元素交互操作" class="headerlink" title="元素交互操作"></a>元素交互操作</h2><h3 id="对获取的元素调用交互方法"><a href="#对获取的元素调用交互方法" class="headerlink" title="对获取的元素调用交互方法"></a>对获取的元素调用交互方法</h3><pre><code class="lang-python">from selenium import webdriverfrom selenium.webdriver.common.by import Byimport timebrowser = webdriver.Chrome()browser.get(&#39;https://www.taobao.com&#39;)input_first = browser.find_element_by_id(&#39;q&#39;)input_first.send_keys(&#39;iPhone&#39;)time.sleep(3)input_first.clear()input_first.send_keys(&#39;iPad&#39;)button = browser.find_element_by_class_name(&#39;btn-search&#39;)button.click()time.sleep(3)browser.close()</code></pre><p>更多操作：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.remote.webelement</a></p><h2 id="交互动作"><a href="#交互动作" class="headerlink" title="交互动作"></a>交互动作</h2><blockquote><p> 将动作附加到动作链中串行执行</p></blockquote><pre><code class="lang-python">from selenium import webdriverfrom selenium.webdriver import ActionChainstry:    b = webdriver.Chrome()    url = &#39;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#39;    b.get(url)    # 切换到 frame 标签    b.switch_to.frame(&#39;iframeResult&#39;)    # 被拖拽对象    source = b.find_element_by_css_selector(&#39;#draggable&#39;)    target = b.find_element_by_css_selector(&#39;#droppable&#39;)    # 声明一个动作队列    actions = ActionChains(b)    actions.drag_and_drop(source, target)    actions.perform()except Exception as e:    print(e)finally:    b.close()</code></pre><p>更多操作：<a href="https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains">https://selenium-python.readthedocs.io/api.html#module-selenium.webdriver.common.action_chains</a></p><h2 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h2><pre><code class="lang-python">from selenium import webdriverb = webdriver.Chrome()b.get(&#39;https://www.zhihu.com/explore&#39;)b.execute_script(&#39;window.scrollTo(0, document.body.scrollHeight)&#39;)b.execute_script(&#39;alert(&quot;To Button&quot;)&#39;)</code></pre><h1 id="获取元素信息"><a href="#获取元素信息" class="headerlink" title="获取元素信息"></a>获取元素信息</h1><pre><code class="lang-python">from selenium import webdriverfrom selenium.webdriver import ActionChainsfrom selenium.webdriver.common.by import Byb = webdriver.Chrome()url = &#39;https://www.zhihu.com/explore&#39;b.get(url)# print(b.page_source)# 属性含有空格 报错logo = b.find_element(By.CLASS_NAME ,&quot;AppHeader-inner&quot;)print(logo)# 获取属性print(logo.get_attribute(&#39;class&#39;))# 获取文本值print(logo.text)# 获取ID、位置、标签名、大小print(logo.id)print(logo.location)print(logo.size)</code></pre><pre><code class="lang-shell">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;214a06174092bc2912b9af1d370e9f26&quot;, element=&quot;2d66204b-57a7-4258-b395-6eef76f741de&quot;)&gt;AppHeader-inner首页发现等你来答登录加入知乎2d66204b-57a7-4258-b395-6eef76f741de&#123;&#39;x&#39;: 76, &#39;y&#39;: 0&#125;&#123;&#39;height&#39;: 52, &#39;width&#39;: 1032&#125;</code></pre><h1 id="Fram"><a href="#Fram" class="headerlink" title="Fram"></a>Fram</h1><pre><code class="lang-python">from selenium import webdriverfrom selenium.common.exceptions import NotImplementedErrortry:    b = webdriver.Chrome()    url = &#39;https://www.runoob.com/try/try.php?filename=jqueryui-api-droppable&#39;    b.get(url)    # 切换到 frame 标签    b.switch_to.frame(&#39;iframeResult&#39;)    # 被拖拽对象    source = b.find_element_by_css_selector(&#39;#draggable&#39;)    try:        s = b.find_element_by_class_name(&#39;container&#39;)    except NotImplementedError:        print(&quot;No&quot;)    # 回去    s.switch_to.parent_frame()    s = b.find_element_by_class_name(&#39;container&#39;)    print(s)except Exception as e:    print(e)</code></pre><pre><code class="lang-shell">ImportError: cannot import name &#39;NotImplementedError&#39; from &#39;selenium.common.exceptions&#39; (/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/selenium/common/exceptions.py)</code></pre><h1 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h1><h2 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h2><pre><code>当使用隐式等待 执行测试的时候，如果 webdriver 没有在DOM中找到元素，将继续等待，超出设定时间后则抛出异常</code></pre><pre><code class="lang-python">from selenium import webdriverbrowser = webdriver.Chrome()# 等待 10 sbrowser.implicitly_wait(10)browser.get(&#39;http://www.baidu.com&#39;)input = browser.find_element_by_link_text(&#39;#0000cc&#39;)print(input)</code></pre><pre><code class="lang-shell">NoSuchElementException: Message: no such element: Unable to locate element: &#123;&quot;method&quot;:&quot;link text&quot;,&quot;selector&quot;:&quot;#0000cc&quot;&#125;  (Session info: chrome=80.0.3987.132)</code></pre><h2 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h2><p>指定等待条件和最长等待时间</p><pre><code class="lang-python">from selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECb = webdriver.Chrome()b.get(&#39;https://www.taobao.com&#39;)wait = WebDriverWait(b,10)# 参数为 元组类型input = wait.until(EC.presence_of_element_located((By.ID, &#39;q&#39;)))button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;.btn-search&#39;)))print(input, button)</code></pre><pre><code class="lang-shell">&lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;76f1dc9a46a670633392632ae49d64a8&quot;, element=&quot;f4c9f80d-e808-4147-838f-5aa1ad3391f8&quot;)&gt; &lt;selenium.webdriver.remote.webelement.WebElement (session=&quot;76f1dc9a46a670633392632ae49d64a8&quot;, element=&quot;ca703ce2-1e34-4726-8538-97ba688f1f75&quot;)&gt;</code></pre><pre><code class="lang-python">## 前进后退import timefrom selenium import webdriverb = webdriver.Chrome()b.get(&#39;http:&#39;)b.get(&#39;http:&#39;)b.get(&#39;http:&#39;)b.get(&#39;http:&#39;)# 后退b.back()# 前进b.forward()b.close()</code></pre><h1 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h1><pre><code class="lang-python">from selenium import webdriverb = webdriver.Chrome()b.get(&quot;&quot;)print(b.get_cookies())b.add_cookie(&#123;&#39;name&#39;:&#39;name&#39;,&#39;domain&#39;:&#39;www.zhihu.com&#39;&#125;)print(b.get_cookies())b.delete_all_cookies()print(b.get_cookies())</code></pre><h2 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h2><pre><code class="lang-python">import seleniumfrom selenium import webdriverb = webdriver.Chrome()b.get(url)b.execute_script(&#39;window.open()&#39;)print(b.window_handles)b.switch_to_window(b.window_handles[1])b.get(url2)b.switch_to_window(b.window_handles[0])b.get(url3)</code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><pre><code class="lang-python"># 是 Try - Catch 吗？ 当时没记 😓</code></pre><h2 id="无界面测试"><a href="#无界面测试" class="headerlink" title="无界面测试"></a>无界面测试</h2><pre><code class="lang-python">from selenium import webdriverfrom pyvirtualdisplay import Displaydisplay = Display(visible=1, size=(800,600))display.start()browser = webdriver.Chrome()browser.get(&#39;http://www.baidu.com&#39;)print(browser.page_source)</code></pre><pre><code class="lang-shell">EasyProcessError: start error &lt;EasyProcess cmd_param=[&#39;Xephyr&#39;, &#39;-help&#39;] cmd=[&#39;Xephyr&#39;, &#39;-help&#39;] oserror=[Errno 20] Not a directory: &#39;Xephyr&#39; return_code=None stdout=&quot;None&quot; stderr=&quot;None&quot; timeout_happened=False&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Requests库使用</title>
      <link href="//7e933fdb.html"/>
      <url>//7e933fdb.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Requests库详解"><a href="#Requests库详解" class="headerlink" title="Requests库详解"></a>Requests库详解</h1><blockquote><p><a href="https://pypi.org/project/requests/">Requests -PyPi</a></p><p>说明: 本文章从 jupyter-notebook 导出，代码示例后边附带执行结果</p><p>用法方便，基于urllib库</p></blockquote><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre><code class="lang-python">import requestsresponse =  requests.get(&quot;http://www.baidu.com&quot;)print(type(response))print(response.status_code)print(response.text)print(response.cookies)</code></pre><pre><code class="lang-html">&lt;class &#39;requests.models.Response&#39;&gt;200&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=content-type content=text/html;charset=utf-8&gt;&lt;meta http-equiv=X-UA-Compatible content=IE=Edge&gt;...&lt;img src=//www.baidu.com/img/gs.gif&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;&lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt;</code></pre><h2 id="各种请求方式"><a href="#各种请求方式" class="headerlink" title="各种请求方式"></a>各种请求方式</h2><pre><code class="lang-python">import requestsrequests.post(&quot;http://httpbin/post&quot;)requests.put(&quot;http://httpbin/put&quot;)requests.delete(&quot;http://httpbin/delete&quot;)requests.head(&quot;http://httpbin/get&quot;)requests.options(&quot;http://httpbin/get&quot;)</code></pre><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><h3 id="基本的GET请求"><a href="#基本的GET请求" class="headerlink" title="基本的GET请求"></a>基本的GET请求</h3><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><pre><code class="lang-python">import requestsresponse = requests.get(&quot;http://httpbin.org/get&quot;)print(response.text)</code></pre><pre><code class="lang-json">&#123;  &quot;args&quot;: &#123;&#125;,   &quot;headers&quot;: &#123;    &quot;Accept&quot;: &quot;*/*&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,     &quot;Host&quot;: &quot;httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;python-requests/2.23.0&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-5e6894cf-dd476ea0264c09203cb3eb4c&quot;  &#125;,   &quot;origin&quot;: &quot;27.205.175.189&quot;,   &quot;url&quot;: &quot;http://httpbin.org/get&quot;&#125;</code></pre><pre><code class="lang-python">import requestsparams = &#123;    &#39;name&#39;:&#39;test&#39;,    &#39;age&#39;:33&#125;response = requests.get(&quot;http://httpbin.org/get&quot;,params=params)print(response.text)</code></pre><pre><code class="lang-json">&#123;  &quot;args&quot;: &#123;    &quot;age&quot;: &quot;33&quot;,     &quot;name&quot;: &quot;test&quot;  &#125;,   &quot;headers&quot;: &#123;    &quot;Accept&quot;: &quot;*/*&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,     &quot;Host&quot;: &quot;httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;python-requests/2.23.0&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-5e689536-ae4ddf7caa1c912651d621fa&quot;  &#125;,   &quot;origin&quot;: &quot;27.205.175.189&quot;,   &quot;url&quot;: &quot;http://httpbin.org/get?name=test&amp;age=33&quot;&#125;</code></pre><h2 id="解析Json"><a href="#解析Json" class="headerlink" title="解析Json"></a>解析Json</h2><pre><code class="lang-python">import requestsimport jsonresponse = requests.get(&quot;http://httpbin.org/get&quot;)print(type(response.text))# 结果一样print(response.json())print(json.loads(response.text))print(type(response.json()))</code></pre><pre><code class="lang-shell">&lt;class &#39;str&#39;&gt;&#123;&#39;args&#39;: &#123;&#125;, &#39;headers&#39;: &#123;&#39;Accept&#39;: &#39;*/*&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;, &#39;Host&#39;: &#39;httpbin.org&#39;, &#39;User-Agent&#39;: &#39;python-requests/2.23.0&#39;, &#39;X-Amzn-Trace-Id&#39;: &#39;Root=1-5e6895d6-1aad3eb76a5c7c63c7fea561&#39;&#125;, &#39;origin&#39;: &#39;27.205.175.189&#39;, &#39;url&#39;: &#39;http://httpbin.org/get&#39;&#125;&#123;&#39;args&#39;: &#123;&#125;, &#39;headers&#39;: &#123;&#39;Accept&#39;: &#39;*/*&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;, &#39;Host&#39;: &#39;httpbin.org&#39;, &#39;User-Agent&#39;: &#39;python-requests/2.23.0&#39;, &#39;X-Amzn-Trace-Id&#39;: &#39;Root=1-5e6895d6-1aad3eb76a5c7c63c7fea561&#39;&#125;, &#39;origin&#39;: &#39;27.205.175.189&#39;, &#39;url&#39;: &#39;http://httpbin.org/get&#39;&#125;&lt;class &#39;dict&#39;&gt;</code></pre><h2 id="解析二进制文件"><a href="#解析二进制文件" class="headerlink" title="解析二进制文件"></a>解析二进制文件</h2><pre><code class="lang-python">import requestsresponse = requests.get(&#39;https://github.com/favicon.ico&#39;)with open(&quot;/Users/mac/MyCodes/python/github.ico&quot;,&#39;wb&#39;) as f:    f.write(response.content)    f.close()print(&#39;finish!&#39;)</code></pre><pre><code class="lang-shell">finish!</code></pre><h2 id="添加-headers"><a href="#添加-headers" class="headerlink" title="添加 headers"></a>添加 headers</h2><pre><code class="lang-python">import requestsresponse = requests.get(&quot;https://www.zhihu.com/explore&quot;)print(response.text)</code></pre><pre><code class="lang-html">&lt;html&gt;&lt;head&gt;&lt;title&gt;400 Bad Request&lt;/title&gt;&lt;/head&gt;&lt;body bgcolor=&quot;white&quot;&gt;&lt;center&gt;&lt;h1&gt;400 Bad Request&lt;/h1&gt;&lt;/center&gt;&lt;hr&gt;&lt;center&gt;openresty&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="lang-python">import requestsfrom bs4 import BeautifulSoup headers = &#123;    &#39;User-Agent&#39;:&#39;Mozilla/5.0(Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#39;,&#125;response = requests.get(r&quot;https://www.zhipin.com/c100010000/?page=4&quot;,headers=headers)soup = BeautifulSoup(response.text)print(soup.body)</code></pre><pre><code class="lang-html">&lt;body&gt;&lt;div class=&quot;data-tips&quot;&gt;&lt;div class=&quot;tip-inner&quot;&gt;&lt;div class=&quot;boss-loading&quot;&gt;&lt;span class=&quot;component-b&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;component-o&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;component-s1&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;component-s2&quot;&gt;S&lt;/span&gt;&lt;p class=&quot;gray&quot;&gt;æ­£å¨å è½½ä¸­...&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;...&lt;/script&gt;&lt;/body&gt;</code></pre><h2 id="基本POST-请求"><a href="#基本POST-请求" class="headerlink" title="基本POST 请求"></a>基本POST 请求</h2><pre><code class="lang-python">import requestsdata = &#123;&#39;name&#39;:&#39;test&#39;&#125;headers = &#123;    &#39;User-Agent&#39;:&#39;Mozilla/5.0(Macintosh; Intel Mac OS X 10_15_3)AppleWebKit/537.36(KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&#39;,&#125;response = requests.post(&quot;http://httpbin.org/post&quot;,data=data,headers=headers)print(response.text)</code></pre><pre><code class="lang-json">&#123;  &quot;args&quot;: &#123;&#125;,   &quot;data&quot;: &quot;&quot;,   &quot;files&quot;: &#123;&#125;,   &quot;form&quot;: &#123;    &quot;name&quot;: &quot;test&quot;  &#125;,   &quot;headers&quot;: &#123;    &quot;Accept&quot;: &quot;*/*&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,     &quot;Content-Length&quot;: &quot;9&quot;,     &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,     &quot;Host&quot;: &quot;httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;Mozilla/5.0(Macintosh; Intel Mac OS X 10_15_3)AppleWebKit/537.36(KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-5e689a93-f3271ea041ec2120f9e5bc20&quot;  &#125;,   &quot;json&quot;: null,   &quot;origin&quot;: &quot;27.205.175.189&quot;,   &quot;url&quot;: &quot;http://httpbin.org/post&quot;&#125;</code></pre><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><h3 id="response-属性"><a href="#response-属性" class="headerlink" title="response 属性"></a>response 属性</h3><pre><code class="lang-python">import requestsresponse = requests.get(&quot;http://www.baidu.com&quot;)print(response.status_code)print(response.headers)print(response.cookies)print(response.url)print(response.history)</code></pre><pre><code class="lang-shell">200&#123;&#39;Cache-Control&#39;: &#39;private, no-cache, no-store, proxy-revalidate, no-transform&#39;, &#39;Connection&#39;: &#39;keep-alive&#39;, &#39;Content-Encoding&#39;: &#39;gzip&#39;, &#39;Content-Type&#39;: &#39;text/html&#39;, &#39;Date&#39;: &#39;Wed, 11 Mar 2020 08:19:20 GMT&#39;, &#39;Last-Modified&#39;: &#39;Mon, 23 Jan 2017 13:27:32 GMT&#39;, &#39;Pragma&#39;: &#39;no-cache&#39;, &#39;Server&#39;: &#39;bfe/1.0.8.18&#39;, &#39;Set-Cookie&#39;: &#39;BDORZ=27315; max-age=86400; domain=.baidu.com; path=/&#39;, &#39;Transfer-Encoding&#39;: &#39;chunked&#39;&#125;&lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt;http://www.baidu.com/[]</code></pre><h3 id="状态码判断"><a href="#状态码判断" class="headerlink" title="状态码判断"></a>状态码判断</h3><pre><code class="lang-python">import requestsresponse = requests.get(&quot;http://www.baidu.com&quot;)exit() if not response.status_code == requests.codes.ok else print(&quot;finish&quot;)</code></pre><pre><code class="lang-shell">finish</code></pre><h1 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h1><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><pre><code class="lang-python">import requestsfile = &#123;&#39;file&#39;:open(&quot;/Users/mac/MyCodes/python/github.ico&quot;,&#39;rb&#39;)&#125;response = requests.post(&#39;http://httpbin.org/post&#39;,files=file)print(response.text)</code></pre><pre><code class="lang-json">&#123;  &quot;args&quot;: &#123;&#125;,   &quot;data&quot;: &quot;&quot;,   &quot;files&quot;: &#123;    &quot;file&quot;: &quot;data:application/octet-stream;base64,AAABAAIAEBAAAAEAIAAoBQAAJgAAACAgAAABACAAKBQAAE4FAAAoAAAAEAAAACAAAAABACAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAA ... ...    AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;  &#125;,   &quot;form&quot;: &#123;&#125;,   &quot;headers&quot;: &#123;    &quot;Accept&quot;: &quot;*/*&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,     &quot;Content-Length&quot;: &quot;6664&quot;,     &quot;Content-Type&quot;: &quot;multipart/form-data; boundary=28fce0800b1ded6aed8db6c1a4acce7f&quot;,     &quot;Host&quot;: &quot;httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;python-requests/2.23.0&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-5e68a090-b62f797cf14d9e1b07a80229&quot;  &#125;,   &quot;json&quot;: null,   &quot;origin&quot;: &quot;27.205.175.189&quot;,   &quot;url&quot;: &quot;http://httpbin.org/post&quot;&#125;</code></pre><h2 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h2><pre><code class="lang-python">import requestsresponse = requests.get(&quot;http://www.baidu.com&quot;)print(response.cookies)for key,value in response.cookies.items():    print(key+&quot;=&quot;+value)</code></pre><pre><code class="lang-shell">&lt;RequestsCookieJar[&lt;Cookie BDORZ=27315 for .baidu.com/&gt;]&gt;BDORZ=27315</code></pre><h2 id="会话维持"><a href="#会话维持" class="headerlink" title="会话维持"></a>会话维持</h2><h3 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h3><pre><code class="lang-python">import requests#两个过程相对独立# 相当于 一个浏览器设置cookie 另一个浏览器访问requests.get(&quot;http://httpbin.org/cookies/set/number/12345&quot;)response = requests.get(&quot;http://httpbin.org/cookies&quot;)print(response.text)</code></pre><pre><code class="lang-json">&#123;  &quot;cookies&quot;: &#123;&#125;&#125;</code></pre><pre><code class="lang-python">import requestss = requests.Session();# 维持回话信息 自动处理s.get(&quot;http://httpbin.org/cookies/set/number/12345&quot;)response = s.get(&quot;http://httpbin.org/cookies&quot;)print(response.text)</code></pre><pre><code class="lang-json">&#123;  &quot;cookies&quot;: &#123;    &quot;number&quot;: &quot;12345&quot;  &#125;&#125;</code></pre><h3 id="证书验证"><a href="#证书验证" class="headerlink" title="证书验证"></a>证书验证</h3><p>https 监测整数 如果不合法 抛出 SSLError</p><pre><code class="lang-python">import requestsresponse = requests.get(&quot;https://www.12306.cn&quot;,verify = False)print(response)</code></pre><pre><code class="lang-shell">&lt;Response [200]&gt;</code></pre><pre><code class="lang-python">import requestsfrom requests.packages import urllib3urllib3.disable_warnings()response = requests.get(&quot;https://www.12306.cn&quot;,verify = False)print(response)</code></pre><pre><code class="lang-shell">&lt;Response [200]&gt;</code></pre><h3 id="代理设置"><a href="#代理设置" class="headerlink" title="代理设置"></a>代理设置</h3><pre><code class="lang-python">import requestsproxies = &#123;    &#39;http&#39;:&#39;http://user:password@127.0.0.0.1:9743&#39;&#125;response = requests.get(&quot;http://www.baidu.com&quot;,proxies=proxies)print(response.status_code)</code></pre><pre><code class="lang-shell">gaierror: [Errno 8] nodename nor servname provided, or not knownProxyError: HTTPConnectionPool(host=&#39;127.0.0.0.1&#39;, port=9743): Max retries exceeded with url: http://www.baidu.com/ (Caused by ProxyError(&#39;Cannot connect to proxy.&#39;, NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x111b30220&gt;: Failed to establish a new connection: [Errno 8] nodename nor servname provided, or not known&#39;)))</code></pre><pre><code class="lang-python"># socks 代理pip3 install &#39;requests[socks]&#39;import requestsproxies = &#123;    &#39;http&#39;:&#39;sock5:http://user:password@127.0.0.0.1:9743&#39;&#125;response = requests.get(&quot;http://www.baidu.com&quot;,proxies=proxies)print(response.status_code)</code></pre><h2 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h2><p>抛出ReadTimeout </p><pre><code class="lang-python">import requestsrequests.get(url,timeout=1)</code></pre><h2 id="认证设"><a href="#认证设" class="headerlink" title="认证设"></a>认证设</h2><pre><code class="lang-python">import requestsfrom requests.auth import HTTPBasicAuthr = requests.get(&quot;http://120.27.34.24:9001&quot;,auth=HTTPBasicAuth(&#39;user&#39;,&#39;123&#39;))print(r.status_code)</code></pre><pre><code class="lang-shell">    # 当时测试异常 Error    KeyboardInterrupt:</code></pre><pre><code class="lang-python">import requestsfrom requests.auth import HTTPBasicAuthr = requests.get(&quot;http://120.27.34.24:9001&quot;,auth=(&#39;user&#39;,&#39;123&#39;))print(r.status_code)</code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>先捕捉子类异常 然后捕捉父类异常</p><pre><code class="lang-python">import requestsheaders = &#123;               &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50&#39;        &#125;proxies = &#123;  &quot;http&quot;: &quot;http://60.216.20.213:8001&quot;,  &quot;https&quot;: &quot;https://60.216.20.214:8001&quot;&#125;#http://www.dianping.com/shop/129152119try:    for i in range(129152000,129152119):        print(requests.get(&#39;http://www.baidu.com&#39;,proxies=proxies))        print(requests.get(&#39;http://www.dianping.com/shop/&#39;+str(i), headers=headers,proxies=proxies))        print(&#39;http://www.dianping.com/shop/&#39;+str(i))except Exception as e:    print(e)</code></pre><pre><code class="lang-shell">    # 当时测试异常 Error    HTTPConnectionPool(host=&#39;60.216.20.213&#39;, port=8001): Max retries exceeded with url: http://www.baidu.com/ (Caused by ProxyError(&#39;Cannot connect to proxy.&#39;, NewConnectionError(&#39;&lt;urllib3.connection.HTTPConnection object at 0x1135dd880&gt;: Failed to establish a new connection: [Errno 60] Operation timed out&#39;)))</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQuery学习示例</title>
      <link href="//d622284c.html"/>
      <url>//d622284c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PyQuery"><a href="#PyQuery" class="headerlink" title="PyQuery"></a>PyQuery</h1><blockquote><p><a href="https://pythonhosted.org/pyquery/">PyQuery</a></p><p>说明： 本文章从 jupyter-notebook 导出，代码示例后边附带执行结果</p></blockquote><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pq# 初始化doc = pq(html)print(doc(&#39;li&#39;))doc = pq(url=&#39;http://www.baidu.com&#39;)print(doc)doc = pq(filename=&#39;demo.html&#39;)</code></pre><pre><code class="lang-shell">&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;html&gt; &lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;/&gt;&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge&quot;/&gt;&lt;meta content=&quot;always&quot; name=&quot;referrer&quot;/&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;http://s1.bdstatic.com/r/www/cache/bdorz/baidu.min.css&quot;/&gt;&lt;title&gt;ç¾åº¦ä¸ä¸ï¼ä½ å°±ç¥é&lt;/title&gt;&lt;/head&gt; &lt;body link=&quot;#0000cc&quot;&gt; &lt;div id=&quot;wrapper&quot;&gt; &lt;div id=&quot;head&quot;&gt; &lt;div class=&quot;head_wrapper&quot;&gt; &lt;div class=&quot;s_form&quot;&gt; &lt;div class=&quot;s_form_wrapper&quot;&gt; &lt;div id=&quot;lg&quot;&gt; &lt;img hidefocus=&quot;true&quot; src=&quot;//www.baidu.com/img/bd_logo1.png&quot; width=&quot;270&quot; height=&quot;129&quot;/&gt; &lt;/div&gt; &lt;form id=&quot;form&quot; name=&quot;f&quot; action=&quot;//www.baidu.com/s&quot; class=&quot;fm&quot;&gt; &lt;input type=&quot;hidden&quot; name=&quot;bdorz_come&quot; value=&quot;1&quot;/&gt; &lt;input type=&quot;hidden&quot; name=&quot;ie&quot; value=&quot;utf-8&quot;/&gt; &lt;input type=&quot;hidden&quot; name=&quot;f&quot; value=&quot;8&quot;/&gt; &lt;input type=&quot;hidden&quot; name=&quot;rsv_bp&quot; value=&quot;1&quot;/&gt; &lt;input type=&quot;hidden&quot; name=&quot;rsv_idx&quot; value=&quot;1&quot;/&gt; &lt;input type=&quot;hidden&quot; name=&quot;tn&quot; value=&quot;baidu&quot;/&gt;&lt;span class=&quot;bg s_ipt_wr&quot;&gt;&lt;input id=&quot;kw&quot; name=&quot;wd&quot; class=&quot;s_ipt&quot; value=&quot;&quot; maxlength=&quot;255&quot; autocomplete=&quot;off&quot; autofocus=&quot;&quot;/&gt;&lt;/span&gt;&lt;span class=&quot;bg s_btn_wr&quot;&gt;&lt;input type=&quot;submit&quot; id=&quot;su&quot; value=&quot;ç¾åº¦ä¸ä¸&quot; class=&quot;bg s_btn&quot;/&gt;&lt;/span&gt; &lt;/form&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;u1&quot;&gt; &lt;a href=&quot;http://news.baidu.com&quot; name=&quot;tj_trnews&quot; class=&quot;mnav&quot;&gt;æ°é»&lt;/a&gt; &lt;a href=&quot;http://www.hao123.com&quot; name=&quot;tj_trhao123&quot; class=&quot;mnav&quot;&gt;hao123&lt;/a&gt; &lt;a href=&quot;http://map.baidu.com&quot; name=&quot;tj_trmap&quot; class=&quot;mnav&quot;&gt;å°å¾&lt;/a&gt; &lt;a href=&quot;http://v.baidu.com&quot; name=&quot;tj_trvideo&quot; class=&quot;mnav&quot;&gt;è§é¢&lt;/a&gt; &lt;a href=&quot;http://tieba.baidu.com&quot; name=&quot;tj_trtieba&quot; class=&quot;mnav&quot;&gt;è´´å§&lt;/a&gt; &lt;noscript&gt; &lt;a href=&quot;http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=http%3A%2F%2Fwww.baidu.com%2f%3fbdorz_come%3d1&quot; name=&quot;tj_login&quot; class=&quot;lb&quot;&gt;ç»å½&lt;/a&gt; &lt;/noscript&gt; &lt;script&gt;document.write(&#39;&amp;lt;a href=&quot;http://www.baidu.com/bdorz/login.gif?login&amp;amp;tpl=mn&amp;amp;u=&#39;+ encodeURIComponent(window.location.href+ (window.location.search === &quot;&quot; ? &quot;?&quot; : &quot;&amp;amp;&quot;)+ &quot;bdorz_come=1&quot;)+ &#39;&quot; name=&quot;tj_login&quot; class=&quot;lb&quot;&amp;gt;ç»å½&amp;lt;/a&amp;gt;&#39;);&lt;/script&gt; &lt;a href=&quot;//www.baidu.com/more/&quot; name=&quot;tj_briicon&quot; class=&quot;bri&quot; style=&quot;display: block;&quot;&gt;æ´å¤äº§å&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;ftCon&quot;&gt; &lt;div id=&quot;ftConw&quot;&gt; &lt;p id=&quot;lh&quot;&gt; &lt;a href=&quot;http://home.baidu.com&quot;&gt;å³äºç¾åº¦&lt;/a&gt; &lt;a href=&quot;http://ir.baidu.com&quot;&gt;About Baidu&lt;/a&gt; &lt;/p&gt; &lt;p id=&quot;cp&quot;&gt;©2017 Baidu &lt;a href=&quot;http://www.baidu.com/duty/&quot;&gt;ä½¿ç¨ç¾åº¦åå¿è¯»&lt;/a&gt;  &lt;a href=&quot;http://jianyi.baidu.com/&quot; class=&quot;cp-feedback&quot;&gt;æè§åé¦&lt;/a&gt; äº¬ICPè¯030173å·  &lt;img src=&quot;//www.baidu.com/img/gs.gif&quot;/&gt; &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt;</code></pre><h1 id="基本CSS选择器"><a href="#基本CSS选择器" class="headerlink" title="基本CSS选择器"></a>基本CSS选择器</h1><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pq# 初始化doc = pq(html)print(doc(&#39;#list .active a&#39;))</code></pre><pre><code class="lang-html">    &lt;a href=&quot;/3.mp3&quot; singer=&quot;&amp;#x9F50;&amp;#x79E6;&quot;&gt;往事随风&lt;/a&gt;</code></pre><h1 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h1><h2 id="查找子元素"><a href="#查找子元素" class="headerlink" title="查找子元素"></a>查找子元素</h2><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pqdoc = pq(html)iterms = doc(&#39;#list&#39;)print(type(iterms))print(iterms)# 层次符合即可print(iterms.find(&#39;li&#39;))# 直接子标签list = iterms.children()print(list)list = iterms.children(&#39;.active&#39;)print(list)</code></pre><pre><code class="lang-shell">&lt;class &#39;pyquery.pyquery.PyQuery&#39;&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;</code></pre><h2 id="父元素"><a href="#父元素" class="headerlink" title="父元素"></a>父元素</h2><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pqdoc = pq(html)container = doc(&#39;.active&#39;).parent()print(container)container = doc(&#39;.active&#39;).parents()print(type(container))print(container)container = doc(&#39;.active&#39;).parents(&#39;#list&#39;)print(container)</code></pre><pre><code class="lang-shell">&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;class &#39;pyquery.pyquery.PyQuery&#39;&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&amp;gt;&amp;#10;&amp;lt;h2 class=&quot; title=&quot;&quot;&gt;经典老歌&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&amp;gt;&amp;#10;&amp;lt;h2 class=&quot; title=&quot;&quot;&gt;经典老歌&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;div id=&quot;songs-list&#39;&amp;gt;&amp;#10;&amp;lt;h2 class=&quot; title=&quot;&quot;&gt;经典老歌&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;</code></pre><h2 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素"></a>兄弟元素</h2><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li id=&#39;list1 active&#39; data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pqdoc = pq(html)li = doc(&#39;#list #list1\ active&#39;)print(li)print(li.siblings())print(li.siblings(&#39;.active&#39;))</code></pre><pre><code class="lang-html">&lt;li id=&quot;list1 active&quot; data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;&lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;</code></pre><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pqdoc = pq(html)container = doc(&#39;li&#39;)print(container)lis = container.items()for i in lis:    print(type(i))    print(i)</code></pre><pre><code class="lang-html">&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;class &#39;pyquery.pyquery.PyQuery&#39;&gt;&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;&lt;class &#39;pyquery.pyquery.PyQuery&#39;&gt;&lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;&lt;class &#39;pyquery.pyquery.PyQuery&#39;&gt;&lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;&lt;class &#39;pyquery.pyquery.PyQuery&#39;&gt;&lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;class &#39;pyquery.pyquery.PyQuery&#39;&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;class &#39;pyquery.pyquery.PyQuery&#39;&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;</code></pre><h2 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h2><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pqdoc = pq(html)container = doc(&#39;li&#39;)print(container)lis = container.items()# 获取属性for i in lis:    print(i.attr(&#39;href&#39;))    # 获取文本    print(i.text())    print(i.attr.href)    # 获取 html    print(i.html())</code></pre><pre><code class="lang-shell">&lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;None一路上有你None一路上有你None沧海一声笑None        &lt;a href=&quot;/2.mp3&quot; singer=&quot;&amp;#x4EFB;&amp;#x8D24;&amp;#x9F50;&quot;&gt;沧海一声笑&lt;/a&gt;None往事随风None        &lt;a href=&quot;/3.mp3&quot; singer=&quot;&amp;#x9F50;&amp;#x79E6;&quot;&gt;往事随风&lt;/a&gt;None光辉岁月None&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;None记事本None&lt;a href=&quot;/5.mp3&quot; singer=&quot;&amp;#x9648;&amp;#x6167;&amp;#x7433;&quot;&gt;记事本&lt;/a&gt;  None但愿人长久None        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;&amp;#x9093;&amp;#x4E3D;&amp;#x541B;&quot;&gt;但愿人长久&lt;/a&gt;</code></pre><h1 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h1><h2 id="addClass、removeClass"><a href="#addClass、removeClass" class="headerlink" title="addClass、removeClass"></a>addClass、removeClass</h2><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;沧海一声笑        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pqdoc = pq(html)container = doc(&#39;#list .active&#39;)print(container)container.remove_class(&#39;active&#39;)print(container)container.add_class(&#39;active1&#39;)print(container)#attr、csscontainer.attr(&#39;name&#39;, &#39;link&#39;)print(container)container.attr(&#39;name&#39;, &#39;link1&#39;)print(container)container.css(&#39;font-size&#39;, &#39;14px&#39;)print(container)container.css(&#39;font-size&#39;, &#39;18px&#39;)print(container)# removecontainer.find(&#39;a&#39;).remove()print(container.text())# 其他 PyQuery API</code></pre><pre><code class="lang-shell">&lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;/&gt;    &lt;/li&gt;&lt;li data-view=&quot;4&quot; class=&quot;&quot;&gt;往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;/&gt;    &lt;/li&gt;&lt;li data-view=&quot;4&quot; class=&quot;active1&quot;&gt;往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;/&gt;    &lt;/li&gt;&lt;li data-view=&quot;4&quot; class=&quot;active1&quot; name=&quot;link&quot;&gt;往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;/&gt;    &lt;/li&gt;&lt;li data-view=&quot;4&quot; class=&quot;active1&quot; name=&quot;link1&quot;&gt;往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;/&gt;    &lt;/li&gt;&lt;li data-view=&quot;4&quot; class=&quot;active1&quot; name=&quot;link1&quot; style=&quot;font-size: 14px&quot;&gt;往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;/&gt;    &lt;/li&gt;&lt;li data-view=&quot;4&quot; class=&quot;active1&quot; name=&quot;link1&quot; style=&quot;font-size: 18px&quot;&gt;往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;/&gt;    &lt;/li&gt;往事随风</code></pre><h1 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h1><pre><code class="lang-python">html = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;1一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;2沧海一声笑        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;3往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;4光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;5记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;6但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;from pyquery import PyQuery as pqdoc = pq(html)container = doc(&#39;li:first-child&#39;)print(container)container = doc(&#39;li:last-child&#39;)print(container)# 比2 大的标签container = doc(&#39;li:gt(2)&#39;)print(container)container = doc(&#39;li:nth-child(2)&#39;)print(container)container = doc(&#39;li:nth-child(2n)&#39;)print(container)container = doc(&#39;li:contains(齐秦)&#39;)print(container)container = doc(&#39;li:contains(往事)&#39;)print(container)</code></pre><pre><code class="lang-html">&lt;li data-view=&quot;2&quot;&gt;1一路上有你&lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;6但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;4光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;5记事本&lt;/a&gt;  &lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;6但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;li data-view=&quot;7&quot;&gt;2沧海一声笑        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;/&gt;    &lt;/li&gt;&lt;li data-view=&quot;7&quot;&gt;2沧海一声笑        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;/&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;4光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;        &lt;a href=&quot;*/6.mp3&amp;quot;&quot; singer=&quot;邓丽君&quot;&gt;6但愿人长久&lt;/a&gt;    &lt;/li&gt;</code></pre><p>​    </p><pre><code class="lang-html">&lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;3往事随风        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;/&gt;    &lt;/li&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup 学习示例</title>
      <link href="//f6b0f828.html"/>
      <url>//f6b0f828.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h1><blockquote><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">BeautifulSoup</a></p><p>说明： 本文章从 jupyter-notebook 导出，代码示例后边附带执行结果</p></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><pre><code class="lang-python">from bs4 import BeautifulSoupimport lxmlhtml = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;soup = BeautifulSoup(html,&#39;lxml&#39;)print(soup.prettify())print(soup.title.string)print(soup.find(&#39;span&#39;)==None)</code></pre><pre><code class="lang-shell">    &lt;html&gt;     &lt;head&gt;      &lt;title&gt;       This is a title      &lt;/title&gt;     &lt;/head&gt;     &lt;body&gt;      &lt;div id=&quot;songs-list&#39;&amp;gt;    &amp;lt;h2 class=&quot; title=&quot;&quot;&gt;       经典老歌       &lt;p class=&quot;introduction&quot;&gt;        经典老歌列表       &lt;/p&gt;       &lt;ul class=&quot;list-group&quot; id=&quot;list&quot;&gt;        &lt;li data-view=&quot;2&quot;&gt;         一路上有你        &lt;/li&gt;        &lt;li data-view=&quot;7&quot;&gt;         &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;          沧海一声笑         &lt;/a&gt;        &lt;/li&gt;        &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;         &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;          往事随风         &lt;/a&gt;        &lt;/li&gt;        &lt;li data-view=&quot;6&quot;&gt;         &lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;          光辉岁月         &lt;/a&gt;        &lt;/li&gt;        &lt;li data=&quot;&quot;&gt;         &lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;          记事本         &lt;/a&gt;        &lt;/li&gt;        &lt;li data=&quot;&quot;&gt;         &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;          但愿人长久         &lt;/a&gt;        &lt;/li&gt;       &lt;/ul&gt;      &lt;/div&gt;     &lt;/body&gt;    &lt;/html&gt;    This is a title    True</code></pre><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><pre><code class="lang-python">from bs4 import BeautifulSoupimport lxmlhtml = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;songs-list&#39;&gt;&lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;&lt;p class=&quot;introduction&quot;&gt;    经典老歌列表&lt;/p&gt;&lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;        &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;        &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;        &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;soup = BeautifulSoup(html,&#39;lxml&#39;)print(soup.prettify())print(soup.title.string)print(soup.title)print(soup.head)print(soup.p)print(soup.title.name)</code></pre><pre><code class="lang-shell">    &lt;html&gt;     &lt;head&gt;      &lt;title&gt;       This is a title      &lt;/title&gt;     &lt;/head&gt;     &lt;body&gt;      &lt;div id=&quot;songs-list&#39;&amp;gt;    &amp;lt;h2 class=&quot; title=&quot;&quot;&gt;       经典老歌       &lt;p class=&quot;introduction&quot;&gt;        经典老歌列表       &lt;/p&gt;       &lt;ul class=&quot;list-group&quot; id=&quot;list&quot;&gt;        &lt;li data-view=&quot;2&quot;&gt;         一路上有你        &lt;/li&gt;        &lt;li data-view=&quot;7&quot;&gt;         &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;          沧海一声笑         &lt;/a&gt;        &lt;/li&gt;        &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;         &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;          往事随风         &lt;/a&gt;        &lt;/li&gt;        &lt;li data-view=&quot;6&quot;&gt;         &lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;          光辉岁月         &lt;/a&gt;        &lt;/li&gt;        &lt;li data=&quot;&quot;&gt;         &lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;          记事本         &lt;/a&gt;        &lt;/li&gt;        &lt;li data=&quot;&quot;&gt;         &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;          但愿人长久         &lt;/a&gt;        &lt;/li&gt;       &lt;/ul&gt;      &lt;/div&gt;     &lt;/body&gt;    &lt;/html&gt;    This is a title    &lt;title&gt;This is a title&lt;/title&gt;    &lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;    &lt;p class=&quot;introduction&quot;&gt;        经典老歌列表    &lt;/p&gt;    title</code></pre><h2 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h2><pre><code class="lang-python">from bs4 import BeautifulSoupimport lxmlhtml = &quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;    &lt;body&gt;        &lt;div id=&quot;songs-list&#39;&gt;            &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;            &lt;p class=&quot;introduction&quot; name=&#39;name.p&#39;&gt;                经典老歌列表            &lt;/p&gt;            &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;                &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;                &lt;li data-view=&quot;7&quot;&gt;                    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;                &lt;/li&gt;                &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;                    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;                &lt;/li&gt;                &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data一view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/i&gt; &lt;li data一view=*5&quot;&gt;                    &lt;a href=*/6.mp3&quot; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;                &lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;soup = BeautifulSoup(html,&#39;lxml&#39;)print(soup.p.attrs[&#39;name&#39;])print(soup.p[&#39;name&#39;])# 获取内容print(soup.p.string.strip())# 嵌套选择print(type(soup.head))print(soup.head.title.string)# 子节点和父节点# 子节点print(soup.ul.contents)# 迭代器类型for i,child in enumerate(soup.ul.children):    print(i,child)# 所有子孙节点for i,child in enumerate(soup.ul.descendants):    print(i,child)# 父节点print(soup.ul.parent)# 父节点print(soup.ul.parents)for i,child in enumerate(soup.ul.parents):    print(i,child)# 兄弟节点print(list(enumerate(soup.ul.next_sibling)))print(list (enumerate(soup.ul.previous_sibling)))</code></pre><pre><code class="lang-shell">    name.p    name.p    经典老歌列表    &lt;class &#39;bs4.element.Tag&#39;&gt;    This is a title    [&#39;\n&#39;, &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;, &#39;\n&#39;, &lt;li data-view=&quot;7&quot;&gt;    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;, &#39;\n&#39;, &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;, &#39;\n&#39;, &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;, &lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt;, &lt;li data=&quot;&quot;&gt;    &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;, &#39;\n&#39;]    0     1 &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    2     3 &lt;li data-view=&quot;7&quot;&gt;    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    4     5 &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    6     7 &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;    8 &lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt;    9 &lt;li data=&quot;&quot;&gt;    &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;    10     0     1 &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    2 一路上有你    3     4 &lt;li data-view=&quot;7&quot;&gt;    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    5     6 &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    7 沧海一声笑    8     9     10 &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    11     12 &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    13 往事随风    14     15     16 &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;    17 &lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;    18 光辉岁月    19 &lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt;    20 &lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;    21 记事本    22      23 &lt;li data=&quot;&quot;&gt;    &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;    24     25 &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    26 但愿人长久    27     28     &lt;div id=&quot;songs-list&#39;&amp;gt;                &amp;lt;h2 class=&quot; title=&quot;&quot;&gt;经典老歌                &lt;p class=&quot;introduction&quot; name=&quot;name.p&quot;&gt;                    经典老歌列表                &lt;/p&gt;    &lt;ul class=&quot;list-group&quot; id=&quot;list&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt;&lt;li data=&quot;&quot;&gt;    &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;    &lt;/ul&gt;    &lt;/div&gt;    &lt;generator object PageElement.parents at 0x1141de200&gt;    0 &lt;div id=&quot;songs-list&#39;&amp;gt;                &amp;lt;h2 class=&quot; title=&quot;&quot;&gt;经典老歌                &lt;p class=&quot;introduction&quot; name=&quot;name.p&quot;&gt;                    经典老歌列表                &lt;/p&gt;    &lt;ul class=&quot;list-group&quot; id=&quot;list&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt;&lt;li data=&quot;&quot;&gt;    &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;    &lt;/ul&gt;    &lt;/div&gt;    1 &lt;body&gt;    &lt;div id=&quot;songs-list&#39;&amp;gt;                &amp;lt;h2 class=&quot; title=&quot;&quot;&gt;经典老歌                &lt;p class=&quot;introduction&quot; name=&quot;name.p&quot;&gt;                    经典老歌列表                &lt;/p&gt;    &lt;ul class=&quot;list-group&quot; id=&quot;list&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt;&lt;li data=&quot;&quot;&gt;    &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;    &lt;/ul&gt;    &lt;/div&gt;    &lt;/body&gt;    2 &lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;    &lt;body&gt;    &lt;div id=&quot;songs-list&#39;&amp;gt;                &amp;lt;h2 class=&quot; title=&quot;&quot;&gt;经典老歌                &lt;p class=&quot;introduction&quot; name=&quot;name.p&quot;&gt;                    经典老歌列表                &lt;/p&gt;    &lt;ul class=&quot;list-group&quot; id=&quot;list&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt;&lt;li data=&quot;&quot;&gt;    &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;    &lt;/ul&gt;    &lt;/div&gt;    &lt;/body&gt;    &lt;/html&gt;    3 &lt;html&gt;&lt;head&gt;&lt;title&gt;This is a title&lt;/title&gt;&lt;/head&gt;    &lt;body&gt;    &lt;div id=&quot;songs-list&#39;&amp;gt;                &amp;lt;h2 class=&quot; title=&quot;&quot;&gt;经典老歌                &lt;p class=&quot;introduction&quot; name=&quot;name.p&quot;&gt;                    经典老歌列表                &lt;/p&gt;    &lt;ul class=&quot;list-group&quot; id=&quot;list&quot;&gt;    &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;    &lt;li data-view=&quot;7&quot;&gt;    &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;    &lt;/li&gt;    &lt;li class=&quot;active&quot; data-view=&quot;4&quot;&gt;    &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;    &lt;/li&gt;    &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;&lt;li data=&quot;&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt; &lt;/li&gt;&lt;li data=&quot;&quot;&gt;    &lt;a href=&#39;*/6.mp3&quot;&#39; singer=&quot;邓丽君&quot;&gt;但愿人长久&lt;/a&gt;    &lt;/li&gt;    &lt;/ul&gt;    &lt;/div&gt;    &lt;/body&gt;    &lt;/html&gt;    [(0, &#39;\n&#39;)]    [(0, &#39;\n&#39;)]</code></pre><h2 id="标准选择器"><a href="#标准选择器" class="headerlink" title="标准选择器"></a>标准选择器</h2><p><code>find_all(name ,attrs,recursive,text,**kwargs)</code></p><blockquote><p>可以根据标签名、属性、内容查找文档</p></blockquote><pre><code class="lang-python">html =&#39;&#39;&#39; &lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;sufee Admin后台管理员系统模板_模板之家cssMoban.com&lt;/title&gt;            &lt;meta http-equiv=Content-Type content=&quot;text/html; charset=utf-8&quot;&gt;            &lt;meta name=&quot;keywords&quot; content=&quot;网页模板,网站模板,DIV+CSS模板,CSS模板,企业网站模板下载&quot; /&gt;            &lt;meta name=&quot;description&quot; content=&quot;sufee Admin后台管理员系统模板演示 下载,精品网页模板、企业网站模板、博客模板等几千种免费网页模板下载尽在模板之家cssMoban.com&quot; /&gt;            &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;/favicon.ico&quot; /&gt;            &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://static.cssmoban.com/statics/min/styles.css?v2&quot; /&gt;            &lt;script src=&quot;http://static.cssmoban.com/statics/min/lazys.js?v2&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;        &lt;!--[if lt IE 9]&gt;        &lt;link href=&quot;http://static.cssmoban.com/statics/min/cssies.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;/&gt;        &lt;script src=&quot;http://static.cssmoban.com/statics/min/jsies.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;    &lt;![endif]--&gt;    &lt;/head&gt;&lt;body&gt;        &lt;section class=&quot;page-top&quot;&gt;            &lt;div class=&quot;container col-media-main&quot;&gt;                &lt;div class=&quot;logo&quot;&gt;&lt;a href=&quot;/&quot;&gt;模板之家&lt;/a&gt;&lt;/div&gt;                    &lt;nav class=&quot;menu&quot;&gt;                        &lt;ul&gt;                            &lt;li&gt;&lt;a href=&quot;/&quot; target=&quot;_parent&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/cssthemes/&quot; class=&quot;active&quot; target=&quot;_parent&quot;&gt;网站模板&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/wpthemes/&quot; class=&quot;active&quot; target=&quot;_parent&quot;&gt;WP模板&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/tags.asp&quot; target=&quot;_parent&quot;&gt;模板标签&lt;/a&gt;&lt;/li&gt;                                &lt;script src=&quot;http://www.cssmoban.com/statics/js/20170901.js?v4&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;                        &lt;/ul&gt;                    &lt;/nav&gt;            &lt;div class=&quot;search&quot;&gt;                &lt;div class=&quot;bdcs-search&quot;&gt;                    &lt;form id=&quot;cse-search-box&quot; class=&quot;search-form&quot; action=&quot;http://so.cssmoban.com/cse/search&quot; target=&quot;_blank&quot;&gt;                        &lt;input name=&quot;s&quot; type=&quot;hidden&quot; value=&quot;7097020869459475331&quot; /&gt;                        &lt;input name=&quot;q&quot; type=&quot;text&quot; class=&quot;form-control search-form-input&quot; id=&quot;q&quot; placeholder=&quot;请输入关键词...&quot; size=&quot;28&quot; /&gt;                        &lt;input id=&quot;go&quot; class=&quot;bdcs-search-form-submit &quot; type=&quot;submit&quot; value=&quot;搜索&quot; /&gt;                    &lt;/form&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/section&gt;    &lt;/body&gt;&lt;/html&gt;&#39;&#39;&#39;import lxmlfrom bs4 import BeautifulSoupsoup = BeautifulSoup(html,&#39;lxml&#39;)print(soup.find_all(&#39;a&#39;))print(type(soup.find_all(&#39;a&#39;)[0]))for div in soup.find_all(&#39;div&#39;):    for i in div.find_all(&#39;a&#39;):        print(i)</code></pre><pre><code class="lang-shell">    [&lt;a href=&quot;/&quot;&gt;模板之家&lt;/a&gt;, &lt;a href=&quot;/&quot; target=&quot;_parent&quot;&gt;首页&lt;/a&gt;, &lt;a class=&quot;active&quot; href=&quot;/cssthemes/&quot; target=&quot;_parent&quot;&gt;网站模板&lt;/a&gt;, &lt;a class=&quot;active&quot; href=&quot;/wpthemes/&quot; target=&quot;_parent&quot;&gt;WP模板&lt;/a&gt;, &lt;a href=&quot;/tags.asp&quot; target=&quot;_parent&quot;&gt;模板标签&lt;/a&gt;]    &lt;class &#39;bs4.element.Tag&#39;&gt;    &lt;a href=&quot;/&quot;&gt;模板之家&lt;/a&gt;    &lt;a href=&quot;/&quot; target=&quot;_parent&quot;&gt;首页&lt;/a&gt;    &lt;a class=&quot;active&quot; href=&quot;/cssthemes/&quot; target=&quot;_parent&quot;&gt;网站模板&lt;/a&gt;    &lt;a class=&quot;active&quot; href=&quot;/wpthemes/&quot; target=&quot;_parent&quot;&gt;WP模板&lt;/a&gt;    &lt;a href=&quot;/tags.asp&quot; target=&quot;_parent&quot;&gt;模板标签&lt;/a&gt;    &lt;a href=&quot;/&quot;&gt;模板之家&lt;/a&gt;</code></pre><pre><code class="lang-python">html =&#39;&#39;&#39; &lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;sufee Admin后台管理员系统模板_模板之家cssMoban.com&lt;/title&gt;            &lt;meta http-equiv=Content-Type content=&quot;text/html; charset=utf-8&quot;&gt;            &lt;meta name=&quot;keywords&quot; content=&quot;网页模板,网站模板,DIV+CSS模板,CSS模板,企业网站模板下载&quot; /&gt;            &lt;meta name=&quot;description&quot; content=&quot;sufee Admin后台管理员系统模板演示 下载,精品网页模板、企业网站模板、博客模板等几千种免费网页模板下载尽在模板之家cssMoban.com&quot; /&gt;            &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;/favicon.ico&quot; /&gt;            &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://static.cssmoban.com/statics/min/styles.css?v2&quot; /&gt;            &lt;script src=&quot;http://static.cssmoban.com/statics/min/lazys.js?v2&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;        &lt;!--[if lt IE 9]&gt;        &lt;link href=&quot;http://static.cssmoban.com/statics/min/cssies.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;/&gt;        &lt;script src=&quot;http://static.cssmoban.com/statics/min/jsies.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;    &lt;![endif]--&gt;    &lt;/head&gt;&lt;body&gt;        &lt;section class=&quot;page-top&quot;&gt;            &lt;div class=&quot;asdsdsd&quot;&gt;                &lt;div class=&quot;logo&quot;&gt;container&lt;a href=&quot;/&quot;&gt;模板之家&lt;/a&gt;&lt;/div&gt;                    &lt;nav class=&quot;menu&quot;&gt;                        &lt;ul&gt;                            &lt;li&gt;&lt;a href=&quot;/&quot; target=&quot;_parent&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/cssthemes/&quot; class=&quot;active&quot; target=&quot;_parent&quot;&gt;网站模板&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/wpthemes/&quot; class=&quot;active&quot; target=&quot;_parent&quot;&gt;WP模板&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/tags.asp&quot; target=&quot;_parent&quot;&gt;模板标签&lt;/a&gt;&lt;/li&gt;                                &lt;script src=&quot;http://www.cssmoban.com/statics/js/20170901.js?v4&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;                        &lt;/ul&gt;                    &lt;/nav&gt;            &lt;div class=&quot;search&quot;&gt;                &lt;div class=&quot;bdcs-search&quot;&gt;                    &lt;form id=&quot;1&quot; class=&quot;search-form&quot; action=&quot;http://so.cssmoban.com/cse/search&quot; target=&quot;_blank&quot;&gt;                        &lt;input name=&quot;keywords&quot; type=&quot;hidden&quot; value=&quot;7097020869459475331&quot; /&gt;                        &lt;input name=&quot;q&quot; type=&quot;text&quot; class=&quot;form-control search-form-input&quot; id=&quot;q&quot; placeholder=&quot;请输入关键词...&quot; size=&quot;28&quot; /&gt;                        &lt;input id=&quot;1&quot; class=&quot;2&quot; type=&quot;submit&quot; value=&quot;搜索&quot; /&gt;                    &lt;/form&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/section&gt;    &lt;/body&gt;&lt;/html&gt;&#39;&#39;&#39;import lxmlfrom bs4 import BeautifulSoupsoup = BeautifulSoup(html,&#39;lxml&#39;)print(soup.find_all(attrs=&#123;&#39;name&#39;:&#39;keywords&#39;&#125;))print(soup.find_all(id=&#39;1&#39;))print(soup.find_all(class_=&#39;2&#39;))</code></pre><pre><code class="lang-shell">    [&lt;meta content=&quot;网页模板,网站模板,DIV+CSS模板,CSS模板,企业网站模板下载&quot; name=&quot;keywords&quot;/&gt;, &lt;input name=&quot;keywords&quot; type=&quot;hidden&quot; value=&quot;7097020869459475331&quot;/&gt;]    [&lt;form action=&quot;http://so.cssmoban.com/cse/search&quot; class=&quot;search-form&quot; id=&quot;1&quot; target=&quot;_blank&quot;&gt;    &lt;input name=&quot;keywords&quot; type=&quot;hidden&quot; value=&quot;7097020869459475331&quot;/&gt;    &lt;input class=&quot;form-control search-form-input&quot; id=&quot;q&quot; name=&quot;q&quot; placeholder=&quot;请输入关键词...&quot; size=&quot;28&quot; type=&quot;text&quot;/&gt;    &lt;input class=&quot;2&quot; id=&quot;1&quot; type=&quot;submit&quot; value=&quot;搜索&quot;/&gt;    &lt;/form&gt;, &lt;input class=&quot;2&quot; id=&quot;1&quot; type=&quot;submit&quot; value=&quot;搜索&quot;/&gt;]    [&lt;input class=&quot;2&quot; id=&quot;1&quot; type=&quot;submit&quot; value=&quot;搜索&quot;/&gt;]</code></pre><pre><code class="lang-python">html =&#39;&#39;&#39; &lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;sufee Admin后台管理员系统模板_模板之家cssMoban.com&lt;/title&gt;            &lt;meta http-equiv=Content-Type content=&quot;text/html; charset=utf-8&quot;&gt;            &lt;meta name=&quot;keywords&quot; content=&quot;网页模板,网站模板,DIV+CSS模板,CSS模板,企业网站模板下载&quot; /&gt;            &lt;meta name=&quot;description&quot; content=&quot;sufee Admin后台管理员系统模板演示 下载,精品网页模板、企业网站模板、博客模板等几千种免费网页模板下载尽在模板之家cssMoban.com&quot; /&gt;            &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;/favicon.ico&quot; /&gt;            &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://static.cssmoban.com/statics/min/styles.css?v2&quot; /&gt;            &lt;script src=&quot;http://static.cssmoban.com/statics/min/lazys.js?v2&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;        &lt;!--[if lt IE 9]&gt;        &lt;link href=&quot;http://static.cssmoban.com/statics/min/cssies.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;/&gt;        &lt;script src=&quot;http://static.cssmoban.com/statics/min/jsies.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;    &lt;![endif]--&gt;    &lt;/head&gt;&lt;body&gt;        &lt;section class=&quot;page-top&quot;&gt;            &lt;div class=&quot;asdsdsd&quot;&gt;                &lt;div class=&quot;logo&quot;&gt;container&lt;a href=&quot;/&quot;&gt;模板之家&lt;/a&gt;&lt;/div&gt;                    &lt;nav class=&quot;menu&quot;&gt;                        &lt;ul&gt;                            &lt;li&gt;&lt;a href=&quot;/&quot; target=&quot;_parent&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/cssthemes/&quot; class=&quot;active&quot; target=&quot;_parent&quot;&gt;网站模板&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/wpthemes/&quot; class=&quot;active&quot; target=&quot;_parent&quot;&gt;WP模板&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/tags.asp&quot; target=&quot;_parent&quot;&gt;模板标签&lt;/a&gt;&lt;/li&gt;                                &lt;script src=&quot;http://www.cssmoban.com/statics/js/20170901.js?v4&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;                        &lt;/ul&gt;                    &lt;/nav&gt;            &lt;div class=&quot;search&quot;&gt;                &lt;div class=&quot;bdcs-search&quot;&gt;                    &lt;form id=&quot;1&quot; class=&quot;search-form&quot; action=&quot;http://so.cssmoban.com/cse/search&quot; target=&quot;_blank&quot;&gt;                        &lt;input name=&quot;keywords&quot; type=&quot;hidden&quot; value=&quot;7097020869459475331&quot; /&gt;                        &lt;input name=&quot;q&quot; type=&quot;text&quot; class=&quot;form-control search-form-input&quot; id=&quot;q&quot; placeholder=&quot;请输入关键词...&quot; size=&quot;28&quot; /&gt;                        &lt;input id=&quot;1&quot; class=&quot;2&quot; type=&quot;submit&quot; value=&quot;搜索&quot; /&gt;                    &lt;/form&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/section&gt;    &lt;/body&gt;&lt;/html&gt;&#39;&#39;&#39;import lxmlfrom bs4 import BeautifulSoupsoup = BeautifulSoup(html,&#39;lxml&#39;)print(type(soup.find_all(text=&#39;首页&#39;)[0]))</code></pre><pre><code class="lang-shell">    &lt;class &#39;bs4.element.NavigableString&#39;&gt;</code></pre><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><pre><code class="lang-python">html =&#39;&#39;&#39; &lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;title&gt;sufee Admin后台管理员系统模板_模板之家cssMoban.com&lt;/title&gt;            &lt;meta http-equiv=Content-Type content=&quot;text/html; charset=utf-8&quot;&gt;            &lt;meta name=&quot;keywords&quot; content=&quot;网页模板,网站模板,DIV+CSS模板,CSS模板,企业网站模板下载&quot; /&gt;            &lt;meta name=&quot;description&quot; content=&quot;sufee Admin后台管理员系统模板演示 下载,精品网页模板、企业网站模板、博客模板等几千种免费网页模板下载尽在模板之家cssMoban.com&quot; /&gt;            &lt;link rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; href=&quot;/favicon.ico&quot; /&gt;            &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;http://static.cssmoban.com/statics/min/styles.css?v2&quot; /&gt;            &lt;script src=&quot;http://static.cssmoban.com/statics/min/lazys.js?v2&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;    &lt;/head&gt;&lt;body&gt;        &lt;section class=&quot;page-top&quot;&gt;            &lt;div class=&quot;logo1&quot;&gt;                &lt;div class=&quot;logo&quot;&gt;container&lt;a href=&quot;/&quot;&gt;模板之家&lt;/a&gt;&lt;/div&gt;                    &lt;nav class=&quot;menu&quot;&gt;                        &lt;ul&gt;                            &lt;li&gt;&lt;a href=&quot;/&quot; target=&quot;_parent&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/cssthemes/&quot; class=&quot;active&quot; target=&quot;_parent&quot;&gt;网站模板&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/wpthemes/&quot; class=&quot;active&quot; target=&quot;_parent&quot;&gt;WP模板&lt;/a&gt;&lt;/li&gt;                            &lt;li&gt;&lt;a href=&quot;/tags.asp&quot; target=&quot;_parent&quot;&gt;模板标签&lt;/a&gt;&lt;/li&gt;                                &lt;script src=&quot;http://www.cssmoban.com/statics/js/20170901.js?v4&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;                        &lt;/ul&gt;                    &lt;/nav&gt;            &lt;div id=&quot;1&quot; class=&quot;search&quot;&gt;                &lt;div class=&quot;bdcs-search&quot;&gt;                    &lt;form id=&quot;1&quot; class=&quot;search-form&quot; action=&quot;http://so.cssmoban.com/cse/search&quot; target=&quot;_blank&quot;&gt;                        &lt;input name=&quot;keywords&quot; type=&quot;hidden&quot; value=&quot;7097020869459475331&quot; /&gt;                        &lt;input name=&quot;q&quot; type=&quot;text&quot; class=&quot;form-control search-form-input&quot; id=&quot;q&quot; placeholder=&quot;请输入关键词...&quot; size=&quot;28&quot; /&gt;                        &lt;input id=&quot;1&quot; class=&quot;2&quot; type=&quot;submit&quot; value=&quot;搜索&quot; /&gt;                    &lt;/form&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/section&gt;    &lt;/body&gt;&lt;/html&gt;&#39;&#39;&#39;import lxmlfrom bs4 import BeautifulSoupsoup = BeautifulSoup(html,&#39;lxml&#39;)# class .(?)print(soup.select(&#39;.logo1 .logo&#39;))# 标签print(soup.select(&#39;ul li&#39;))# id  print(soup.find(id=&#39;1&#39;))# print(soup.select(&#39;#1&#39;))</code></pre><pre><code class="lang-shell">    [&lt;div class=&quot;logo&quot;&gt;container&lt;a href=&quot;/&quot;&gt;模板之家&lt;/a&gt;&lt;/div&gt;]    [&lt;li&gt;&lt;a href=&quot;/&quot; target=&quot;_parent&quot;&gt;首页&lt;/a&gt;&lt;/li&gt;, &lt;li&gt;&lt;a class=&quot;active&quot; href=&quot;/cssthemes/&quot; target=&quot;_parent&quot;&gt;网站模板&lt;/a&gt;&lt;/li&gt;, &lt;li&gt;&lt;a class=&quot;active&quot; href=&quot;/wpthemes/&quot; target=&quot;_parent&quot;&gt;WP模板&lt;/a&gt;&lt;/li&gt;, &lt;li&gt;&lt;a href=&quot;/tags.asp&quot; target=&quot;_parent&quot;&gt;模板标签&lt;/a&gt;&lt;/li&gt;]    &lt;div class=&quot;search&quot; id=&quot;1&quot;&gt;    &lt;div class=&quot;bdcs-search&quot;&gt;    &lt;form action=&quot;http://so.cssmoban.com/cse/search&quot; class=&quot;search-form&quot; id=&quot;1&quot; target=&quot;_blank&quot;&gt;    &lt;input name=&quot;keywords&quot; type=&quot;hidden&quot; value=&quot;7097020869459475331&quot;/&gt;    &lt;input class=&quot;form-control search-form-input&quot; id=&quot;q&quot; name=&quot;q&quot; placeholder=&quot;请输入关键词...&quot; size=&quot;28&quot; type=&quot;text&quot;/&gt;    &lt;input class=&quot;2&quot; id=&quot;1&quot; type=&quot;submit&quot; value=&quot;搜索&quot;/&gt;    &lt;/form&gt;    &lt;/div&gt;    &lt;/div&gt;    ---------------------------------------------------------------------------    AttributeError                            Traceback (most recent call last)    &lt;ipython-input-2-f07e167d42ca&gt; in &lt;module&gt;         49 # print(soup.select(&#39;#1&#39;))         50     ---&gt; 51 print(html.xpath(&#39;//div&#39;))    AttributeError: &#39;str&#39; object has no attribute &#39;xpath&#39;</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><blockquote><p>推荐使用lxml解析库，必要时使用html.parser<br>标签选择筛选功能弱但是速度快<br>建议使用find()、find_all() 查询匹配单个结果或者多个结果<br>如果对CSS选择器熟悉建议使用select0<br>记住常用的获取属性和文本值的方法  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate-HQL(Hibernate Query Language)</title>
      <link href="//387c2947.html"/>
      <url>//387c2947.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>面向对象的数据查询,直接使用实体类的属性实现查询。</p></blockquote><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><blockquote><p>将表格信息修改为 JavaBean 信息</p></blockquote><ul><li>SQL</li></ul><pre><code class="lang-sql">select  &lt;cloums&gt; from &lt;table-name&gt; where &lt;id&gt; = ?</code></pre><ul><li>HQL</li></ul><pre><code class="lang-sql">select &lt;class.属性&gt; from &lt;class-name&gt;  as s where &lt;s.属性&gt;=?</code></pre><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><pre><code class="lang-java">// 1. 创建 session 对象Configuration configuration = new Configuration().configure();SessionFactory sessionFactory = configuration.buildSessionFactory();Session session = sessionFactory.openSession();// 2. 创建查询对象Query query = session.createQuery(hql);// 3. 执行查询方法，获取数据List&lt;Student&gt; list = query.list();</code></pre><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="from"><a href="#from" class="headerlink" title="from"></a>from</h3><pre><code class="lang-sql">  from Student // 从 Student 关联的 数据表进行查询</code></pre><pre><code class="lang-sql">  from Student as s // 表格取别名</code></pre><pre><code class="lang-sql">  from Student s //省略 as</code></pre><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><pre><code class="lang-sql">  select s from Student as s // 查询全部信息</code></pre><pre><code class="lang-sql">  select s.id, s.name from Student as s // 查询相应属性</code></pre><pre><code class="lang-sql">  select new Student(s.id,s.name) from Student s// 将数据封装成对象,必须有相应的构造函数</code></pre><h3 id="where-amp-不同参数的设置形式"><a href="#where-amp-不同参数的设置形式" class="headerlink" title="where &amp; 不同参数的设置形式"></a>where &amp; 不同参数的设置形式</h3><pre><code class="lang-sql">  where s.age between 18 and 20</code></pre><pre><code class="lang-sql">  where s.age between  :ageMin and :ageMax</code></pre><blockquote><p>使用 <code>:name</code> 的形式 设置HQL 中参数</p><p>运用 query.setParameter(“name”, value); 的方式设置变量的值</p></blockquote><pre><code class="lang-sql">  where s.age between  ? and ?</code></pre><blockquote><p>使用 <code>?</code> 的形式设置 参数</p><p>则运用  query.setParameter(index, value); 的形式设置变量的值，下标从 0 开始</p></blockquote><pre><code class="lang-sql">  where s.age in (:ids)</code></pre><blockquote><p>query.setParameterList(“ids”, int []{1,2,3,4,4}); 设置集合参数</p></blockquote><h3 id="统计函数"><a href="#统计函数" class="headerlink" title="统计函数"></a>统计函数</h3><blockquote><p>min(), max(), avg(), count(),</p></blockquote><pre><code class="lang-sql">  select count( * ) from Strudent</code></pre><pre><code class="lang-sql">  select min(s.id) from Student s</code></pre><h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><blockquote><ul><li>asc 升序 (默认)</li><li>desc 降序</li></ul></blockquote><pre><code class="lang-sql">  where s.age&gt; 20 order by s.name desc</code></pre><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><blockquote><ul><li>内连接 inner (<strong>inner join</strong>) - inner 可以省略</li><li>外连接 outer (<strong>outer join , left outer join , right outer join </strong>) - outer 可以省略</li></ul></blockquote><pre><code class="lang-sql">  select s.name , d.name from Student s [inner] join s.classes d;</code></pre><pre><code class="lang-sql">  select s.name , d.name from Student s left [outer] join s.classes d;</code></pre><h3 id="distinct-过滤掉重复值"><a href="#distinct-过滤掉重复值" class="headerlink" title="distinct 过滤掉重复值"></a>distinct 过滤掉重复值</h3><pre><code class="lang-sql">  select distinct s.age from Student s</code></pre><h2 id="Query使用"><a href="#Query使用" class="headerlink" title="Query使用"></a>Query使用</h2><ul><li>creatQuery(HQL);</li><li>list() : 返回List 查询结果</li><li>setMaxResults() ： 返回最大记录书</li><li>setParameterList()</li><li>uniqueResult() ： 返回Object 类，当查询结果只有一个时</li><li>excuteUpdate() : 执行 update 和 delete 语句。</li></ul><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ul><li>setFirstResult() : 起始位置，从 0 开始</li><li>setMaxResults() ： 每页记录数</li></ul><pre><code class="lang-java">Query query = session.creatQuery(&quot;from Student s order by s.id&quot;);query.setFirstResult((pageNum -1) * pageSize);</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Hibernate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络编程练习</title>
      <link href="//e252efa0.html"/>
      <url>//e252efa0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote></blockquote><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><pre><code class="lang-java">// ServerSocket 会等待 客户端发送请求，，一旦接收到请求会创建一个 Socket 与 客户端进行通讯ServerSocket serverSocket = new ServerSocket(8888);System.out.println(&quot;======   ServerStart    =====&quot;);// 等待客户端发送请求Socket socket =  serverSocket.accept();// 客户端发送请求后，返回 socket 进行通讯// 获取数据输入流，读取数据InputStream inputStream = socket.getInputStream();byte [] b = new byte[1024];int len;len = inputStream.read(b);System.out.println(new String(b,0,len));// 获取数据输出流，发送数据OutputStream outputStream = socket.getOutputStream();outputStream.write(&quot;你好客户端！&quot;.getBytes());outputStream.close();inputStream.close();serverSocket.close();</code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre><code class="lang-java">try &#123;    Socket socket = new Socket(&quot;127.0.0.1&quot;, 8888);    //使用Socket 的字节输出流    OutputStream outputStream = socket.getOutputStream();    //使用字节输出流 向服务器发送数据    outputStream.write(&quot;你好服务器!&quot;.getBytes());    // 获取字节输入流，读取服务器发送的数据    InputStream inputStream = socket.getInputStream();    byte[] b = new byte[1024];    int len = inputStream.read(b);    System.out.println(new String(b,0,len));    outputStream.close();&#125;catch (IOException e)&#123;    System.out.println(&quot;Error:&quot;+e.toString());&#125;</code></pre><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><blockquote><p>先启动服务器，服务器需要获取到网络输入流的内容，并使用本地输出流将获取到的内容保存到服务器</p><p>客户端需要使用文件输入流将本地的文件读取出来，使用网络输出流将数据传递到服务器</p></blockquote><h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><pre><code class="lang-java">package test;import testPro.Pro;import java.io.*;import java.net.ServerSocket;import java.net.Socket;public class ServerSocketTest &#123;    public static void main(String[] args) &#123;        try&#123;            //请求 客户端Socket对象            ServerSocket serverSocket =  new ServerSocket(8888);            //获取Socket对象            Socket socket = serverSocket.accept();            Pro.upLoad(socket,&quot;/Server.txt&quot;);            serverSocket.close();        &#125; catch (IOException e) &#123;            System.out.println(&quot;ServerSocket Error:&quot;+e.toString());        &#125;    &#125;&#125;</code></pre><pre><code class="lang-java">package testPro;import java.io.*;import java.net.ServerSocket;import java.net.Socket;import java.util.Random;/** * @author LiYang * @Project Name: bilibili * @Package Name: testPro * Created by MacBook Air on 2020/02/29. * Copyright © 2020 LiYang. All rights reserved. */public class Pro &#123;    public static void main(String[] args) &#123;        while (true)&#123;        /*            自定义一个文件的命名规则，防止文件被覆盖掉            规则：域名+毫秒值 + 随机数        */        String fileName = &quot;/Server&quot;+System.currentTimeMillis() + new Random().nextInt(9999)+&quot;.txt&quot;;        /*            让服务器一直处于监听状态 （死循环方法）            上传文件 -&gt; 创建一个线程         */            try&#123;                //请求 客户端Socket对象                ServerSocket serverSocket =  new ServerSocket(8888);                //获取Socket对象                Socket socket = serverSocket.accept();                new Thread(() -&gt; &#123;                    try &#123;                        upLoad(socket,fileName);                    &#125; catch (IOException e) &#123;                        e.printStackTrace();                    &#125;                &#125;).start();                serverSocket.close();            &#125; catch (                    IOException e) &#123;                System.out.println(&quot;ServerSocket Error:&quot;+e.toString());            &#125;        &#125;    &#125;    // 完成数据的保存    public static void upLoad(Socket socket,String filename) throws IOException &#123;        InputStream inputStream = socket.getInputStream();        File file = new File(&quot;网络/src/test/&quot;);        if(!file.exists())&#123;            file.mkdir();        &#125;        //创建本地输出流对象        FileOutputStream fileOutputStream = new FileOutputStream(file + filename);        byte [] b = new byte[1024];        int len =0;        while ((len = inputStream.read(b)) != -1)&#123;            //保存到服务器的磁盘上            fileOutputStream.write(b,0,len);        &#125;        //获取网络输出流        OutputStream outputStream = socket.getOutputStream();        //给客户端回写        outputStream.write(&quot;文件接收成功！&quot;.getBytes());        fileOutputStream.close();        socket.close();    &#125;&#125;</code></pre><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><pre><code class="lang-java">package test;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.Socket;public class SocketTest &#123;    public static void main(String[] args) &#123;        try&#123;            //创建本地输入流            FileInputStream fileInputStream = new FileInputStream(&quot;网络/src/test/Socket.txt&quot;);            //创建客户端对象            Socket socket = new Socket(&quot;127.0.0.1&quot;,8888);            //获取网络字节输出流对象            OutputStream outputStream = socket.getOutputStream();            int len;            byte [] b = new byte[1024];            //读取本地文件            while ((len = fileInputStream.read(b))!= -1)&#123;                //上传到服务器                outputStream.write(b,0,len);            &#125;            // 只关闭输出流            socket.shutdownOutput();            //获取网络字节输入流            InputStream inputStream = socket.getInputStream();            //读取服务器回写数据            len = inputStream.read(b);            System.out.println(new String(b,0,len));            //释放资源            fileInputStream.close();            socket.close();        &#125;catch (IOException e)&#123;            System.out.println(&quot;Socket Error:&quot;+e.toString());        &#125;    &#125;&#125;</code></pre><h2 id="B-S-模式模拟"><a href="#B-S-模式模拟" class="headerlink" title="B/S 模式模拟"></a>B/S 模式模拟</h2><blockquote><p>访问路径 <code>http://localhost:8080/Server.txt</code></p></blockquote><pre><code class="lang-java">package Net;import java.io.*;import java.net.ServerSocket;import java.net.Socket;/** * @author LiYang * @Project Name: bilibili * @Package Name: Net * Created by MacBook Air on 2020/02/29. * Copyright © 2020 LiYang. All rights reserved. * B/S 版本的Server服务器 * http://localhost:8080/Server.txt */public class NetTest &#123;    public static void main(String[] args) &#123;        try&#123;            // 创建服务器对象，并且设置端口号为 8080            ServerSocket serverSocket = new ServerSocket(8080);            while(true)&#123;                // 监听客户端发送请求                Socket socket = serverSocket.accept();                InputStream  inputStream = socket.getInputStream();                OutputStream outputStream =  socket.getOutputStream();                // 设置响应的相关数据                outputStream.write(&quot;HTTP/1.1 200 OK\r\n&quot;.getBytes());                // 设置编码格式                outputStream.write(&quot;Content-Type:text/html;charset=utf-8\r\n&quot;.getBytes());                outputStream.write(&quot;\r\n&quot;.getBytes());                try&#123;                    // 获取请求的URL                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));                    String url = bufferedReader.readLine();                    System.out.println(url);                    String [] arr = url.split(&quot; &quot;);                    // 裁剪出 需要获取的文件信息                    String file = arr[1].substring(1);                    System.out.println(file);                    FileInputStream fileInputStream = new FileInputStream(&quot;./网络/src/Net/&quot; + file);                    int len ;                    byte[] bytes = new byte[1024];                    while ((len = fileInputStream.read(bytes))!= -1)&#123;                        outputStream.write(bytes,0,len);                    &#125;                &#125;catch (Exception e) &#123;                    e.printStackTrace();                    // 如果发生错误，将错误信息返回到浏览器                    outputStream.write(e.getMessage().getBytes());                &#125;finally &#123;                    outputStream.close();                    socket.close();                &#125;            &#125;        &#125;catch (IOException e)&#123;            System.out.println(e.toString());        &#125;    &#125;&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>主要内容是 <code>Socket &amp; ServerSocket</code> 类的使用，配合数据流完成数据内容的传输。</p><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3><ol><li>构造方法</li></ol><ul><li><p>public Socket(<a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/lang/String.html">String</a> host, int port)       throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/net/UnknownHostException.html">UnknownHostException</a>, IOException</p></li><li><p><a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/lang/Deprecated.html">@Deprecated</a> public Socket(<a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/lang/String.html">String</a> host, int port, boolean stream)       throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/IOException.html">IOException</a></p><p><strong>Deprecated.</strong></p><p>Use DatagramSocket instead for UDP transport.</p></li></ul><ol><li>方法</li></ol><ul><li>public <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/InputStream.html">InputStream</a> getInputStream()                           throws IOException</li><li>public <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/OutputStream.html">OutputStream</a> getOutputStream()                             throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/IOException.html">IOException</a></li><li>public void shutdownInput()                   throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/IOException.html">IOException</a></li><li>public void shutdownOutput()                    throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/IOException.html">IOException</a></li><li>public boolean isInputShutdown()</li><li>public boolean isOutputShutdown()</li></ul><h3 id="ServerSocket"><a href="#ServerSocket" class="headerlink" title="ServerSocket"></a>ServerSocket</h3><ol><li>构造方法</li></ol><ul><li>public ServerSocket(int port, int backlog)             throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/IOException.html">IOException</a></li><li>public ServerSocket(int port)             throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/IOException.html">IOException</a></li></ul><ol><li>方法</li></ol><ul><li><p>public <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/net/Socket.html">Socket</a> accept()              throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/IOException.html">IOException</a></p><p>Listens for a connection to be made to this socket and accepts it. The method blocks until a connection is made.</p></li><li><p>public void close()           throws <a href="dfile:///Users/mac/Library/Application Support/Dash/DocSets/Java_SE13/Java.docset/Contents/Resources/Documents/java.base/java/io/IOException.html">IOException</a></p></li><li><p>public boolean isClosed()</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json</title>
      <link href="//cb358a7b.html"/>
      <url>//cb358a7b.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><code>Json</code> 的基本使用 </p></blockquote><h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><h3 id="JSONUtil"><a href="#JSONUtil" class="headerlink" title="JSONUtil"></a>JSONUtil</h3><pre><code class="lang-java">JSONUtil.getaByPath(JSONUtil.parse(&quot;json_string&quot;, &quot;jsong_key&quot;)); // 获取 json字符串中的值JSONObject.put(&quot;key&quot;,&quot;values&quot;);JSONObject.toJSONString(class);  // 对象转 JSONObjectjsonobject.toJavaObject(class.class); // JSONObject 对象 转换成 类</code></pre><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC</title>
      <link href="//ae0f95e0.html"/>
      <url>//ae0f95e0.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><code>Spring MVC</code> <code>如何使用？</code> <code>Spring MVC REST</code> <code>Spring MVC 文件上传下载</code> <code>Spring MVC 表单标签库</code> <code>Spring MVC 数据校验</code></p></blockquote><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><p>Spring MVC 是目前主流的实现 MVC 设计模式的企业级开发框架，Spring 框架的一个子模块，无需整合，开发起来更加便捷。</p><h4 id="什么是-MVC-设计模式？"><a href="#什么是-MVC-设计模式？" class="headerlink" title="什么是 MVC 设计模式？"></a>什么是 MVC 设计模式？</h4><p>将应用程序分为 Controller、Model、View 三层，Controller 接收客户端请求，调用 Model 生成业务数据，传递给 View。</p><p>Spring MVC 就是对这套流程的封装，屏蔽了很多底层代码，开放出接口，让开发者可以更加轻松、便捷地完成基于 MVC 模式的 Web 开发。</p><h4 id="Spring-MVC-的核心组件"><a href="#Spring-MVC-的核心组件" class="headerlink" title="Spring MVC 的核心组件"></a>Spring MVC 的核心组件</h4><ul><li>DispatcherServlet：前置控制器，是整个流程控制的核心，控制其他组件的执行，进行统一调度，降低组件之间的耦合性，相当于总指挥。</li><li>Handler：处理器，完成具体的业务逻辑，相当于 Servlet 或 Action。</li><li>HandlerMapping：DispatcherServlet 接收到请求之后，通过 HandlerMapping 将不同的请求映射到不同的 Handler。</li><li>HandlerInterceptor：处理器拦截器，是一个接口，如果需要完成一些拦截处理，可以实现该接口。</li><li>HandlerExecutionChain：处理器执行链，包括两部分内容：Handler 和 HandlerInterceptor（系统会有一个默认的 HandlerInterceptor，如果需要额外设置拦截，可以添加拦截器）。</li><li>HandlerAdapter：处理器适配器，Handler 执行业务方法之前，需要进行一系列的操作，包括表单数据的验证、数据类型的转换、将表单数据封装到 JavaBean 等，这些操作都是由 HandlerApater 来完成，开发者只需将注意力集中业务逻辑的处理上，DispatcherServlet 通过 HandlerAdapter 执行不同的 Handler。</li><li>ModelAndView：装载了模型数据和视图信息，作为 Handler 的处理结果，返回给 DispatcherServlet。</li><li>ViewResolver：视图解析器，DispatcheServlet 通过它将逻辑视图解析为物理视图，最终将渲染结果响应给客户端。</li></ul><h4 id="Spring-MVC-的工作流程"><a href="#Spring-MVC-的工作流程" class="headerlink" title="Spring MVC 的工作流程"></a>Spring MVC 的工作流程</h4><ul><li>客户端请求被 DisptacherServlet 接收。</li><li>根据 HandlerMapping 映射到 Handler。</li><li>生成 Handler 和 HandlerInterceptor。</li><li>Handler 和 HandlerInterceptor 以 HandlerExecutionChain 的形式一并返回给 DisptacherServlet。</li><li>DispatcherServlet 通过 HandlerAdapter 调用 Handler 的方法完成业务逻辑处理。</li><li>Handler 返回一个 ModelAndView 给 DispatcherServlet。</li><li>DispatcherServlet 将获取的 ModelAndView 对象传给 ViewResolver 视图解析器，将逻辑视图解析为物理视图 View。</li><li>ViewResovler 返回一个 View 给 DispatcherServlet。</li><li>DispatcherServlet 根据 View 进行视图渲染（将模型数据 Model 填充到视图 View 中）。</li><li>DispatcherServlet 将渲染后的结果响应给客户端。</li></ul><p><img src="/Users/southwind/Library/Application Support/typora-user-images/image-20190313111136254.png" alt="image-20190313111136254"></p><p>Spring MVC 流程非常复杂，实际开发中很简单，因为大部分的组件不需要开发者创建、管理，只需要通过配置文件的方式完成配置即可，真正需要开发者进行处理的只有 Handler 、View。</p><h4 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h4><ul><li>创建 Maven 工程，pom.xml</li></ul><pre><code class="lang-xml">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;        &lt;version&gt;5.0.11.RELEASE&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><ul><li>在 web.xml 中配置 DispatcherServlet。</li></ul><pre><code class="lang-xml">&lt;!DOCTYPE web-app PUBLIC &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot; &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;&lt;web-app&gt;  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;      &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;      &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;    &lt;/init-param&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;&lt;/web-app&gt;</code></pre><ul><li>springmvc.xml</li></ul><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd       http://www.springframework.org/schema/mvc       http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd&quot;&gt;    &lt;!-- 自动扫描 --&gt;    &lt;context:component-scan base-package=&quot;com.southwind&quot;&gt;&lt;/context:component-scan&gt;    &lt;!-- 配置视图解析器 --&gt;    &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;        &lt;property name=&quot;prefix&quot; value=&quot;/&quot;&gt;&lt;/property&gt;        &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><ul><li>创建 Handler</li></ul><pre><code class="lang-java">package com.southwind.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controllerpublic class HelloHandler &#123;    @RequestMapping(&quot;/index&quot;)    public String index()&#123;        System.out.println(&quot;执行了index...&quot;);        return &quot;index&quot;;    &#125;&#125;</code></pre><h3 id="Spring-MVC-注解"><a href="#Spring-MVC-注解" class="headerlink" title="Spring MVC 注解"></a>Spring MVC 注解</h3><ul><li>@RequestMapping </li></ul><p>Spring MVC 通过 @RequestMapping 注解将 URL 请求与业务方法进行映射，在 Handler 的类定义处以及方法定义处都可以添加 @RequestMapping ，在类定义处添加，相当于客户端多了一层访问路径。</p><ul><li>@Controller</li></ul><p>@Controller 在类定义处添加，将该类交个 IoC 容器来管理（结合 springmvc.xml 的自动扫描配置使用），同时使其成为一个控制器，可以接收客户端请求。</p><pre><code class="lang-java">package com.southwind.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;@Controller@RequestMapping(&quot;/hello&quot;)public class HelloHandler &#123;    @RequestMapping(&quot;/index&quot;)    public String index()&#123;        System.out.println(&quot;执行了index...&quot;);        return &quot;index&quot;;    &#125;&#125;</code></pre><ul><li>@RequestMapping 相关参数</li></ul><p>1、value：指定 URL 请求的实际地址，是 @RequestMapping 的默认值。</p><pre><code class="lang-java">@RequestMapping(&quot;/index&quot;)public String index()&#123;    System.out.println(&quot;执行了index...&quot;);    return &quot;index&quot;;&#125;</code></pre><p>等于</p><pre><code class="lang-java">@RequestMapping(value=&quot;/index&quot;)public String index()&#123;    System.out.println(&quot;执行了index...&quot;);    return &quot;index&quot;;&#125;</code></pre><p>2、method：指定请求的 method 类型，GET、POST、PUT、DELET。</p><pre><code class="lang-java">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET)public String index()&#123;    System.out.println(&quot;执行了index...&quot;);    return &quot;index&quot;;&#125;</code></pre><p>上述代码表示 index 方法只能接收 GET 请求。</p><p>3、params：指定请求中必须包含某些参数，否则无法调用该方法。</p><pre><code class="lang-java">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET,params = &#123;&quot;name&quot;,&quot;id=10&quot;&#125;)public String index()&#123;    System.out.println(&quot;执行了index...&quot;);    return &quot;index&quot;;&#125;</code></pre><p>上述代码表示请求中必须包含 name 和 id 两个参数，同时 id 的值必须是 10。</p><p>关于参数绑定，在形参列表中通过添加 @RequestParam 注解完成 HTTP 请求参数与业务方法形参的映射。</p><pre><code class="lang-java">@RequestMapping(value = &quot;/index&quot;,method = RequestMethod.GET,params = &#123;&quot;name&quot;,&quot;id=10&quot;&#125;)public String index(@RequestParam(&quot;name&quot;) String str,@RequestParam(&quot;id&quot;) int age)&#123;    System.out.println(str);    System.out.println(age);    System.out.println(&quot;执行了index...&quot;);    return &quot;index&quot;;&#125;</code></pre><p>上述代码表示将请求的参数 name 和 id 分别赋给了形参 str 和 age ，同时自动完成了数据类型转换，将 “10” 转为了 int 类型的 10，再赋给 age，这些工作都是由 HandlerAdapter 来完成的。</p><p>Spring MVC 也支持 RESTful 风格的 URL。</p><p>传统类型：<a href="http://localhost:8080/hello/index?name=zhangsan&amp;id=10">http://localhost:8080/hello/index?name=zhangsan&amp;id=10</a></p><p>REST：<a href="http://localhost:8080/hello/index/zhangsan/10">http://localhost:8080/hello/index/zhangsan/10</a></p><pre><code class="lang-java">@RequestMapping(&quot;/rest/&#123;name&#125;/&#123;id&#125;&quot;)public String rest(@PathVariable(&quot;name&quot;) String name,@PathVariable(&quot;id&quot;) int id)&#123;    System.out.println(name);    System.out.println(id);    return &quot;index&quot;;&#125;</code></pre><p>通过 @PathVariable 注解完成请求参数与形参的映射。</p><ul><li>映射 Cookie</li></ul><p>Spring MVC 通过映射可以直接在业务方法中获取 Cookie 的值。</p><pre><code class="lang-java">@RequestMapping(&quot;/cookie&quot;)public String cookie(@CookieValue(value = &quot;JSESSIONID&quot;) String sessionId)&#123;    System.out.println(sessionId);    return &quot;index&quot;;&#125;</code></pre><ul><li>使用 JavaBean 绑定参数</li></ul><p>Spring MVC 会根据请求参数名和 JavaBean 属性名进行自动匹配，自动为对象填充属性值，同时支持及联属性。</p><pre><code class="lang-java">package com.southwind.entity;import lombok.Data;@Datapublic class Address &#123;    private String value;&#125;</code></pre><pre><code class="lang-java">package com.southwind.entity;import lombok.Data;@Datapublic class User &#123;    private long id;    private String name;    private Address address;&#125;</code></pre><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-13  Time: 15:33  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/hello/save&quot; method=&quot;post&quot;&gt;        用户id：&lt;input type=&quot;text&quot; name=&quot;id&quot;/&gt;&lt;br/&gt;        用户名：&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;&lt;br/&gt;        用户地址：&lt;input type=&quot;text&quot; name=&quot;address.value&quot;/&gt;&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;注册&quot;/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><pre><code class="lang-java">@RequestMapping(value = &quot;/save&quot;,method = RequestMethod.POST)public String save(User user)&#123;    System.out.println(user);    return &quot;index&quot;;&#125;</code></pre><p>如果出现中文乱码问题，只需在 web.xml 添加 Spring MVC 自带的过滤器即可。</p><pre><code class="lang-xml">&lt;filter&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;encodingFilter&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;</code></pre><ul><li>JSP 页面的转发和重定向：</li></ul><p>Spring MVC 默认是以转发的形式响应 JSP。</p><p>1、转发</p><pre><code class="lang-java">@RequestMapping(&quot;/forward&quot;)public String forward()&#123;    return &quot;forward:/index.jsp&quot;;    //        return &quot;index&quot;;&#125;</code></pre><p>2、重定向</p><pre><code class="lang-java">@RequestMapping(&quot;/redirect&quot;)public String redirect()&#123;    return &quot;redirect:/index.jsp&quot;;&#125;</code></pre><h3 id="Spring-MVC-数据绑定"><a href="#Spring-MVC-数据绑定" class="headerlink" title="Spring MVC 数据绑定"></a>Spring MVC 数据绑定</h3><p>数据绑定：在后端的业务方法中直接获取客户端 HTTP 请求中的参数，将请求参数映射到业务方法的形参中，Spring MVC 中数据绑定的工作是由 HandlerAdapter 来完成的。</p><ul><li>基本数据类型</li></ul><pre><code class="lang-java">@RequestMapping(&quot;/baseType&quot;)@ResponseBodypublic String baseType(int id)&#123;    return id+&quot;&quot;;&#125;</code></pre><p>@ResponseBody 表示 Spring MVC 会直接将业务方法的返回值响应给客户端，如果不加 @ResponseBody 注解，Spring MVC 会将业务方法的放回值传递给 DispatcherServlet，再由 DisptacherServlet 调用 ViewResolver 对返回值进行解析，映射到一个 JSP 资源。</p><ul><li>包装类</li></ul><pre><code class="lang-java">@RequestMapping(&quot;/packageType&quot;)@ResponseBodypublic String packageType(@RequestParam(value = &quot;num&quot;,required = false,defaultValue = &quot;0&quot;) Integer id)&#123;    return id+&quot;&quot;;&#125;</code></pre><p>包装类可以接收 null，当 HTTP 请求没有参数时，使用包装类定义形参的数据类型，程序不会抛出异常。</p><p>@RequestParam</p><p>value = “num”：将 HTTP 请求中名为 num 的参数赋给形参 id。</p><p>requried：设置 num 是否为必填项，true 表示必填，false 表示非必填，可省略。</p><p>defaultValue = “0”：如果 HTTP 请求中没有 num 参数，默认值为0.</p><ul><li>数组</li></ul><pre><code class="lang-java">@RestController@RequestMapping(&quot;/data&quot;)public class DataBindHandler &#123;    @RequestMapping(&quot;/array&quot;)    public String array(String[] name)&#123;        String str = Arrays.toString(name);        return str;    &#125;&#125;</code></pre><p>@RestController 表示该控制器会直接将业务方法的返回值响应给客户端，不进行视图解析。</p><p>@Controller 表示该控制器的每一个业务方法的返回值都会交给视图解析器进行解析，如果只需要将数据响应给客户端，而不需要进行视图解析，则需要在对应的业务方法定义处添加 @ResponseBody。</p><pre><code class="lang-java">@RestController@RequestMapping(&quot;/data&quot;)public class DataBindHandler &#123;    @RequestMapping(&quot;/array&quot;)    public String array(String[] name)&#123;        String str = Arrays.toString(name);        return str;    &#125;&#125;</code></pre><p>等同于</p><pre><code class="lang-java">@Controller@RequestMapping(&quot;/data&quot;)public class DataBindHandler &#123;    @RequestMapping(&quot;/array&quot;)    @ResponseBody    public String array(String[] name)&#123;        String str = Arrays.toString(name);        return str;    &#125;&#125;</code></pre><ul><li>List</li></ul><p>Spring MVC 不支持 List 类型的直接转换，需要对 List 集合进行包装。</p><p>集合封装类</p><pre><code class="lang-java">package com.southwind.entity;import lombok.Data;import java.util.List;@Datapublic class UserList &#123;    private List&lt;User&gt; users;&#125;</code></pre><p>JSP</p><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-14  Time: 09:12  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/data/list&quot; method=&quot;post&quot;&gt;        用户1编号：&lt;input type=&quot;text&quot; name=&quot;users[0].id&quot;/&gt;&lt;br/&gt;        用户1名称：&lt;input type=&quot;text&quot; name=&quot;users[0].name&quot;/&gt;&lt;br/&gt;        用户2编号：&lt;input type=&quot;text&quot; name=&quot;users[1].id&quot;/&gt;&lt;br/&gt;        用户2名称：&lt;input type=&quot;text&quot; name=&quot;users[1].name&quot;/&gt;&lt;br/&gt;        用户3编号：&lt;input type=&quot;text&quot; name=&quot;users[2].id&quot;/&gt;&lt;br/&gt;        用户3名称：&lt;input type=&quot;text&quot; name=&quot;users[2].name&quot;/&gt;&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>业务方法</p><pre><code class="lang-java">@RequestMapping(&quot;/list&quot;)public String list(UserList userList)&#123;    StringBuffer str = new StringBuffer();    for(User user:userList.getUsers())&#123;        str.append(user);    &#125;    return str.toString();&#125;</code></pre><p>处理 @ResponseBody 中文乱码，在 springmvc.xml 中配置消息转换器。</p><pre><code class="lang-xml">&lt;mvc:annotation-driven&gt;    &lt;!-- 消息转换器 --&gt;    &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;            &lt;property name=&quot;supportedMediaTypes&quot; value=&quot;text/html;charset=UTF-8&quot;&gt;&lt;/property&gt;        &lt;/bean&gt;    &lt;/mvc:message-converters&gt;&lt;/mvc:annotation-driven&gt;</code></pre><ul><li>Map</li></ul><p>自定义封装类</p><pre><code class="lang-java">package com.southwind.entity;import lombok.Data;import java.util.Map;@Datapublic class UserMap &#123;    private Map&lt;String,User&gt; users;&#125;</code></pre><p>业务方法</p><pre><code class="lang-java">@RequestMapping(&quot;/map&quot;)public String map(UserMap userMap)&#123;    StringBuffer str = new StringBuffer();    for(String key:userMap.getUsers().keySet())&#123;        User user = userMap.getUsers().get(key);        str.append(user);    &#125;    return str.toString();&#125;</code></pre><p>JSP</p><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-14  Time: 09:12  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/data/map&quot; method=&quot;post&quot;&gt;        用户1编号：&lt;input type=&quot;text&quot; name=&quot;users[&#39;a&#39;].id&quot;/&gt;&lt;br/&gt;        用户1名称：&lt;input type=&quot;text&quot; name=&quot;users[&#39;a&#39;].name&quot;/&gt;&lt;br/&gt;        用户2编号：&lt;input type=&quot;text&quot; name=&quot;users[&#39;b&#39;].id&quot;/&gt;&lt;br/&gt;        用户2名称：&lt;input type=&quot;text&quot; name=&quot;users[&#39;b&#39;].name&quot;/&gt;&lt;br/&gt;        用户3编号：&lt;input type=&quot;text&quot; name=&quot;users[&#39;c&#39;].id&quot;/&gt;&lt;br/&gt;        用户3名称：&lt;input type=&quot;text&quot; name=&quot;users[&#39;c&#39;].name&quot;/&gt;&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>JSON</li></ul><p>客户端发生 JSON 格式的数据，直接通过 Spring MVC 绑定到业务方法的形参中。</p><p>处理 Spring MVC 无法加载静态资源，在 web.xml 中添加配置即可。</p><pre><code class="lang-xml">&lt;servlet-mapping&gt;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.js&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><p>JSP</p><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-14  Time: 10:35  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;    &lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-3.3.1.min.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        $(function()&#123;           var user = &#123;               &quot;id&quot;:1,               &quot;name&quot;:&quot;张三&quot;           &#125;;           $.ajax(&#123;               url:&quot;/data/json&quot;,               data:JSON.stringify(user),               type:&quot;POST&quot;,               contentType:&quot;application/json;charset=UTF-8&quot;,               dataType:&quot;JSON&quot;,               success:function(data)&#123;                   alter(data.id+&quot;---&quot;+data.name);               &#125;           &#125;)        &#125;);    &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>业务方法</p><pre><code class="lang-java">@RequestMapping(&quot;/json&quot;)public User json(@RequestBody User user)&#123;    System.out.println(user);    user.setId(6);    user.setName(&quot;张六&quot;);    return user;&#125;</code></pre><p>Spring MVC 中的 JSON 和 JavaBean 的转换需要借助于 fastjson，pom.xml 引入相关依赖。</p><pre><code class="lang-xml">&lt;dependency&gt;    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;    &lt;version&gt;1.2.32&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>springmvc.xml 添加 fastjson 配置。</p><pre><code class="lang-xml">&lt;mvc:annotation-driven&gt;    &lt;!-- 消息转换器 --&gt;    &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;            &lt;property name=&quot;supportedMediaTypes&quot; value=&quot;text/html;charset=UTF-8&quot;&gt;&lt;/property&gt;        &lt;/bean&gt;        &lt;!-- 配置fastjson --&gt;        &lt;bean class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;&gt;&lt;/bean&gt;    &lt;/mvc:message-converters&gt;&lt;/mvc:annotation-driven&gt;</code></pre><h3 id="Spring-MVC-模型数据解析"><a href="#Spring-MVC-模型数据解析" class="headerlink" title="Spring MVC 模型数据解析"></a>Spring MVC 模型数据解析</h3><p>JSP 四大作用域对应的内置对象：pageContext、request、session、application。</p><p>模型数据的绑定是由 ViewResolver 来完成的，实际开发中，我们需要先添加模型数据，再交给 ViewResolver 来绑定。</p><p>Spring MVC 提供了以下几种方式添加模型数据：</p><ul><li>Map</li><li>Model</li><li>ModelAndView</li><li>@SessionAttribute</li><li>@ModelAttribute</li></ul><blockquote><p>将模式数据绑定到 request 对象。</p></blockquote><p>1、Map</p><pre><code class="lang-java">@RequestMapping(&quot;/map&quot;)public String map(Map&lt;String,User&gt; map)&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    map.put(&quot;user&quot;,user);    return &quot;view&quot;;&#125;</code></pre><p>JSP</p><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-14  Time: 11:36  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ page isELIgnored=&quot;false&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    $&#123;requestScope.user&#125;&lt;/body&gt;&lt;/html&gt;</code></pre><p>2、Model</p><pre><code class="lang-java">@RequestMapping(&quot;/model&quot;)public String model(Model model)&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    model.addAttribute(&quot;user&quot;,user);    return &quot;view&quot;;&#125;</code></pre><p>3、ModelAndView</p><pre><code class="lang-java">@RequestMapping(&quot;/modelAndView&quot;)public ModelAndView modelAndView()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    ModelAndView modelAndView = new ModelAndView();    modelAndView.addObject(&quot;user&quot;,user);    modelAndView.setViewName(&quot;view&quot;);    return modelAndView;&#125;@RequestMapping(&quot;/modelAndView2&quot;)public ModelAndView modelAndView2()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    ModelAndView modelAndView = new ModelAndView();    modelAndView.addObject(&quot;user&quot;,user);    View view = new InternalResourceView(&quot;/view.jsp&quot;);    modelAndView.setView(view);    return modelAndView;&#125;@RequestMapping(&quot;/modelAndView3&quot;)public ModelAndView modelAndView3()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    ModelAndView modelAndView = new ModelAndView(&quot;view&quot;);    modelAndView.addObject(&quot;user&quot;,user);    return modelAndView;&#125;@RequestMapping(&quot;/modelAndView4&quot;)public ModelAndView modelAndView4()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    View view = new InternalResourceView(&quot;/view.jsp&quot;);    ModelAndView modelAndView = new ModelAndView(view);    modelAndView.addObject(&quot;user&quot;,user);    return modelAndView;&#125;@RequestMapping(&quot;/modelAndView5&quot;)public ModelAndView modelAndView5()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    Map&lt;String,User&gt; map = new HashMap&lt;&gt;();    map.put(&quot;user&quot;,user);    ModelAndView modelAndView = new ModelAndView(&quot;view&quot;,map);    return modelAndView;&#125;@RequestMapping(&quot;/modelAndView6&quot;)public ModelAndView modelAndView6()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    Map&lt;String,User&gt; map = new HashMap&lt;&gt;();    map.put(&quot;user&quot;,user);    View view = new InternalResourceView(&quot;/view.jsp&quot;);    ModelAndView modelAndView = new ModelAndView(view,map);    return modelAndView;&#125;@RequestMapping(&quot;/modelAndView7&quot;)public ModelAndView modelAndView7()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    ModelAndView modelAndView = new ModelAndView(&quot;view&quot;,&quot;user&quot;,user);    return modelAndView;&#125;@RequestMapping(&quot;/modelAndView8&quot;)public ModelAndView modelAndView8()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    View view = new InternalResourceView(&quot;/view.jsp&quot;);    ModelAndView modelAndView = new ModelAndView(view,&quot;user&quot;,user);    return modelAndView;&#125;</code></pre><p>4、HttpServletRequest</p><pre><code class="lang-java">@RequestMapping(&quot;/request&quot;)public String request(HttpServletRequest request)&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    request.setAttribute(&quot;user&quot;,user);    return &quot;view&quot;;&#125;</code></pre><p>5、@ModelAttribute</p><ul><li>定义一个方法，该方法专门用来返回要填充到模型数据中的对象。</li></ul><pre><code class="lang-java">@ModelAttributepublic User getUser()&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    return user;&#125;</code></pre><pre><code class="lang-java">@ModelAttributepublic void getUser(Map&lt;String,User&gt; map)&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    map.put(&quot;user&quot;,user);&#125;</code></pre><pre><code class="lang-java">@ModelAttributepublic void getUser(Model model)&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    model.addAttribute(&quot;user&quot;,user);&#125;</code></pre><ul><li>业务方法中无需再处理模型数据，只需返回视图即可。</li></ul><pre><code class="lang-java">@RequestMapping(&quot;/modelAttribute&quot;)public String modelAttribute()&#123;    return &quot;view&quot;;&#125;</code></pre><blockquote><p>将模型数据绑定到 session 对象</p></blockquote><p>1、直接使用原生的 Servlet API。</p><pre><code class="lang-java">@RequestMapping(&quot;/session&quot;)public String session(HttpServletRequest request)&#123;    HttpSession session = request.getSession();    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    session.setAttribute(&quot;user&quot;,user);    return &quot;view&quot;;&#125;@RequestMapping(&quot;/session2&quot;)public String session2(HttpSession session)&#123;    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    session.setAttribute(&quot;user&quot;,user);    return &quot;view&quot;;&#125;</code></pre><p>2、@SessionAttribute</p><pre><code class="lang-java">@SessionAttributes(value = &#123;&quot;user&quot;,&quot;address&quot;&#125;)public class ViewHandler &#123;&#125;</code></pre><p>对于 ViewHandler 中的所有业务方法，只要向 request 中添加了 key = “user”、key = “address” 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p><pre><code class="lang-java">@SessionAttributes(types = &#123;User.class,Address.class&#125;)public class ViewHandler &#123;&#125;</code></pre><p>对于 ViewHandler 中的所有业务方法，只要向 request 中添加了数据类型是 User 、Address 的对象时，Spring MVC 会自动将该数据添加到 session 中，保存 key 不变。</p><blockquote><p>将模型数据绑定到 application 对象</p></blockquote><pre><code class="lang-java">@RequestMapping(&quot;/application&quot;)public String application(HttpServletRequest request)&#123;    ServletContext application = request.getServletContext();    User user = new User();    user.setId(1L);    user.setName(&quot;张三&quot;);    application.setAttribute(&quot;user&quot;,user);    return &quot;view&quot;;&#125;</code></pre><h3 id="Spring-MVC-自定义数据转换器"><a href="#Spring-MVC-自定义数据转换器" class="headerlink" title="Spring MVC 自定义数据转换器"></a>Spring MVC 自定义数据转换器</h3><p>数据转换器是指将客户端 HTTP 请求中的参数转换为业务方法中定义的形参，自定义表示开发者可以自主设计转换的方式，HandlerApdter 已经提供了通用的转换，String 转 int，String 转 double，表单数据的封装等，但是在特殊的业务场景下，HandlerAdapter 无法进行转换，就需要开发者自定义转换器。</p><p>客户端输入 String 类型的数据 “2019-03-03”，自定义转换器将该数据转为 Date 类型的对象。</p><ul><li>创建 DateConverter 转换器，实现 Conveter 接口。</li></ul><pre><code class="lang-java">package com.southwind.converter;import org.springframework.core.convert.converter.Converter;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Date;public class DateConverter implements Converter&lt;String, Date&gt; &#123;    private String pattern;    public DateConverter(String pattern)&#123;        this.pattern = pattern;    &#125;    @Override    public Date convert(String s) &#123;        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(this.pattern);        Date date = null;        try &#123;            date = simpleDateFormat.parse(s);        &#125; catch (ParseException e) &#123;            e.printStackTrace();        &#125;        return date;    &#125;&#125;</code></pre><ul><li>springmvc.xml 配置转换器。</li></ul><pre><code class="lang-xml">&lt;!-- 配置自定义转换器 --&gt;&lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;    &lt;property name=&quot;converters&quot;&gt;        &lt;list&gt;            &lt;bean class=&quot;com.southwind.converter.DateConverter&quot;&gt;                &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;yyyy-MM-dd&quot;&gt;&lt;/constructor-arg&gt;            &lt;/bean&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&gt;    &lt;!-- 消息转换器 --&gt;    &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;            &lt;property name=&quot;supportedMediaTypes&quot; value=&quot;text/html;charset=UTF-8&quot;&gt;&lt;/property&gt;        &lt;/bean&gt;        &lt;!-- 配置fastjson --&gt;        &lt;bean class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;&gt;&lt;/bean&gt;    &lt;/mvc:message-converters&gt;&lt;/mvc:annotation-driven&gt;</code></pre><ul><li>JSP</li></ul><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-14  Time: 14:47  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/converter/date&quot; method=&quot;post&quot;&gt;        请输入日期:&lt;input type=&quot;text&quot; name=&quot;date&quot;/&gt;(yyyy-MM-dd)&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>Handler</li></ul><pre><code class="lang-java">package com.southwind.controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.Date;@RestController@RequestMapping(&quot;/converter&quot;)public class ConverterHandler &#123;    @RequestMapping(&quot;/date&quot;)    public String date(Date date)&#123;        return date.toString();    &#125;&#125;</code></pre><p>String 转 Student</p><p>StudentConverter</p><pre><code class="lang-java">package com.southwind.converter;import com.southwind.entity.Student;import org.springframework.core.convert.converter.Converter;public class StudentConverter implements Converter&lt;String, Student&gt; &#123;    @Override    public Student convert(String s) &#123;        String[] args = s.split(&quot;-&quot;);        Student student = new Student();        student.setId(Long.parseLong(args[0]));        student.setName(args[1]);        student.setAge(Integer.parseInt(args[2]));        return student;    &#125;&#125;</code></pre><p>springmvc.xml</p><pre><code class="lang-xml">&lt;!-- 配置自定义转换器 --&gt;&lt;bean id=&quot;conversionService&quot; class=&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;    &lt;property name=&quot;converters&quot;&gt;        &lt;list&gt;            &lt;bean class=&quot;com.southwind.converter.DateConverter&quot;&gt;                &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;yyyy-MM-dd&quot;&gt;&lt;/constructor-arg&gt;            &lt;/bean&gt;            &lt;bean class=&quot;com.southwind.converter.StudentConverter&quot;&gt;&lt;/bean&gt;        &lt;/list&gt;    &lt;/property&gt;&lt;/bean&gt;&lt;mvc:annotation-driven conversion-service=&quot;conversionService&quot;&gt;    &lt;!-- 消息转换器 --&gt;    &lt;mvc:message-converters register-defaults=&quot;true&quot;&gt;        &lt;bean class=&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;&gt;            &lt;property name=&quot;supportedMediaTypes&quot; value=&quot;text/html;charset=UTF-8&quot;&gt;&lt;/property&gt;        &lt;/bean&gt;        &lt;!-- 配置fastjson --&gt;        &lt;bean class=&quot;com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4&quot;&gt;&lt;/bean&gt;    &lt;/mvc:message-converters&gt;&lt;/mvc:annotation-driven&gt;</code></pre><p>JSP</p><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-14  Time: 15:23  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/converter/student&quot; method=&quot;post&quot;&gt;        请输入学生信息：&lt;input type=&quot;text&quot; name=&quot;student&quot;/&gt;(id-name-age)&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;    &lt;/form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>Handler</p><pre><code class="lang-java">@RequestMapping(&quot;/student&quot;)public String student(Student student)&#123;    return student.toString();&#125;</code></pre><h3 id="Spring-MVC-REST"><a href="#Spring-MVC-REST" class="headerlink" title="Spring MVC REST"></a>Spring MVC REST</h3><p>REST：Representational State Transfer，资源表现层状态转换，是目前比较主流的一种互联网软件架构，它结构清晰、标准规范、易于理解、便于扩展。</p><ul><li>资源（Resource）</li></ul><p>网络上的一个实体，或者说网络中存在的一个具体信息，一段文本、一张图片、一首歌曲、一段视频等等，总之就是一个具体的存在。可以用一个 URI（统一资源定位符）指向它，每个资源都有对应的一个特定的 URI，要获取该资源时，只需要访问对应的 URI 即可。</p><ul><li>表现层（Representation）</li></ul><p>资源具体<strong>呈现出来的形式</strong>，比如文本可以用 txt 格式表示，也可以用 HTML、XML、JSON等格式来表示。</p><ul><li>状态转换（State Transfer）</li></ul><p>客户端如果希望操作服务器中的某个资源，就需要通过某种方式让服务端发生状态转换，而这种转换是建立在表现层之上的，所有叫做”表现层状态转换”。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>URL 更加简洁。</li><li>有利于不同系统之间的资源共享，只需要遵守一定的规范，不需要进行其他配置即可实现资源共享。</li></ul><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>REST 具体操作就是 HTTP 协议中四个表示操作方式的动词分别对应 CRUD 基本操作。</p><p>GET 用来表示获取资源。</p><p>POST 用来表示新建资源。</p><p>PUT 用来表示修改资源。</p><p>DELETE 用来表示删除资源。</p><p>Handler</p><pre><code class="lang-java">package com.southwind.controller;import com.southwind.entity.Student;import com.southwind.entity.User;import com.southwind.repository.StudentRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import org.springframework.web.bind.annotation.*;import javax.servlet.http.HttpServletResponse;import java.util.Collection;@RestController@RequestMapping(&quot;/rest&quot;)public class RESTHandeler &#123;    @Autowired    private StudentRepository studentRepository;    @GetMapping(&quot;/findAll&quot;)    public Collection&lt;Student&gt; findAll(HttpServletResponse response)&#123;        response.setContentType(&quot;text/json;charset=UTF-8&quot;);        return studentRepository.findAll();    &#125;    @GetMapping(&quot;/findById/&#123;id&#125;&quot;)    public Student findById(@PathVariable(&quot;id&quot;) long id)&#123;        return studentRepository.findById(id);    &#125;    @PostMapping(&quot;/save&quot;)    public void save(@RequestBody Student student)&#123;        studentRepository.saveOrUpdate(student);    &#125;    @PutMapping(&quot;/update&quot;)    public void update(@RequestBody Student student)&#123;        studentRepository.saveOrUpdate(student);    &#125;    @DeleteMapping(&quot;/deleteById/&#123;id&#125;&quot;)    public void deleteById(@PathVariable(&quot;id&quot;) long id)&#123;        studentRepository.deleteById(id);    &#125;&#125;</code></pre><p>StudentRepository</p><pre><code class="lang-java">package com.southwind.repository;import com.southwind.entity.Student;import java.util.Collection;public interface StudentRepository &#123;    public Collection&lt;Student&gt; findAll();    public Student findById(long id);    public void saveOrUpdate(Student student);    public void deleteById(long id);&#125;</code></pre><p>StudentRepositoryImpl</p><pre><code class="lang-java">package com.southwind.repository.impl;import com.southwind.entity.Student;import com.southwind.repository.StudentRepository;import org.springframework.stereotype.Repository;import java.util.Collection;import java.util.HashMap;import java.util.Map;@Repositorypublic class StudentRepositoryImpl implements StudentRepository &#123;    private static Map&lt;Long,Student&gt; studentMap;    static&#123;        studentMap = new HashMap&lt;&gt;();        studentMap.put(1L,new Student(1L,&quot;张三&quot;,22));        studentMap.put(2L,new Student(2L,&quot;李四&quot;,23));        studentMap.put(3L,new Student(3L,&quot;王五&quot;,24));    &#125;    @Override    public Collection&lt;Student&gt; findAll() &#123;        return studentMap.values();    &#125;    @Override    public Student findById(long id) &#123;        return studentMap.get(id);    &#125;    @Override    public void saveOrUpdate(Student student) &#123;        studentMap.put(student.getId(),student);    &#125;    @Override    public void deleteById(long id) &#123;        studentMap.remove(id);    &#125;&#125;</code></pre><h3 id="Spring-MVC-文件上传下载"><a href="#Spring-MVC-文件上传下载" class="headerlink" title="Spring MVC 文件上传下载"></a>Spring MVC 文件上传下载</h3><blockquote><p>单文件上传</p></blockquote><p>底层是使用 Apache fileupload 组件完成上传，Spring MVC 对这种方式进行了封装。</p><ul><li>pom.xml</li></ul><pre><code class="lang-xml">&lt;dependency&gt;    &lt;groupId&gt;commons-io&lt;/groupId&gt;    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;    &lt;version&gt;2.5&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;    &lt;version&gt;1.3.3&lt;/version&gt;&lt;/dependency&gt;</code></pre><ul><li>JSP</li></ul><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-15  Time: 09:09  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ page isELIgnored=&quot;false&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/file/upload&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;        &lt;input type=&quot;file&quot; name=&quot;img&quot;/&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot;/&gt;    &lt;/form&gt;    &lt;img src=&quot;$&#123;path&#125;&quot;&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><strong>1、input 的 type 设置为 file。</strong></p><p><strong>2、form 的 method 设置为 post（get 请求只能将文件名传给服务器）</strong></p><p><strong>3、from 的 enctype 设置为 multipart-form-data（如果不设置只能将文件名传给服务器）</strong></p><ul><li>Handler</li></ul><pre><code class="lang-java">package com.southwind.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import java.io.File;import java.io.IOException;@Controller@RequestMapping(&quot;/file&quot;)public class FileHandler &#123;    @PostMapping(&quot;/upload&quot;)    public String upload(MultipartFile img, HttpServletRequest request)&#123;        if(img.getSize()&gt;0)&#123;            //获取保存上传文件的file路径            String path = request.getServletContext().getRealPath(&quot;file&quot;);            //获取上传的文件名            String name = img.getOriginalFilename();            File file = new File(path,name);            try &#123;                img.transferTo(file);                //保存上传之后的文件路径                request.setAttribute(&quot;path&quot;,&quot;/file/&quot;+name);            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;        return &quot;upload&quot;;    &#125;&#125;</code></pre><ul><li>springmvc.xml</li></ul><pre><code class="lang-xml">&lt;!-- 配置上传组件 --&gt;&lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;&lt;/bean&gt;</code></pre><ul><li>web.xml 添加如下配置，否则客户端无法访问 png</li></ul><pre><code class="lang-xml">&lt;servlet-mapping&gt;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;    &lt;url-pattern&gt;*.png&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;</code></pre><blockquote><p>多文件上传</p></blockquote><p>pom.xml</p><pre><code class="lang-xml">&lt;dependency&gt;    &lt;groupId&gt;jstl&lt;/groupId&gt;    &lt;artifactId&gt;jstl&lt;/artifactId&gt;    &lt;version&gt;1.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;taglibs&lt;/groupId&gt;    &lt;artifactId&gt;standard&lt;/artifactId&gt;    &lt;version&gt;1.1.2&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>JSP</p><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-15  Time: 09:32  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ page isELIgnored=&quot;false&quot; %&gt;&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form action=&quot;/file/uploads&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;        file1:&lt;input type=&quot;file&quot; name=&quot;imgs&quot;/&gt;&lt;br/&gt;        file2:&lt;input type=&quot;file&quot; name=&quot;imgs&quot;/&gt;&lt;br/&gt;        file3:&lt;input type=&quot;file&quot; name=&quot;imgs&quot;&gt;&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;上传&quot;/&gt;    &lt;/form&gt;    &lt;c:forEach items=&quot;$&#123;files&#125;&quot; var=&quot;file&quot; &gt;        &lt;img src=&quot;$&#123;file&#125;&quot; width=&quot;300px&quot;&gt;    &lt;/c:forEach&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>Handler</p><pre><code class="lang-java">@PostMapping(&quot;/uploads&quot;)public String uploads(MultipartFile[] imgs,HttpServletRequest request)&#123;    List&lt;String&gt; files = new ArrayList&lt;&gt;();    for (MultipartFile img:imgs)&#123;        if(img.getSize()&gt;0)&#123;            //获取保存上传文件的file路径            String path = request.getServletContext().getRealPath(&quot;file&quot;);            //获取上传的文件名            String name = img.getOriginalFilename();            File file = new File(path,name);            try &#123;                img.transferTo(file);                //保存上传之后的文件路径                files.add(&quot;/file/&quot;+name);            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;    request.setAttribute(&quot;files&quot;,files);    return &quot;uploads&quot;;&#125;</code></pre><blockquote><p>下载</p></blockquote><ul><li>JSP</li></ul><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-15  Time: 10:36  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;a href=&quot;/file/download/1&quot;&gt;1.png&lt;/a&gt;    &lt;a href=&quot;/file/download/2&quot;&gt;2.png&lt;/a&gt;    &lt;a href=&quot;/file/download/3&quot;&gt;3.png&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><ul><li>Handler</li></ul><pre><code class="lang-java">@GetMapping(&quot;/download/&#123;name&#125;&quot;)public void download(@PathVariable(&quot;name&quot;) String name, HttpServletRequest request, HttpServletResponse response)&#123;    if(name != null)&#123;        name += &quot;.png&quot;;        String path = request.getServletContext().getRealPath(&quot;file&quot;);        File file = new File(path,name);        OutputStream outputStream = null;        if(file.exists())&#123;            response.setContentType(&quot;application/forc-download&quot;);            response.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=&quot;+name);            try &#123;                outputStream = response.getOutputStream();                outputStream.write(FileUtils.readFileToByteArray(file));                outputStream.flush();            &#125; catch (IOException e) &#123;                e.printStackTrace();            &#125; finally &#123;                if(outputStream != null)&#123;                    try &#123;                        outputStream.close();                    &#125; catch (IOException e) &#123;                        e.printStackTrace();                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="Spring-MVC-表单标签库"><a href="#Spring-MVC-表单标签库" class="headerlink" title="Spring MVC 表单标签库"></a>Spring MVC 表单标签库</h3><ul><li>Handler</li></ul><pre><code class="lang-java">@GetMapping(&quot;/get&quot;)public ModelAndView get()&#123;    ModelAndView modelAndView = new ModelAndView(&quot;tag&quot;);    Student student = new Student(1L,&quot;张三&quot;,22);    modelAndView.addObject(&quot;student&quot;,student);    return modelAndView;&#125;</code></pre><ul><li>JSP</li></ul><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-15  Time: 10:53  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ page isELIgnored=&quot;false&quot; %&gt;&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;学生信息&lt;/h1&gt;    &lt;form:form modelAttribute=&quot;student&quot;&gt;        学生ID：&lt;form:input path=&quot;id&quot;/&gt;&lt;br/&gt;        学生姓名：&lt;form:input path=&quot;name&quot;/&gt;&lt;br/&gt;        学生年龄：&lt;form:input path=&quot;age&quot;/&gt;&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;    &lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>1、JSP 页面导入 Spring MVC 表单标签库，与导入 JSTL 标签库的语法非常相似，前缀 prefix 可以自定义，通常定义为 from。</p><pre><code class="lang-jsp">&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;</code></pre><p>2、将 form 表单与模型数据进行绑定，通过 modelAttribute 属性完成绑定，将 modelAttribute 的值设置为模型数据对应的 key 值。</p><pre><code class="lang-java">Handeler:modelAndView.addObject(&quot;student&quot;,student);JSP:&lt;form:form modelAttribute=&quot;student&quot;&gt;</code></pre><p>3、form 表单完成绑定之后，将模型数据的值取出绑定到不同的标签中，通过设置标签的 path 属性完成，将 path 属性的值设置为模型数据对应的属性名即可。</p><pre><code class="lang-jsp">学生ID：&lt;form:input path=&quot;id&quot;/&gt;&lt;br/&gt;学生姓名：&lt;form:input path=&quot;name&quot;/&gt;&lt;br/&gt;学生年龄：&lt;form:input path=&quot;age&quot;/&gt;&lt;br/&gt;</code></pre><h4 id="常用的表单标签"><a href="#常用的表单标签" class="headerlink" title="常用的表单标签"></a>常用的表单标签</h4><ul><li>from</li></ul><pre><code class="lang-jsp">&lt;form:from modelAttribute=&quot;student&quot;/&gt;</code></pre><p>渲染的是 HTML 中的<code>&lt;form&gt;&lt;/from&gt;</code>，通过 modelAttribute 属性绑定具体的模型数据。</p><ul><li>input</li></ul><pre><code class="lang-jsp">&lt;form:input path=&quot;name&quot;/&gt;</code></pre><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;text&quot;/&gt;</code>，from 标签绑定的是模型数据，input 标签绑定的是模型数据中的属性值，通过 path 属性可以与模型数据中的属性名对应，并且支持及联操作。</p><pre><code class="lang-jsp">&lt;from:input path=&quot;address.name&quot;/&gt;</code></pre><ul><li>password</li></ul><pre><code class="lang-jsp">&lt;form:password path=&quot;password&quot;/&gt;</code></pre><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;password&quot;/&gt;</code>，通过 path 属性与模型数据的属性值进行绑定，password 标签的值不会在页面显示。</p><ul><li>checkbox</li></ul><pre><code class="lang-jsp">&lt;form:checkbox path=&quot;hobby&quot; value=&quot;读书&quot;/&gt;</code></pre><pre><code class="lang-java">student.setFlag(false);</code></pre><pre><code class="lang-jsp">checkbox：&lt;form:checkbox path=&quot;flag&quot; value=&quot;flag&quot;&gt;&lt;/form:checkbox&gt;&lt;br/&gt;</code></pre><p>渲染的是 HTML 中的 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，通过 path 与模型数据的属性值进行绑定，可以绑定 boolean、数组和集合。</p><p>如果绑定 boolean 值，若该变量的值为 true，则表示该复选框选中，否则表示不选中。</p><p>如果绑定数组或者集合，数组/集合中的元素等于 checkbox 的 value 值，则选中。</p><pre><code class="lang-java">student.setHobby(Arrays.asList(&quot;读书&quot;,&quot;看电影&quot;,&quot;玩游戏&quot;));modelAndView.addObject(&quot;student&quot;,student);</code></pre><pre><code class="lang-jsp">爱好：&lt;form:checkbox path=&quot;hobby&quot; value=&quot;摄影&quot;&gt;&lt;/form:checkbox&gt;摄影&lt;br/&gt;&lt;form:checkbox path=&quot;hobby&quot; value=&quot;读书&quot;&gt;&lt;/form:checkbox&gt;读书&lt;br/&gt;&lt;form:checkbox path=&quot;hobby&quot; value=&quot;听音乐&quot;&gt;&lt;/form:checkbox&gt;听音乐&lt;br/&gt;&lt;form:checkbox path=&quot;hobby&quot; value=&quot;看电影&quot;&gt;&lt;/form:checkbox&gt;看电影&lt;br/&gt;&lt;form:checkbox path=&quot;hobby&quot; value=&quot;旅游&quot;&gt;&lt;/form:checkbox&gt;旅游&lt;br/&gt;&lt;form:checkbox path=&quot;hobby&quot; value=&quot;玩游戏&quot;&gt;&lt;/form:checkbox&gt;玩游戏&lt;br/&gt;&lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;</code></pre><ul><li>checkboxes</li></ul><pre><code class="lang-jsp">&lt;form:checkboxes items=$&#123;student.hobby&#125; path=&quot;selecHobby&quot;/&gt;</code></pre><p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;checkbox&quot;/&gt;</code>，是对 <code>&lt;form:checkbox/&gt;</code> 的一种简化，需要结合 items 和 path 属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的集合或数组，可以这样理解，items 为全部可选集合，path 为默认的选中集合。</p><pre><code class="lang-java">class Student&#123;    List&lt;String&gt; Hobby;    List&lt;String&gt; selectHobby;&#125;student.setHobby(Arrays.asList(&quot;摄影&quot;,&quot;读书&quot;,&quot;听音乐&quot;,&quot;看电影&quot;,&quot;旅游&quot;,&quot;玩游戏&quot;));student.setSelectHobby(Arrays.asList(&quot;摄影&quot;,&quot;读书&quot;,&quot;听音乐&quot;));modelAndView.addObject(&quot;student&quot;,student);</code></pre><pre><code class="lang-jsp">爱好：&lt;form:checkboxes path=&quot;selectHobby&quot; items=&quot;$&#123;student.hobby&#125;&quot;/&gt;&lt;br/&gt;</code></pre><p>需要注意的是 <strong>path 可以直接绑定模型数据的属性值</strong>，</p><p><strong>items 则需要通过 EL 表达式</strong>的形式从域对象中获取数据，不能直接写属性名。</p><ul><li>rabiobutton  单选框</li></ul><pre><code class="lang-jsp">&lt;from:radiobutton path=&quot;radioId&quot; value=&quot;0&quot;/&gt;</code></pre><p>渲染的是 HTML 中的一个 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，绑定的数据与标签的 value 值相等则为选中，否则不选中。</p><pre><code class="lang-java">student.setRadioId(1);modelAndView.addObject(&quot;student&quot;,student);</code></pre><pre><code class="lang-jsp">radiobutton:&lt;form:radiobutton path=&quot;radioId&quot; value=&quot;1&quot;/&gt;radiobutton&lt;br/&gt;</code></pre><ul><li>radiobuttons</li></ul><pre><code class="lang-jsp">&lt;form:radiobuttons itmes=&quot;$&#123;student.grade&#125;&quot; path=&quot;selectGrade&quot;/&gt;</code></pre><p>渲染的是 HTML 中的一组 <code>&lt;input type=&quot;radio&quot;/&gt;</code>，这里需要集合 items 和 path 两个属性来使用，items 绑定被遍历的集合或数组，path 绑定被选中的值，items 为全部的可选类型，path 为默认选中的选项，用法与 <code>&lt;form:checkboxes/&gt;</code> 一致。</p><pre><code class="lang-java">Map&lt;Integer,String&gt; gradeMap = new HashMap&lt;&gt;();gradeMap.put(1,&quot;一年级&quot;);gradeMap.put(2,&quot;二年级&quot;);gradeMap.put(3,&quot;三年级&quot;);gradeMap.put(4,&quot;四年级&quot;);gradeMap.put(5,&quot;五年级&quot;);gradeMap.put(6,&quot;六年级&quot;);student.setGradeMap(gradeMap);student.setSelectGrade(3);modelAndView.addObject(&quot;student&quot;,student);</code></pre><pre><code class="lang-jsp">学生年级：&lt;form:radiobuttons items=&quot;$&#123;student.gradeMap&#125;&quot; path=&quot;selectGrade&quot;/&gt;&lt;br/&gt;</code></pre><ul><li>select</li></ul><pre><code class="lang-jsp">&lt;form:select items=&quot;$&#123;student.citys&#125;&quot; path=&quot;selectCity&quot;/&gt;</code></pre><p>渲染的是 HTML 中的一个 <code>&lt;select/&gt;</code> 标签，</p><p>需要结合 items 和 path 两个属性来使用，</p><p>items 绑定被遍历的集合或数组，</p><p>path 绑定被选中的值，用法与 <code>&lt;from:radiobuttons/&gt;</code>一致。</p><pre><code class="lang-java">Map&lt;Integer,String&gt; cityMap = new HashMap&lt;&gt;();cityMap.put(1,&quot;北京&quot;);cityMap.put(2,&quot;上海&quot;);cityMap.put(3,&quot;广州&quot;);cityMap.put(4,&quot;深圳&quot;);student.setCityMap(cityMap);student.setSelectCity(3);modelAndView.addObject(&quot;student&quot;,student);</code></pre><pre><code class="lang-jsp">所在城市：&lt;form:select items=&quot;$&#123;student.cityMap&#125;&quot; path=&quot;selectCity&quot;&gt;&lt;/form:select&gt;&lt;br/&gt;</code></pre><ul><li>options</li></ul><p><code>form:select</code> 结合 <code>form:options</code> 的使用，<code>from:select</code> 只定义 path 属性，在 <code>form:select</code> 标签内部添加一个子标签 <code>form:options</code> ，设置 items 属性，获取被遍历的集合。</p><pre><code class="lang-jsp">所在城市：&lt;form:select path=&quot;selectCity&quot;&gt;                  &lt;form:options items=&quot;$&#123;student.cityMap&#125;&quot;&gt;&lt;/form:options&gt;                &lt;/form:select&gt;&lt;br/&gt;</code></pre><ul><li><p>option</p><p><code>form:select</code> 结合 <code>form:option</code> 的使用，<code>from:select</code> 定义 path 属性，给每一个 <code>form:option</code> 设置 value 值，path 的值与哪个 value 值相等，该项默认选中。</p></li></ul><pre><code class="lang-jsp">所在城市：&lt;form:select path=&quot;selectCity&quot;&gt;            &lt;form:option value=&quot;1&quot;&gt;杭州&lt;/form:option&gt;            &lt;form:option value=&quot;2&quot;&gt;成都&lt;/form:option&gt;            &lt;form:option value=&quot;3&quot;&gt;西安&lt;/form:option&gt;        &lt;/form:select&gt;&lt;br/&gt;</code></pre><ul><li>textarea</li></ul><p>渲染的是 HTML 中的一个 <code>&lt;textarea/&gt;</code> ，path 绑定模型数据的属性值，作为文本输入域的默认值。</p><pre><code class="lang-java">student.setIntroduce(&quot;你好，我是...&quot;);modelAndView.addObject(&quot;student&quot;,student);</code></pre><pre><code class="lang-jsp">信息：&lt;form:textarea path=&quot;introduce&quot;/&gt;&lt;br/&gt;</code></pre><ul><li>errors</li></ul><p>处理错误信息，一般用在数据校验，该标签需要结合 Spring MVC 的<strong>验证器</strong>结合起来使用。</p><h3 id="Spring-MVC-数据校验"><a href="#Spring-MVC-数据校验" class="headerlink" title="Spring MVC 数据校验"></a>Spring MVC 数据校验</h3><p>Spring MVC 提供了两种数据校验的方式：1、基于 Validator 接口。2、使用 Annotation JSR - 303 标准进行校验。</p><p>基于 Validator 接口的方式需要自定义 Validator 验证器，每一条数据的验证规则需要开发者手动完成，使用 Annotation JSR - 303 标准则不需要自定义验证器，通过注解的方式可以直接在实体类中添加每个属性的验证规则，这种方式更加方便，实际开发中推荐使用。</p><blockquote><p>基于 Validator 接口</p></blockquote><ul><li>实体类 Account</li></ul><pre><code class="lang-java">package com.southwind.entity;import lombok.Data;@Datapublic class Account &#123;    private String name;    private String password;&#125;</code></pre><ul><li>自定义验证器 AccountValidator，实现 Validator 接口。</li></ul><pre><code class="lang-java">package com.southwind.validator;import com.southwind.entity.Account;import org.springframework.validation.Errors;import org.springframework.validation.ValidationUtils;import org.springframework.validation.Validator;public class AccountValidator implements Validator &#123;    //确定是否需要验证    @Override    public boolean supports(Class&lt;?&gt; aClass) &#123;        return Account.class.equals(aClass);    &#125;    //进行数据校验    @Override    public void validate(Object o, Errors errors) &#123;        //Errors存储错误信息，        ValidationUtils.rejectIfEmpty(errors,&quot;name&quot;,null,&quot;姓名不能为空&quot;);        ValidationUtils.rejectIfEmpty(errors,&quot;password&quot;,null,&quot;密码不能为空&quot;);    &#125;&#125;</code></pre><ul><li>控制器</li></ul><pre><code class="lang-java">package com.southwind.controller;import com.southwind.entity.Account;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;@Controller@RequestMapping(&quot;/validator&quot;)public class ValidatorHandler &#123;    //绑定前端数据    @GetMapping(&quot;/login&quot;)    public String login(Model model)&#123;        model.addAttribute(&quot;account&quot;,new Account());        return &quot;login&quot;;    &#125;    @PostMapping(&quot;/login&quot;)    //添加注解自动绑定验证 绑定结果集    public String login(@Validated Account account, BindingResult bindingResult)&#123;        if(bindingResult.hasErrors())&#123;            return &quot;login&quot;;        &#125;        return &quot;index&quot;;    &#125;&#125;</code></pre><ul><li>springmvc.xml 配置验证器。</li></ul><pre><code class="lang-xml">&lt;bean id=&quot;accountValidator&quot; class=&quot;com.southwind.validator.AccountValidator&quot;&gt;&lt;/bean&gt;&lt;mvc:annotation-driven validator=&quot;accountValidator&quot;&gt;&lt;/mvc:annotation-driven&gt;</code></pre><ul><li>JSP</li></ul><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-18  Time: 10:31  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ page isELIgnored=&quot;false&quot; %&gt;&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;&lt;%@ taglib prefix=&quot;from&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form:form modelAttribute=&quot;account&quot; action=&quot;/validator/login&quot; method=&quot;post&quot;&gt;        姓名：&lt;form:input path=&quot;name&quot;/&gt;&lt;from:errors path=&quot;name&quot;&gt;&lt;/from:errors&gt;&lt;br/&gt;        密码：&lt;form:input path=&quot;password&quot;/&gt;&lt;from:errors path=&quot;password&quot;&gt;&lt;/from:errors&gt;&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;    &lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><blockquote><p>Annotation JSR - 303 标准</p></blockquote><p>使用 Annotation JSR - 303 标准进行验证，需要导入支持这种标准的依赖 jar 文件，这里我们使用 Hibernate Validator。</p><ul><li>pom.xml</li></ul><pre><code class="lang-xml">&lt;!-- JSR-303 --&gt;&lt;dependency&gt;  &lt;groupId&gt;org.hibernate&lt;/groupId&gt;  &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;  &lt;version&gt;5.3.6.Final&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;javax.validation&lt;/groupId&gt;  &lt;artifactId&gt;validation-api&lt;/artifactId&gt;  &lt;version&gt;2.0.1.Final&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.jboss.logging&lt;/groupId&gt;  &lt;artifactId&gt;jboss-logging&lt;/artifactId&gt;  &lt;version&gt;3.3.2.Final&lt;/version&gt;&lt;/dependency&gt;</code></pre><ul><li>通过注解的方式直接在实体类中添加相关的验证规则。</li></ul><pre><code class="lang-java">package com.southwind.entity;import lombok.Data;import org.hibernate.validator.constraints.Email;import org.hibernate.validator.constraints.NotEmpty;import javax.validation.constraints.Pattern;import javax.validation.constraints.Size;@Datapublic class Person &#123;    @NotEmpty(message = &quot;用户名不能为空&quot;)    private String username;    @Size(min = 6,max = 12,message = &quot;密码6-12位&quot;)    private String password;    @Email(regexp = &quot;^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\\\\.[a-zA-Z0-9-]+)*\\\\.[a-zA-Z0-9]&#123;2,6&#125;$&quot;,message = &quot;请输入正确的邮箱格mr式&quot;)    private String email;    @Pattern(regexp = &quot;^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\\\\\\\d&#123;8&#125;$&quot;,message = &quot;请输入正确的电话&quot;)    private String phone;&#125;</code></pre><ul><li>ValidatorHandler</li></ul><pre><code class="lang-java">@GetMapping(&quot;/register&quot;)public String register(Model model)&#123;    model.addAttribute(&quot;person&quot;,new Person());    return &quot;register&quot;;&#125;@PostMapping(&quot;/register&quot;)public String register(@Valid Person person, BindingResult bindingResult)&#123;    if(bindingResult.hasErrors())&#123;        return &quot;register&quot;;    &#125;    return &quot;index&quot;;&#125;</code></pre><ul><li>springmvc.xml</li></ul><pre><code class="lang-xml">&lt;mvc:annotation-driven /&gt;</code></pre><ul><li>JSP</li></ul><pre><code class="lang-jsp">&lt;%--  Created by IntelliJ IDEA.  User: southwind  Date: 2019-03-18  Time: 11:29  To change this template use File | Settings | File Templates.--%&gt;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&lt;%@ page isELIgnored=&quot;false&quot; %&gt;&lt;%@ taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;&lt;html&gt;&lt;head&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;form:form modelAttribute=&quot;person&quot; action=&quot;/validator/register2&quot; method=&quot;post&quot;&gt;        用户名：&lt;form:input path=&quot;username&quot;&gt;&lt;/form:input&gt;&lt;form:errors path=&quot;username&quot;/&gt;&lt;br/&gt;        密码：&lt;form:password path=&quot;password&quot;&gt;&lt;/form:password&gt;&lt;form:errors path=&quot;password&quot;/&gt;&lt;br/&gt;        邮箱：&lt;form:input path=&quot;email&quot;&gt;&lt;/form:input&gt;&lt;form:errors path=&quot;email&quot;/&gt;&lt;br/&gt;        电话：&lt;form:input path=&quot;phone&quot;&gt;&lt;/form:input&gt;&lt;form:errors path=&quot;phone&quot;/&gt;&lt;br/&gt;        &lt;input type=&quot;submit&quot; value=&quot;提交&quot;/&gt;    &lt;/form:form&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>校验规则详解：</p><p>@Null                    被注解的元素必须为null</p><p>@NotNull                  被注解的元素不能为null</p><p>@Min(value)                 被注解的元素必须是一个数字，其值必须大于等于指定的最小值</p><p>@Max(value)                被注解的元素必须是一个数字，其值必须小于于等于指定的最大值    </p><p>@Email                     被注解的元素必须是电子邮箱地址</p><p>@Pattern                  被注解的元素必须符合对应的正则表达式</p><p>@Length                   被注解的元素的大小必须在指定的范围内</p><p>@NotEmpty                  被注解的字符串的值必须非空</p><p>Null 和 Empty 是不同的结果，String str = null，str 是 null，String str = “”，str 不是 null，其值为空。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-建造者模式</title>
      <link href="//2a48474d.html"/>
      <url>//2a48474d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>建造者模式学习</p></blockquote><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h2><p>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。</p><p>汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。</p><p>冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。</p><p>我们将创建一个表示食物条目（比如汉堡和冷饮）的 Item 接口和实现 Item 接口的实体类，以及一个表示食物包装的 Packing 接口和实现 Packing 接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中。</p><p>然后我们创建一个 Meal 类，带有 Item 的 ArrayList 和一个通过结合 Item 来创建不同类型的 Meal 对象的 MealBuilder。BuilderPatternDemo，我们的演示类使用 MealBuilder 来创建一个 Meal。</p><p><img src="https://gitee.com/KawYang/image/raw/master/img/20200712155953.png" alt=""></p><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h2><p>Computer 构建需要 主板、显卡、操作系统。</p><h3 id="arrow-double-up-Computer-抽象类"><a href="#arrow-double-up-Computer-抽象类" class="headerlink" title=":arrow_double_up: Computer 抽象类"></a>:arrow_double_up: Computer 抽象类</h3><p>包括 <code>mBoard</code>、<code>mDisplay</code>、<code>mOS</code> 三个成员变量。</p><pre><code class="lang-java">package 设计模式.创造者模式.computer;public abstract class Computer &#123;    protected String mBoard;    protected String mDisplay;    protected String mOs;    protected Computer()&#123;&#125;    public void setmBoard(String mBoard) &#123;        this.mBoard = mBoard;    &#125;    public void setmDisplay(String mDisplay) &#123;        this.mDisplay = mDisplay;    &#125;    public abstract void setOs();    @Override    public String toString() &#123;        return &quot;Computer&#123;&quot; +                &quot;mBoard=&#39;&quot; + mBoard + &#39;\&#39;&#39; +                &quot;, mDisplay=&#39;&quot; + mDisplay + &#39;\&#39;&#39; +                &quot;, mOs=&#39;&quot; + mOs + &#39;\&#39;&#39; +                &#39;&#125;&#39;;    &#125;&#125;</code></pre><h3 id="💻实现类"><a href="#💻实现类" class="headerlink" title="💻实现类"></a>💻实现类</h3><blockquote><p>实现抽象类中的方法</p></blockquote><pre><code class="lang-java">package 设计模式.创造者模式.computer;public class MacBook extends Computer&#123;    @Override    public void setOs() &#123;        mOs = &quot;Mac OS X 12.x&quot;;    &#125;&#125;</code></pre><h3 id="building-construction-Builder"><a href="#building-construction-Builder" class="headerlink" title=":building_construction: Builder"></a>:building_construction: Builder</h3><blockquote><p>定义 <code>Computer</code> 部件创建方法</p></blockquote><pre><code class="lang-java">package 设计模式.创造者模式.computer;/** * @author LiYang * @Project Name: Java设计模式 * @Package Name: 设计模式.创造者模式.computer * Created by MacBook Air on 2020/07/12. * Copyright © 2020 LiYang. All rights reserved. */@SuppressWarnings(&quot;all&quot;)public abstract class Builder &#123;    abstract void buildBoard(String board);    abstract void buildDisplay(String display);    abstract void buildOs();    abstract Computer build();&#125;</code></pre><h3 id="factory-ComputerBuilder"><a href="#factory-ComputerBuilder" class="headerlink" title=":factory: ComputerBuilder"></a>:factory: ComputerBuilder</h3><blockquote><p>根据不同的电脑类型完成不同的创建</p></blockquote><pre><code class="lang-java">package 设计模式.创造者模式.computer;public class MacBookBuilder extends Builder&#123;    private MacBook macBook = new MacBook();    @Override    void buildBoard(String board) &#123;        macBook.setmBoard(board);    &#125;    @Override    void buildDisplay(String display) &#123;        macBook.setmDisplay(display);    &#125;    @Override    void buildOs() &#123;        macBook.setOs();    &#125;    @Override    Computer build() &#123;        return macBook;    &#125;&#125;</code></pre><h3 id="diamond-shape-with-a-dot-inside-Director"><a href="#diamond-shape-with-a-dot-inside-Director" class="headerlink" title=":diamond_shape_with_a_dot_inside: Director"></a>:diamond_shape_with_a_dot_inside: Director</h3><blockquote><p>控制部件创建顺序</p><p>构造参数需要 <code>Builder</code> 对象</p></blockquote><pre><code class="lang-java">package 设计模式.创造者模式.computer;public class Director &#123;    Builder builder;    protected Director(Builder builder)&#123;        this.builder = builder;    &#125;    // 创建内部部件    protected Computer construct(String board, String disPlay)&#123;        builder.buildBoard(board);        builder.buildDisplay(disPlay);        builder.buildOs();        // 返回 Builder 对象中电脑对象        return builder.build();    &#125;&#125;</code></pre><h3 id="white-check-mark-测试类"><a href="#white-check-mark-测试类" class="headerlink" title=":white_check_mark: 测试类"></a>:white_check_mark: 测试类</h3><pre><code class="lang-java">public class Test &#123;    @org.junit.Test    public void test1()&#123;        Builder builder = new MacBookBuilder();        Director director = new Director(builder);        Computer construct = director.construct(&quot;主板&quot;, &quot;Inter&quot;);        System.out.println(construct.toString());        builder = new HonerComputerBuilder();        director = new Director(builder);        Computer computer = director.construct(&quot;主板CN&quot;, &quot;Inter&quot;);        System.out.println(computer.toString());    &#125;&#125;</code></pre><p><img src="https://raw.githubusercontent.com/LYgithub/image/master/img/20200717174853.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb-Servlet</title>
      <link href="//3dd30874.html"/>
      <url>//3dd30874.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Servlet 笔记</p></blockquote><h2 id="B-S-浏览器-服务器"><a href="#B-S-浏览器-服务器" class="headerlink" title="B/S 浏览器/服务器"></a>B/S 浏览器/服务器</h2><h3 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h3><ol><li>IP</li><li>端口</li><li>传输协议<ol><li>基本协议<ol><li>TCP：安全协议，三次握手，速度慢</li><li>UDP：不安全，速度快</li></ol></li></ol></li></ol><h2 id="C-S-客户端-服务器"><a href="#C-S-客户端-服务器" class="headerlink" title="C/S 客户端/服务器"></a>C/S 客户端/服务器</h2><hr><h2 id="服务器-Tomcat"><a href="#服务器-Tomcat" class="headerlink" title="服务器(Tomcat)"></a>服务器(Tomcat)</h2><ul><li><p>安装了服务器软件的计算机</p></li><li><p>服务器软件：接收请求，处理请求，做出响应</p></li><li><p>web服务器软件</p><ul><li><p>在web服务器软件，部署项目，浏览器访问 （web容器）</p><p>常见的Java相关web服务器：</p><ol><li><p>webLogic ： oracle</p><ol><li>webSphere ： IBM</li></ol></li></ol></li></ul><ol><li><p>JBOSS ： JBOSS</p></li><li><p>TomCat : Apache基金组织</p></li></ol></li></ul><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><ol><li><p>下载</p></li><li><p>解压</p><ul><li>安装路径无中文</li></ul></li><li><p>启动</p><blockquote><p> 修改端口号：<code>conf/server.xml</code></p></blockquote></li><li><p>关闭</p><blockquote><p><code>ctrl + c</code></p></blockquote></li></ol><h3 id="配置部署"><a href="#配置部署" class="headerlink" title="配置部署"></a>配置部署</h3><ol><li><p>放到 <code>webapps</code>目录下</p><blockquote><p>/hello : 虚拟目录/访问目录</p><p>简化部署：打包为 war包，自动解压和删除</p></blockquote></li><li><p>配置路径</p><p>Server.xml -&gt; TomCat的整体配置文件</p><pre><code class="lang-xml">&lt;Host&gt;    &lt;Context docBase=&quot;D:\\&quot;  path=&quot;\&quot;/&gt;&lt;/Host&gt;</code></pre></li><li><p>热部署</p><p>/conf/Catalina/localhost</p><p>下创建<code>xxx.xml</code> 文件</p></li></ol><h3 id="动态项目与静态项目"><a href="#动态项目与静态项目" class="headerlink" title="动态项目与静态项目"></a>动态项目与静态项目</h3><p>动态：</p><pre><code>-- 根目录    -- WEB-INF 目录        --classes : 字节码文件        --lib ： jar包        -- web.xml ： 配置</code></pre><h2 id="Servlet-：-server-applet"><a href="#Servlet-：-server-applet" class="headerlink" title="Servlet ： server applet"></a>Servlet ： server applet</h2><blockquote><p>一个接口</p><p>被浏览器访问到（TomCat识别）</p></blockquote><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>创建JavaEE项目</p></li><li><p>实现Servlet接口</p><ul><li>Servlet接口 service 方法，提供服务</li></ul></li><li><p>实现抽象方法</p></li><li><p>配置</p><blockquote><p>Web.xml</p></blockquote></li></ol><pre><code class="lang-xml">    &lt;servlet&gt;        &lt;servlet-name&gt;add_servlet&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.servlet.AddServlet&lt;/servlet-class&gt;    &lt;/servlet&gt;    &lt;servlet-mapping&gt;        &lt;servlet-name&gt;add_servlet&lt;/servlet-name&gt;        &lt;url-pattern&gt;/page/求和/hello&lt;/url-pattern&gt;    &lt;/servlet-mapping&gt;</code></pre><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20200607181108630.png" alt="image-20200607181108630"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre><code class="lang-java"></code></pre><h2 id="Servlet-方法"><a href="#Servlet-方法" class="headerlink" title="Servlet 方法"></a>Servlet 方法</h2><blockquote><p>注意配置Servlet </p></blockquote><ol><li><p>init ： 初始化方法 在Servlet创建时执行，只会执行一次</p><ul><li><p>何时创建</p><ul><li><p>默认第一次被访问</p><pre><code class="lang-xml">    &lt;servlet&gt;        &lt;servlet-name&gt;Demo1&lt;/servlet-name&gt;        &lt;servlet-class&gt;com.KawYang.Servlet.Demo1Test&lt;/servlet-class&gt;&lt;!--        1. 第一次访问时 负数 -1            2. 服务器启动时 正数 0 或 1--&gt;        &lt;load-on-startup&gt;-1&lt;/load-on-startup&gt;    &lt;/servlet&gt;</code></pre></li></ul></li><li><p>Servlet 是单例的</p><ul><li>多个用户访问<code>存在线程安全问题</code></li><li>解决：尽量不在Servlet定义成员变量，即使定义了成员变量，不要对其修改值</li></ul></li></ul></li><li><p>Service ： 提供服务的方法，每次Servlet被访问时执行</p></li><li><p>destroy ： 销毁方法，在Servlet<code>正常关闭</code>时执行</p><ul><li>服务器被关闭时执行</li><li>Servlet 结束之前</li></ul></li><li><p>ServletConfig ： Servlet配置</p></li><li><p>getServletInfo : 获取版本，作者…</p></li></ol><h2 id="Servlet-生命周期"><a href="#Servlet-生命周期" class="headerlink" title="Servlet 生命周期"></a>Servlet 生命周期</h2><p>创建 -&gt; 提供服务 -&gt; 被销毁</p><h2 id="Servlet-3-0"><a href="#Servlet-3-0" class="headerlink" title="Servlet 3.0"></a>Servlet 3.0</h2><blockquote><p>支持注解配置，不需要 xml</p></blockquote><h3 id="注解配置"><a href="#注解配置" class="headerlink" title="注解配置"></a>注解配置</h3><p>配置资源路径</p><pre><code class="lang-java">@WebServlet(urlPatterns = &quot;/Demo1&quot;) @WebServlet(&quot;/Demo1&quot;) //value 可以省略 public class Demo1Test implements Servlet &#123;    @Override    ...&#125;</code></pre><h2 id="IDEA与Tomcat"><a href="#IDEA与Tomcat" class="headerlink" title="IDEA与Tomcat"></a>IDEA与Tomcat</h2><ol><li><p>IDEA会为 每个web项目创建一份配置文件</p><pre><code class="lang-shell">08-Jun-2020 15:32:33.041 信息 [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /Users/mac/Library/Caches/IntelliJIdea2019.3/tomcat/_Demo1</code></pre></li><li><p>工作空间项目 和 TomCat部署的文本项目</p><ol><li>真正访问的是 <code>部署</code> 项目，对应<strong>工作空间</strong>下 web文件的所有内容</li><li>WEB-INF 下文件<strong>不能</strong>被访问</li></ol></li><li><p>断点调试</p><p>Debug 运行</p></li></ol><h2 id="Servlet体系结构"><a href="#Servlet体系结构" class="headerlink" title="Servlet体系结构"></a>Servlet体系结构</h2><p>Servlet (接口) -&gt; GenericServlet (类)-&gt; HttpServlet (类)</p><h3 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h3><blockquote><p> 其他方法默认空实现，只将<strong>Service</strong>进行抽象</p></blockquote><h3 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h3><blockquote><p>对Http协议 简化操作 和 Web的封装</p></blockquote><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20200608160714672.png" alt="image-20200608160714672"></p><ol><li>继承HttpServlet</li><li>复写 <code>doGet、doPost</code></li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol><li>urlPatterns : 访问路径 可以定义多个，名为value 可以省略 <ol><li>/xx</li><li>/xx/xx<ul><li>目录结构</li><li>/* 优先级最低</li></ul></li><li><strong><code>* .do</code></strong><ul><li>不能用<strong>/</strong></li></ul></li></ol></li></ol><hr><h1 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li><p>基于 TCP/IP 的高级协议</p></li><li><p>默认端口 80</p></li><li>基于请求响应模型的。一次请求对应一个响应</li><li>无状态协议：每次请求之间相互独立，不能交互数据</li></ul><h2 id="历史版本"><a href="#历史版本" class="headerlink" title="历史版本"></a>历史版本</h2><p>1.0 ： 每次请求都建立新的连接</p><p>1.1：复用连接</p><h2 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h2><ol><li><p>请求行 ： 请求方式  请求url 请求协议/版本</p><ul><li>GET : 在请求行中，url中 ，长度有限，不安全</li><li>POST ： 数据在请求体中，长度无限制，安全</li></ul></li><li><p>请求头 ： 名称 ： 值</p><ul><li><p>Referer ：从哪里来，</p><ul><li>防盗链</li><li>统计</li></ul><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20200608163915586.png" alt="image-20200608163915586"></p></li><li><p>Connection ： keep-alone 复用</p></li></ul></li><li><p>请求空行 ： 空行，分割作用</p></li><li><p>请求体 ： userName=Jary</p></li></ol><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20200608164323934.png" alt="image-20200608164323934"></p><ol><li>服务器创建 Request 和 response</li><li>Request 获取请求消息，response 设置响应消息</li></ol><h3 id="Request-继承结构"><a href="#Request-继承结构" class="headerlink" title="Request 继承结构"></a>Request 继承结构</h3><p>。。。</p><h3 id="Request功能"><a href="#Request功能" class="headerlink" title="Request功能"></a>Request功能</h3><ol><li><p>请求行数据</p><ul><li>GET /test/Demo1?name=zhangsan HTTP/1.1</li><li>方法<ol><li>String getMethod() : GET</li><li><strong>String getContextPath() : 虚拟路径 /test</strong></li><li>String getServletPath() : Servlet 路径  /Demo1</li><li>String getQueryString() : 参数name=zhangsan </li><li><strong>String getRequestURI() ：/test/Demo1</strong></li><li>String getRequestURL()  : <a href="http://loaclhost/test/Demo1">http://loaclhost/test/Demo1</a></li><li>String getProtocol() : HTTP/1.1 版本</li><li>String getRemoteAddr() : 客户IP</li></ol></li><li>URL : 统一资源定位符 <code>http://loaclhost/test/Demo1</code></li><li>URI ：统一资源标识符 <code>/test/Demo1</code></li></ul></li><li><p>请求头数据</p><ul><li>方法<ol><li>String getHeader(String name) ： 获取请求头信息</li><li>Enumeration<String> getHeaderNames() : 获取请求头名称</li></ol></li></ul></li><li><p>请求体数据</p><ul><li>还有POST方式，才有请求体</li><li>步骤：<ol><li>获取流对象<ul><li>getReader() : 获取字符输入流，智能操作字符</li><li>ServletInputStream getInputStream（） ： 获取字节输入流，可操作所有类型数据</li></ul></li><li>再从流对象中拿出数据</li></ol></li></ul><pre><code class="lang-java">BufferedReader br = req.getReader();String line = null;while((line = br.readerLine()) != null)&#123;    System.out.println(line);&#125;</code></pre></li></ol><h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ol><li><p>获取请求参数 </p><ol><li>String  getParameter(String name) =&gt; 获取值</li><li>String  getParameterValues(String name)   =&gt; hobby=xx&amp;hobby=game</li><li>Enumeration<String> GetParameterNames() =&gt;  获取名称</li><li>Map<String, String[]> getParameterMap() =&gt; 获取所有参数的集合</li></ol><ul><li><p>中文乱码</p><ul><li><p>Tomcat8 解决get中文乱码</p></li><li><pre><code class="lang-java">req.setCharacterEncoding(&quot;utf-8&quot;);</code></pre></li></ul></li></ul></li><li><p>请求转发 :exclamation:</p><ol><li><p>获取请求转发器对象</p></li><li><p>使用转发</p><pre><code class="lang-java">req.getRequestDispatcher(&quot;http://www.baidu.com&quot;).forward(req, resp);</code></pre><p><strong>特点</strong></p><ol><li>浏览器<strong>地址栏</strong>没有变</li><li>服务器<strong>内部</strong>资源</li><li>转发使用<strong>一次请求</strong></li></ol></li></ol></li><li><p>共享</p><ol><li>域对象 ： 一个有作用范围的对象<ul><li>request域：一次请求的范围，一般用于请求转发的多个资源中共享数据</li></ul></li><li>方法<ul><li>setAttribute(String name, Object obj) : 存储数据</li><li>getAttribute(String name) : 取值</li><li>removeAttribute(String name) : 删除</li></ul></li></ol></li><li><p>获取ServletContext</p><pre><code class="lang-java">ServletContext servletContext = request.getServletContext();System.out.println(servletContext);</code></pre></li></ol><h2 id="登录练习-exclamation"><a href="#登录练习-exclamation" class="headerlink" title="登录练习 :exclamation:"></a>登录练习 :exclamation:</h2><p><a href="https://www.bilibili.com/video/BV1aE411L7XV?p=256">用户登录</a></p><hr><h2 id="响应消息数据格式"><a href="#响应消息数据格式" class="headerlink" title="响应消息数据格式"></a>响应消息数据格式</h2><h3 id="响应消息"><a href="#响应消息" class="headerlink" title="响应消息"></a>响应消息</h3><ol><li><p>响应行 </p><ul><li>格式 ： 协议/版本 响应状态码 状态码描述</li><li>状态码：三位<ul><li>1xx ： 服务器接收客户端消息，没有接收完成</li><li>2xx ： OK</li><li>3xx :  重定向 302 ，资源跳转；304 访问缓存</li><li>4xx ：客户端错误， 404 ； 405 无Post/Get方法</li><li>5xx ：服务器错误 </li></ul></li></ul><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20200609164456185.png" alt="image-20200609164456185"></p></li><li><p>响应头</p><ul><li>头名称 ： 值</li><li>Content-Type ： 响应体数据编码格式</li><li>Content-disposition ： 打开响应体格式<ul><li>默认 ： in-line 当前页面中展示</li><li>attachment；filename=xxx ： 附件格式打开，文件下载 </li></ul></li></ul></li><li><p>响应空行</p></li><li><p>响应体 </p><ul><li>传送的数据</li></ul></li></ol><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>状态码：setStatus(int c)</p><p>响应头 ： setHeader（String name, String value)</p><p>响应体 ：</p><ol><li><p>步骤</p><ol><li>获去输出流<ol><li>字符输出流<ul><li>PrintWriter getWriter()</li></ul></li><li>字节输出流<ul><li>ServletOutputStream getOutputStream()</li></ul></li></ol></li><li>使用输出流输出到浏览器中</li></ol></li></ol><h3 id="练习-exclamation"><a href="#练习-exclamation" class="headerlink" title="练习:exclamation:"></a>练习:exclamation:</h3><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><pre><code class="lang-java">//自动跳转到Demo2  重定向//设置状态码resp.setStatus(302);// 设置头resp.setHeader(&quot;location&quot;, &quot;/HomeWork/responseDemo2&quot;);resp.sendRedirect(&quot;/HomeWork/responseDemo2&quot;);</code></pre><ul><li><p><strong>$ \color {red}{ forword 和   Redirect 区别}$</strong></p></li><li><p>特点</p><ul><li>地址栏发生变化</li><li>可访问其他服务器的资源</li><li>两次请求</li><li>不能共享数据</li></ul></li><li><p>路径 </p><ul><li><p>绝对路径： 确定唯一资源</p><p>规则： 判断定义的路径是给谁用的</p><p>​    客户端： <strong>添加虚拟目录</strong>（项目访问路径） =&gt; 重定向  ： 建议<strong>动态获取</strong> <code>String contextPath = req.getContextPath();</code></p><p>​    服务器：<strong>不需要加虚拟目录</strong> =&gt; 转发</p><blockquote><p>“/HomeWork/responseDemo2” 省略 <a href="http://loaclhost:8080">http://loaclhost:8080</a> </p></blockquote></li><li><p>相对路径 ： 不可以确定唯一资源 , <strong>不</strong> 以<code>/</code> 开头，或 <code>./</code>开头 <strong>可以不写</strong></p><blockquote><p> <strong>找到当前路径和目标资源之间的相对关系</strong></p></blockquote></li></ul></li></ul><ol><li>服务器输出字符数据</li><li>服务器输出字节流</li><li>验证码</li></ol><h3 id="转发"><a href="#转发" class="headerlink" title="转发"></a>转发</h3><pre><code class="lang-java">req.getRequestDispatcher(&quot;responseDemo3&quot;).forward(req, resp);</code></pre><h1 id="ServletContext对象"><a href="#ServletContext对象" class="headerlink" title="ServletContext对象"></a>ServletContext对象</h1><ol><li>代表整个web应用，可以和程序的容器<code>tomcat</code>进行通讯</li><li>功能<ol><li>获取 MIME类型：</li><li>域对象 ： 共享数据 </li><li>获取文件的真实<code>服务器</code>路径</li></ol></li></ol><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>request.getServletContext</p><p>httpServlet.getServletContext -&gt; this.geServletContext</p><pre><code class="lang-java">public class LoginServlet extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        this.doPost(req, resp);        this.getServletContext();        req.getServletContext();    &#125;&#125;</code></pre><ol><li><p>获取 MIME类型：</p><ul><li><p>MIME ,或联网通信过程中定义的一种文件数据类型</p><ul><li>格式 ： 大类型/小类型  text/ html  image/jpeg</li></ul></li><li><p><strong>String  getMimeType(String file)</strong></p></li><li><p>tomcat下的<code>web.xml</code> </p></li><li><pre><code class="lang-java">ServletContext servletContext = req.getServletContext();String file = &quot;a.jpg&quot;;String mimeType = servletContext.getMimeType(file);System.out.println(mimeType);</code></pre></li></ul></li><li><p>域对象 ： 共享数据 </p><ul><li>setAttribute(String name, Object value)</li><li>getAttribute(String name)</li><li>removeAttrivute(String name)</li><li>范围 ：<strong>共享所有用户的请求数据</strong></li></ul></li><li><p>获取文件的真实<code>服务器</code>路径</p><ul><li>String getRealPath(String path)</li><li>配置文件  src  web WEB-INF<ul><li>web =&gt; /xxx</li><li>WEB-INF =&gt; /WEB-INF/xx</li><li>src<code>已经配置到服务器</code>  =&gt;  /WEB-INF/classes/xx</li></ul></li></ul></li></ol><h2 id="案例-：-文件下载"><a href="#案例-：-文件下载" class="headerlink" title="案例   ： 文件下载"></a>案例   ： 文件下载</h2><ol><li><p>页面显示下载链接</p></li><li><p>点击链接弹出下载提示框</p><ol><li><p>使用响应头设置资源的打开方式</p><p><code>Content-dispostion:attachment;filename=xxx</code></p></li></ol></li><li><p>下载</p></li></ol><p>步骤：</p><ul><li>定义页面，编辑超链接href属性 ，指向Servlet ，传递资源名</li><li>定义Servlet<ul><li>获取文件名</li><li>加载进内存</li><li>指定响应头</li><li>写出到response对象中</li></ul></li></ul><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><ol><li>获取浏览器</li><li>返回不同的编码方式设置filename</li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-双指针&amp;移除元素-27</title>
      <link href="//276090df.html"/>
      <url>//276090df.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>给你一个数组<code>nums</code> 和一个值 val，你需要 原地 移除所有数值等于<code>val</code>的元素，并返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 <code>原地</code> 修改输入数组。<br>元素的<code>顺序可以改变</code>。你不需要考虑数组中超出新长度后面的元素。</p></blockquote><span id="more"></span><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>示例 1:</p><p>给定 nums = [3,2,2,3], val = 3,</p><p>函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。</p><p>你不需要考虑数组中超出新长度后面的元素。<br>示例2:</p><p>给定 nums = [0,1,2,2,3,0,4,2], val = 2,</p><p>函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p><p>注意这五个元素可为任意顺序。</p><p>你不需要考虑数组中超出新长度后面的元素。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><pre><code class="lang-java">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len = removeElement(nums, val);// 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。for (int i = 0; i &lt; len; i++) &#123;    print(nums[i]);&#125;</code></pre><h1 id="解"><a href="#解" class="headerlink" title="解"></a>解</h1><p><img src="https://gitee.com/KawYang/image/raw/master/img/20200711155701.png" alt=""></p><blockquote><p>i 标记符合元素的结尾， 初始值为 : 第一个为 val 的值，在 i 之前全部符合要求。<br>j 标记查找后方元素，如果 为 val : 跳过，如果不同：将元素移动到 i 标记处.</p></blockquote><pre><code class="lang-java">class Solution &#123;    public int removeElement(int[] nums, int val) &#123;        if(nums.length == 0) &#123;            return 0;        &#125;        int i = 0;        // 找出 i 的初始值        while(i&lt;nums.length &amp;&amp; nums[i] != val)&#123;            i++;        &#125;        // j 查找不同的元素，如果不相同，移动到 i 的位置，i后移。        for(int j = i; j&lt; nums.length; j++)&#123;            if(nums[j] != val)&#123;                nums[i] = nums[j];                i++;            &#125;        &#125;        return i;    &#125;&#125;</code></pre><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-element">https://leetcode-cn.com/problems/remove-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode-双指针&amp;167</title>
      <link href="//16b04212.html"/>
      <url>//16b04212.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>给定一个已按照<code>升序排列</code>的有序数组，找到两个数使得它们相加之和等于目标数。函数应该返回这两个下标值 index1 和 index2，其中 index1必须小于index2。</p><p>示例：</p></blockquote><p>输入: numbers = [2, 7, 11, 15], target = 9<br>输出: [1,2]<br>解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。</p><p><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/">题目链接</a></p><h2 id="原始解法"><a href="#原始解法" class="headerlink" title="原始解法"></a>原始解法</h2><p>通过双层循环，依次便利测试，如果测试成功返回下标，不成功继续测试。<br>时间复杂度 <code>O(n^2)</code></p><pre><code class="lang-java">class Solution &#123;    public int[] twoSum(int[] numbers, int target) &#123;        int index1,index2, sum[]= new int[2];        for(index1 = 0; index1 &lt; numbers.length; index1 ++)&#123;            for(index2 = index1 + 1; index2 &lt; numbers.length ; index2 ++ )&#123;                // 测试成功！                if(numbers[index1] + numbers[index2] == target)&#123;                    sum[0] = index1 + 1;                    sum[1] = index2 + 1;                    return sum;                &#125;                // 如果和大于 target index2 不需要继续向下测试                else if(numbers[index1] + numbers[index2] &gt; target)&#123;                    break;                &#125;            &#125;        &#125;        return sum;    &#125;&#125;</code></pre><h2 id="双指针方法"><a href="#双指针方法" class="headerlink" title="双指针方法"></a>双指针方法</h2><p>两个指针分别指向数组两头：</p><p>如果 sum &gt; target ： 需要减小大值 =&gt; index2 前移</p><p>如果 sum &lt; target ： 需要增大小值 =&gt; index1 后移</p><p>如果 sum = target ： 获取到需要的坐标</p><ul><li>通过如上方法，数组最多遍历一遍，所以时间复杂度 为 <code>O(n)</code></li></ul><blockquote><p>实例如下：</p></blockquote><pre><code class="lang-java">class Solution &#123;    public int[] twoSum(int[] numbers, int target) &#123;        int index1, index2;        index1 = 0;        index2 = numbers.length - 1;        while(index1 &lt; index2)&#123;            if(numbers[index1] + numbers[index2] &gt; target )&#123;                index2--;             &#125;            else if(numbers[index1] + numbers[index2] == target )&#123;                 return new int[]&#123;index1+1,index2+1&#125;;             &#125;            else if(numbers[index1] + numbers[index2] &lt; target )&#123;                index1 ++ ;             &#125;        &#125;        return null;    &#125;&#125;</code></pre><h2 id="结果对比"><a href="#结果对比" class="headerlink" title="结果对比"></a>结果对比</h2><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">提交结果</th><th style="text-align:left">运行时间</th><th style="text-align:center">内存消耗</th><th style="text-align:left">语言</th></tr></thead><tbody><tr><td style="text-align:left">原始方法</td><td style="text-align:left">通过</td><td style="text-align:left"><code>82 ms</code></td><td style="text-align:center">39.8 MB</td><td style="text-align:left">Java</td></tr><tr><td style="text-align:left">双指针</td><td style="text-align:left">通过</td><td style="text-align:left"><code>1 ms</code></td><td style="text-align:center">40 MB</td><td style="text-align:left">Java</td></tr></tbody></table></div><hr><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂模式</title>
      <link href="//ccff2b22.html"/>
      <url>//ccff2b22.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><blockquote><p>在明确地计划不同条件下创建不同实例时，使用工厂模式</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ol><li>将实体类进行抽象</li><li>实体类实现接口</li><li>创建工厂类</li><li>根据不同参数，返回不同对象</li></ol><pre><code class="lang-java">interface Shape &#123;   void draw();&#125;class Rectangle implements Shape &#123;   @Override   public void draw() &#123;      System.out.println(&quot;Inside Rectangle::draw() method.&quot;);   &#125;&#125;class Square implements Shape &#123;   @Override   public void draw() &#123;      System.out.println(&quot;Inside Square::draw() method.&quot;);   &#125;&#125;class ShapeFactory &#123;   //使用 getShape 方法获取形状类型的对象   public Shape getShape(String shapeType)&#123;      if(shapeType == null)&#123;         return null;      &#125;      if(shapeType.equalsIgnoreCase(&quot;RECTANGLE&quot;))&#123;         return new Rectangle();      &#125; else if(shapeType.equalsIgnoreCase(&quot;SQUARE&quot;))&#123;         return new Square();      &#125;      return null;   &#125;&#125;public class FactoryPatternDemo &#123;   public static void main(String[] args) &#123;      ShapeFactory shapeFactory = new ShapeFactory();      //获取 Rectangle 的对象，并调用它的 draw 方法      Shape shape2 = shapeFactory.getShape(&quot;RECTANGLE&quot;);      //调用 Rectangle 的 draw 方法      shape2.draw();      //获取 Square 的对象，并调用它的 draw 方法      Shape shape3 = shapeFactory.getShape(&quot;SQUARE&quot;);      //调用 Square 的 draw 方法      shape3.draw();   &#125;&#125;</code></pre><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><blockquote><p>将多个🏭进行<code>抽象</code>，使用不同的实现类，完成不同 <code>产品族</code> 🏭的创建，再使用🏭生产对象。</p></blockquote><ul><li>使用抽象类的方式将多个🏭进行抽象</li><li>使用工厂的方式实现🏭类</li><li>根据不同的需要使用🏭的🏭创建🏭</li><li>然后使用🏭生产对象</li></ul><p><img src="https://gitee.com/KawYang/image/raw/master/img/工厂模式类图.png" alt="抽象🏭类图"></p><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例设计模式</title>
      <link href="//cd333c07.html"/>
      <url>//cd333c07.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>保证一个类只有一个实例，并且提供一个全局访问点</p><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><p>1）线程安全<br>2）加锁优化=&gt; double check<br>3）编译器（JIT），CPU 有可能对指令进行重排序，导致使用到尚未初始化的实例。</p><ul><li>对象创建的步骤: 分配空间 =&gt; 初始化 =&gt; 引用赋值 在编译时 第2、3步是可以互换的</li><li>当步骤互换，先进行引用赋值，当另一个需要获取时，由于还未进行初始化，所以会产生<code>空指针异常</code>。</li><li>所以需要 通过添加 <code>volatile</code>关键字进行修饰，防止指令重排。</li></ul><h4 id="优化过程"><a href="#优化过程" class="headerlink" title="优化过程"></a>优化过程</h4><ul><li>基本</li></ul><pre><code class="lang-java">public class LazySingleton &#123;    private static LazySingleton instance;    //创建私有构造函数，防止使用 new 创建    private LazySingleton()&#123;&#125;    public static LazySingleton getInstance()&#123;        if(instance == null)&#123;            try &#123;                Thread.sleep(20);            &#125; catch (InterruptedException e) &#123;                e.printStackTrace();            &#125;            instance = new LazySingleton();        &#125;        return instance;    &#125;&#125;</code></pre><ul><li>问题</li></ul><p>当两个线程几乎同时进入 if ，就会创建两个不同的对象。</p><ul><li><p>解决：添加程序🔒</p><pre><code class="lang-java">public synchronized static LazySingleton getInstance()&#123;      if(instance == null)&#123;          try &#123;              Thread.sleep(20);          &#125; catch (InterruptedException e) &#123;              e.printStackTrace();          &#125;          instance = new LazySingleton();      &#125;      return instance;  &#125;</code></pre></li><li><p>问题 : 当创建实例对象后，不断获取会降低获取效率(不断加锁)。</p></li><li>解决 : 只需要在 if 内部添加程序🔒，以提高程序的效率</li></ul><pre><code class="lang-java">public static LazySingleton getInstance()&#123;        if(instance == null)&#123;            synchronized (LazySingleton.class)&#123;                if (instance == null)&#123;                    instance = new LazySingleton();                &#125;            &#125;        &#125;        return instance;    &#125;</code></pre><h4 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h4><pre><code class="lang-java">class LazySingletion&#123;    private volatile static LazySingletion instance;    private static LazySingletion()&#123;    &#125;    public static LazySingletion getInstance()&#123;        if(instance == null)&#123;            synchronized (LazySingletion.class)&#123;                if (instance == null) &#123;                    instance = new LazySingletion();                &#125;            &#125;        &#125;        return instance;    &#125;&#125;</code></pre><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><blockquote><p>JVM 保证线程安全的，程序在编译时就创建了对象，所以不存在线程安全问题。</p></blockquote><pre><code class="lang-java">class HangrySingleton&#123;    private static HangrySingleton instance = new HangrySingleton();    private HangrySingleton()&#123;&#125;    public static HangrySingleton getInstance()&#123;        return instance;    &#125;&#125;</code></pre><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><blockquote><p>懒加载的方式: 将单例对象 放置在内部类中，当调用 getInstance 方法时，需要内部类的属性，这时会创建 实例对象，是懒加载的方式。</p></blockquote><pre><code class="lang-java">class InnerClassSingleton&#123;    private static class InnerClass&#123;        private static InnerClassSingleton instance = new InnerClassSingleton();    &#125;    private InnerClassSingleton()&#123;        // 防止使用反射机制进行创建        // 懒汉模式不能进行防护        if(Inner.instance != null)&#123;            throw new RuntimeException(&quot;已经创建过实例！～&quot;);        &#125;    &#125;    public static InnerClassSingleton getInstance()&#123;        return InnerClass.instance;    &#125;&#125;</code></pre><h3 id="Enum-单例模式"><a href="#Enum-单例模式" class="headerlink" title="Enum 单例模式"></a>Enum 单例模式</h3><blockquote><p>反射安全、线程安全</p></blockquote><h3 id="反射攻击"><a href="#反射攻击" class="headerlink" title="反射攻击"></a>反射攻击</h3><blockquote><p>使用反射机制，可以调用私有构造函数，可能造成打破单例的规则。</p></blockquote><pre><code class="lang-java">private InnerClassSingleton()&#123;    // 防止使用反射机制进行创建    // 懒汉模式不能进行防护    if(Inner.instance != null)&#123;        throw new RuntimeException(&quot;已经创建过实例！～&quot;);    &#125;&#125;</code></pre><h2 id="序列化的单例模式"><a href="#序列化的单例模式" class="headerlink" title="序列化的单例模式"></a>序列化的单例模式</h2><blockquote><p>将对象存入硬盘，读取的对象和调用方法获取的对象不一致。</p></blockquote><ul><li>解决:</li></ul><ol><li>对象中继承序列化接口 <code>Serializable</code></li><li>添加方法 :  <code>Object readResolve() throws ObjectStreamException;</code></li><li>添加版本🆔 : <code>static final long serialVersionUID = 43L;</code></li></ol><pre><code class="lang-java">public class InnerSingleton implements Serializable &#123;    static final long serialVersionUID = 43L;    private static class Inner&#123;        private static InnerSingleton instance = new InnerSingleton();    &#125;    private InnerSingleton()&#123;        if(Inner.instance != null)&#123;            throw new RuntimeException(&quot;已经创建过实例！～&quot;);        &#125;    &#125;    public static InnerSingleton getInstance()&#123;        return Inner.instance;    &#125;    Object readResolve() throws ObjectStreamException &#123;        return Inner.instance;    &#125;&#125;</code></pre><ul><li>测试</li></ul><pre><code class="lang-java">    @Test    public void save() throws IOException &#123;        InnerSingleton instance = InnerSingleton.getInstance();        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(&quot;InnerSingleton&quot;));        out.writeObject(instance);        out.close();    &#125;    @Test    public void read() throws IOException, ClassNotFoundException &#123;        ObjectInputStream in = new ObjectInputStream(new FileInputStream(&quot;InnerSingleton&quot;));        InnerSingleton innerSingleton = (InnerSingleton) in.readObject();        in.close();        Assert.assertEquals(true, InnerSingleton.getInstance() == innerSingleton);        //通过    &#125;</code></pre><h2 id="Enum类型序列化"><a href="#Enum类型序列化" class="headerlink" title="Enum类型序列化"></a>Enum类型序列化</h2><blockquote><p>Enum 类型可直接进行序列化，不需要进行以上操作。</p></blockquote><h2 id="其他示例"><a href="#其他示例" class="headerlink" title="其他示例"></a>其他示例</h2><ul><li>Spring &amp; JDK<ul><li>java.lang.Runtime =&gt; 饿汉式</li><li>java.util.Currency  =&gt; double check</li><li>org.springframework.aop.framework.ProxyFactoryBean</li><li>org.springframework.beans.factory.support.DefaultSingletonBeanRegistry</li></ul></li><li>Tomcat<ul><li>org.apache.catalina.webresources.TomcatURLStreamHandlerFactory</li></ul></li></ul><hr><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><p><a href="https://www.bilibili.com/video/BV18a4y147dB?p=1">程序员必备的13种设计模式你真的掌握了吗？全套教学视频让你彻底弄懂</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AOP</title>
      <link href="//97375e6e.html"/>
      <url>//97375e6e.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>AOP</p></blockquote><h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p>Aspect Oriented Programming  —— 面向切面编程</p><ul><li>降低耦合度</li><li>易拓展</li><li>复用</li><li>非业务集中，便于统一管理</li><li>业务代码比较纯粹，没有其他代码影响</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li><p>创建Maven工程，添加坐标</p><pre><code class="lang-xml">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;        &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;        &lt;version&gt;5.2.7.RELEASE&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre></li></ul><p>Invocationhandler</p><p>  生成代理类的类，</p><p>  imlements InvocationHandler</p><ul><li><p>接收jjadf 啊收到回复ahsudjf 委托对象</p></li><li><p>设置返回代理类</p><p>Proxy.newProxyInstance()</p></li><li><p>编写委托对象方法</p></li></ul><h3 id="Spring框架对AOP进行封装"><a href="#Spring框架对AOP进行封装" class="headerlink" title="Spring框架对AOP进行封装"></a>Spring框架对AOP进行封装</h3><p>不需要创建InvocationHandler，只需要创建一个切面对象，将业务代码在切面中完成即可</p><ul><li>创建切面类对象 Aspect（切面）</li><li>添加注解</li></ul><p>LoggerAspect</p><ul><li><code>@Aspect</code> ： 表示该类为切面类</li><li><code>@Component</code>：将该类对象注入到IoC容器中</li><li><code>@Befor</code> :表示方法执行的具体位置和时机  </li></ul><p>CalImpl2 也需要添加<code>@Component</code></p><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;!--  自动扫描  --&gt;    &lt;context:component-scan base-package=&quot;com.item&quot; &gt;&lt;/context:component-scan&gt;&lt;!--    &lt;bean class=&quot;com.item.AOP.LoggerAspect&quot; p:id=&quot;&quot; /&gt;--&gt;    &lt;!--  使 Aspect 标签生效，为目标类自动生成代理对象  --&gt;    &lt;aop:aspectj-autoproxy /&gt;&lt;/beans&gt;</code></pre><p>context:component-scan 标签是扫描包内所有添加@Component注解的类，注入到IoC中</p><p>aop:aspectj-autoproxy 让Spring结合切面类和目标类自动生成代理对象。</p><ul><li>切面：横切关注点被模块化的抽象对象</li><li>通知：切面对象完成的工作（非业务代码，日志…）</li><li>目标：被通知的对象，即被切面的对象</li><li>代理：切面、通知、目标混合之后的对象</li><li>连接点：通知插入业务代码的具体位置</li><li>切点：AOP通过切点定位到连接点</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-工厂方法</title>
      <link href="//6c92115f.html"/>
      <url>//6c92115f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>📝 : Spring的工厂方法，将🏭 交给 <code>IoC容器</code> 进行管理，🏭包括：静态🏭、实例🏭。</p></blockquote><h2 id="Spring-的工厂方法"><a href="#Spring-的工厂方法" class="headerlink" title="Spring 的工厂方法"></a>Spring 的工厂方法</h2><blockquote><p>使用工厂创建独享，并将工厂交给 IoC容器 进行管理</p></blockquote><h3 id="静态工厂"><a href="#静态工厂" class="headerlink" title="静态工厂"></a>静态工厂</h3><ul><li>实体类</li></ul><pre><code class="lang-java">package com.item;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@AllArgsConstructor@NoArgsConstructorpublic class Car &#123;    Long id;    String name;&#125;</code></pre><ul><li>静态工厂</li></ul><pre><code class="lang-java">package com.item.factory;import com.item.Car;import java.util.HashMap;import java.util.Map;public class CarFactory &#123;    static Map&lt;Long, Car&gt; carMap;    static &#123;        carMap = new HashMap&lt;Long, Car&gt;();        carMap.put(1L, new Car(1L, &quot;宝马&quot;));        carMap.put(2L, new Car(2L, &quot;奔驰&quot;));    &#125;    public static Car getCar(Long id, String s)&#123;        System.out.println(s);        return carMap.get(id);    &#125;&#125;</code></pre><ul><li>配置工厂</li></ul><blockquote><p>将类使用bean🏷️配置到工厂的方法中，IoC容器使用配置的方法，根据传递的参数来获取对象。</p></blockquote><p>配置参数 : index (0开始、形参位置)、name(形参名称)</p><pre><code class="lang-xml">&lt;!--配置静态工厂 默认为单例模式--&gt;&lt;bean id=&quot;car&quot; class=&quot;com.item.factory.CarFactory&quot; factory-method=&quot;getCar&quot; scope=&quot;prototype&quot;&gt;    &lt;!--配置参数 getCar--&gt;    &lt;constructor-arg index=&quot;0&quot; value=&quot;2&quot; /&gt;    &lt;constructor-arg name=&quot;s&quot; value=&quot;String&quot; /&gt;&lt;/bean&gt;</code></pre><ul><li>获取IoC容器中对象</li></ul><pre><code class="lang-java">public static void main(String[] args) &#123;    try &#123;        ApplicationContext context = new ClassPathXmlApplicationContext(&quot;config-factory.xml&quot;);        Car car =(Car) context.getBean(&quot;car&quot;);        System.out.println(car);    &#125; catch (Exception e) &#123;        e.printStackTrace();    &#125;&#125;</code></pre><h3 id="实例工厂"><a href="#实例工厂" class="headerlink" title="实例工厂"></a>实例工厂</h3><ul><li>工厂类</li></ul><p>同上</p><ul><li>配置文件</li></ul><blockquote><p>在配置文件中配置两个 bean (🏭bean、获取Car的bean)，将🏭类先交给 IoC容器管理，然后再配置Car，调用容器中🏭创建对象的方法。</p></blockquote><pre><code class="lang-xml">&lt;!--配置工厂 bean--&gt;&lt;bean id=&quot;factory&quot; class=&quot;com.item.factory.InstanceCarFactory&quot; /&gt;&lt;!--配置对象 Car  使用工厂 factory获取  --&gt;&lt;bean id=&quot;car2&quot; factory-bean=&quot;factory&quot; factory-method=&quot;getCar&quot;&gt;    &lt;constructor-arg name=&quot;id&quot; value=&quot;2&quot; /&gt;&lt;/bean&gt;</code></pre><ul><li>使用</li></ul><pre><code class="lang-java">public static void main(String[] args) &#123;    InstanceCarFactory factory = new InstanceCarFactory();    System.out.println(factory.getCar(1L));    ApplicationContext context = new ClassPathXmlApplicationContext(&quot;config-factory.xml&quot;);    Car car2 = (Car) context.getBean(&quot;car2&quot;);    System.out.println(car2);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Magic-API 学习笔记</title>
      <link href="//36e0671.html"/>
      <url>//36e0671.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Magic-API-学习笔记"><a href="#Magic-API-学习笔记" class="headerlink" title="Magic-API 学习笔记"></a>Magic-API 学习笔记</h2><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ul><li>@Configuration</li><li><a href="https://blog.csdn.net/lbh199466/article/details/88303897">@ConditionalOnClass({DataSource.class,RequestMappingHandlerMapping.class})</a></li><li>@AutoConfigureAfter({DataSourceAutoConfiguration.class})</li><li>@EnableConfigurationProperties(MagicAPIProperties.class)</li><li>@NestedConfigurationProperty</li><li><p><a href="https://www.cnblogs.com/huanghzm/p/12217630.html">Spring Boot 之 spring.factories</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43367055/article/details/100174407">springboot之additional-spring-configuration-metadata.json自定义提示</a></p></li></ul><h3 id="Swagger-使用"><a href="#Swagger-使用" class="headerlink" title="Swagger 使用"></a>Swagger 使用</h3><h4 id="1-pom-依赖"><a href="#1-pom-依赖" class="headerlink" title="1. pom 依赖"></a>1. pom 依赖</h4><pre><code class="lang-xml">&lt;!-- 引入swagger2 --&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;    &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;    &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h4><ul><li>Swagger 配置</li></ul><pre><code class="lang-java">import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.service.Contact;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;/** * @author renyongzhen */@Configuration@EnableSwagger2public class SwaggerConfig &#123;    /**     * 创建swagger对象:     *     * @return     */    @Bean    public Docket mapRestApi() &#123;        return new Docket(DocumentationType.SWAGGER_2).groupName(&quot;xxx管理系统API&quot;)                .apiInfo(apiInfo()).select()                .apis(RequestHandlerSelectors.basePackage(&quot;com.xxx.xxx.controller&quot;))                .paths(PathSelectors.any())                .build();    &#125;    /**     * 设置api信息     * title:swagger题目     * description:描述     * cotact:创建者     * @return     */    private ApiInfo apiInfo() &#123;        return new ApiInfoBuilder()                .title(&quot;xxx微服务API&quot;)                .description(&quot;xxxx描述&quot;)                .contact(new Contact(&quot;xxxName&quot;,null ,&quot;xxx@qq.com&quot;))                .version(&quot;1.0&quot;)                .build();    &#125;&#125;</code></pre><ul><li>打印Swagger地址</li></ul><pre><code class="lang-java">package com.example.neo4jdemo.config;import lombok.extern.slf4j.Slf4j;import org.springframework.boot.web.context.WebServerInitializedEvent;import org.springframework.context.ApplicationListener;import org.springframework.stereotype.Component;import java.net.Inet4Address;import java.net.UnknownHostException;/** * @Description 控制台输出 Swagger 接口文档地址 **/@Component@Slf4jpublic class SwaggerPrintConfig implements ApplicationListener&lt;WebServerInitializedEvent&gt; &#123;    @Override    public void onApplicationEvent(WebServerInitializedEvent event) &#123;        try &#123;            //获取IP            String hostAddress = Inet4Address.getLocalHost().getHostAddress();            //获取端口号            int port = event.getWebServer().getPort();            //获取应用名            String applicationName = event.getApplicationContext().getApplicationName();            log.info(&quot;项目启动启动成功！接口文档地址: http://&quot; + hostAddress + &quot;:&quot; + event.getWebServer().getPort() + applicationName + &quot;/swagger-ui.html&quot;);        &#125; catch (UnknownHostException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;</code></pre><hr><p><a href="https://www.jianshu.com/p/349e130e40d5"> 博客园-Swagger介绍及使用</a></p><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210326225548075.png" alt="image-20210326225548075"></p><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210326225615139.png" alt="image-20210326225615139"></p><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210326230622476.png" alt="image-20210326230622476" style= /></p><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210326231022339.png" alt="image-20210326231022339"></p>]]></content>
      
      
      <categories>
          
          <category> 开源框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Magic-API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-入门</title>
      <link href="//2b6be590.html"/>
      <url>//2b6be590.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis-入门"><a href="#Redis-入门" class="headerlink" title="Redis - 入门"></a>Redis - 入门</h1><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20210213110833451.png" alt="image-20210213110833451" style="margin-left: 5%; zoom: 200%;"  /></p><hr><h1 id="Redis-Remote-Dictionary-Server"><a href="#Redis-Remote-Dictionary-Server" class="headerlink" title="Redis(Remote Dictionary Server)"></a>Redis(Remote Dictionary Server)</h1><blockquote><p>Key - Value  的非关系型数据库，C语言编写的，提供多种持久化机制，基于内存的存储的，提供了主从，哨兵以及集群的搭建方式，更加方便的横向和垂直拓展。</p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><blockquote><ol><li>Redis基于内存存储数据和读取数据 =&gt; 提高存储速度</li><li>将Session共享数据存放在 Redis中 =&gt; 多服务器存储共享</li><li>Redis接收用户请求是单线程的 =&gt; 解决多服务器锁不能互斥的问题</li></ol></blockquote><p>NoSQL =&gt; 非关系型数据库 =&gt; Not Only SQL</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><ol><li>下载</li><li>编译</li></ol></blockquote><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><blockquote><ol><li>启动服务： <code>redis-server</code></li><li>连接redis：<code>redis-cli</code></li></ol></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>config get *</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-IoC(控制反转)&amp;DI(依赖注入)</title>
      <link href="//6c92115f.html"/>
      <url>//6c92115f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本文主要记录了 <code>Spring</code> 框架的 <code>IoC &amp; ID</code> 基本内容。</p></blockquote><h2 id="Spring框架两大核心机制"><a href="#Spring框架两大核心机制" class="headerlink" title="Spring框架两大核心机制"></a>Spring框架两大核心机制</h2><ul><li>IoC （控制翻转) / DI （依赖注入)</li><li>AOP  (面向切面编程)</li></ul><p>企业级开发框架，是软件设计层面的框架，优势在于可以将应用程序进行分层</p><p>MVC ：Struts2 、Spring MVC</p><p>ORMapping ： Hibernate、MyBatis、Spring Data</p><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20200615165841634.png" alt="image-20200615165841634"></p><p>优点：</p><ol><li>容易与第三方框架整合</li><li>集中管理</li></ol><h2 id="IoC"><a href="#IoC" class="headerlink" title="IoC"></a>IoC</h2><blockquote><p>IoC (控制反转) : 将对象使用交给 Spring 进行管理。即创建对象由IoC容器创建。</p></blockquote><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>步骤：</p><ul><li>创建maven项目，添加pom依赖</li></ul><pre><code class="lang-xml">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;        &lt;version&gt;5.1.3.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;!-- 简化实体类代码开发 @Data 自动生成 get、set方法  --&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.12&lt;/version&gt;        &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><ul><li>创建实体类</li></ul><p>传统方式：手动 new 方式创建对象</p><p>IoC方式：在配置文件中添加管理对象，xml格式自定义文件名，<code>resources</code> 下</p><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;      xmlns=&quot;http://www.springframework.org/schema/beans&quot;      xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;    &lt;bean id=&quot;student&quot; class=&quot;com.item.Student&quot; &gt;        &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;        &lt;property name=&quot;name&quot; value=&quot;张三&quot; /&gt;        &lt;property name=&quot;age&quot; value=&quot;12&quot; /&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><ul><li>使用方法</li></ul><pre><code class="lang-java">//加载配置文件ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;iocconfig.xml&quot;);Object student = applicationContext.getBean(&quot;student&quot;);System.out.println(student);</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>通过配置Bean标签进行管理</p><ul><li><code>id</code>:  对象名, <code>getBean</code> 的 查找参数。</li><li><code>class</code> ： 对象模版类 <code>必须有无参构造</code> ，通过反射机制创建对象， 反射机制是调用无参构造创建</li><li><code>property</code> ：完成属性赋值<ul><li><code>name</code> ： 属性名</li><li><code>value</code> ： 属性值 String 直接赋值，其他的引用类型，不能通过value赋值，</li><li><code>ref</code>  : 将IoC中的另外一个Bean添加，<code>依赖注入</code></li></ul></li></ul><pre><code class="lang-xml">&lt;bean id=&quot;student&quot; class=&quot;com.item.Student&quot; &gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;    &lt;property name=&quot;name&quot; value=&quot;张三&quot; /&gt;    &lt;property name=&quot;age&quot; value=&quot;12&quot; /&gt;    &lt;property name=&quot;classes&quot; ref=&quot;classes&quot; /&gt;&lt;/bean&gt;&lt;bean id=&quot;classes&quot; class=&quot;com.item.Classes&quot; &gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;    &lt;property name=&quot;name&quot; value=&quot;一班&quot; /&gt;&lt;/bean&gt;</code></pre><h2 id="IoC底层原理"><a href="#IoC底层原理" class="headerlink" title="IoC底层原理"></a>IoC底层原理</h2><blockquote><p>读取配置文件 -&gt; 获取对象创建信息 -&gt; 反射创建对象并存储 -&gt; 获取对象</p></blockquote><ul><li>读取xml，解析</li><li>通过反射机制实例化配置文件中所有的Bean</li></ul><pre><code class="lang-java">package com.item.ioc;import org.dom4j.Document;import org.dom4j.Element;import org.dom4j.io.SAXReader;import java.lang.reflect.Constructor;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.util.HashMap;import java.util.Iterator;import java.util.Map;public class ClassPathXmlApplicationContext implements ApplicationContext&#123;    //存储创建的对象    private Map&lt;String, Object&gt; ioc = new HashMap&lt;String, Object&gt;();    public ClassPathXmlApplicationContext(String path) throws Exception &#123;        SAXReader reader = new SAXReader();        Document read = reader.read(&quot;./src/main/resources/&quot; + path);        // 解析 xml 获取配置信息        Element rootElement = read.getRootElement();        Iterator iterator = rootElement.elementIterator();        while (iterator.hasNext())&#123;            /** 循环每一个类配置信息 */            Element element = (Element) iterator.next();            String id = element.attributeValue(&quot;id&quot;);            String className = element.attributeValue(&quot;class&quot;);            //通过反射创建对象            Class aClass = Class.forName(className);            Constructor constructor = aClass.getConstructor();            Object o = constructor.newInstance();            Iterator iterator1 = element.elementIterator();            while (iterator1.hasNext())&#123;                Element next =(Element) iterator1.next();                System.out.println(&quot;---------------&quot;);                String name = next.attributeValue(&quot;name&quot;);                String value = next.attributeValue(&quot;value&quot;);                String ref = next.attributeValue(&quot;ref&quot;);                System.out.println(ref);                //基本变量赋值                if(ref == null)&#123;                    String mothedName = &quot;set&quot; + name.substring(0, 1).toUpperCase() + name.substring(1);                    System.out.print(name+ &quot;\t&quot; + value + &quot;\t&quot;);                    Field field = aClass.getDeclaredField(name);                    System.out.println(field.getType().getName());                    Method method = aClass.getDeclaredMethod(mothedName, field.getType());                    Object v = null;                    if(field.getType().getName() == &quot;int&quot;)&#123;                        v = Integer.parseInt(value);                    &#125;                    if(field.getType().getName() == &quot;String&quot;)&#123;                        v = value;                    &#125;                    ....                    method.invoke(o, v);                &#125;else&#123; //注入                    //直接赋值Bean                    Object obj1 = ioc.get(&quot;Classes&quot;);                    System.out.println(obj1);                &#125;            &#125;            ioc.put(id, o);        &#125;        System.out.println(&quot;=============&quot;);        System.out.println(ioc);    &#125;    public Object getBean(String id) &#123;        return ioc.get(id);    &#125;&#125;</code></pre><h2 id="运行时类进行获取Bean"><a href="#运行时类进行获取Bean" class="headerlink" title="运行时类进行获取Bean"></a>运行时类进行获取Bean</h2><pre><code class="lang-java">//通过配置文件 🆔 进行获取Object student = applicationContext.getBean(&quot;student&quot;);//通过 运行时类 获取Student bean = applicationContext.getBean(Student.class);System.out.println(bean);</code></pre><blockquote><p>配置文件中只能有一个实例 ,如下抛异常</p></blockquote><pre><code class="lang-xml">&lt;bean id=&quot;classes&quot; class=&quot;com.item.Classes&quot; &gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;    &lt;property name=&quot;name&quot; value=&quot;一班&quot; /&gt;&lt;/bean&gt;&lt;bean id=&quot;classes2&quot; class=&quot;com.item.Classes&quot; &gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;    &lt;property name=&quot;name&quot; value=&quot;一班&quot; /&gt;&lt;/bean&gt;</code></pre><h2 id="有参构造创建"><a href="#有参构造创建" class="headerlink" title="有参构造创建"></a>有参构造创建</h2><ul><li>在实例中创建有参构造</li><li>在xml中配置</li></ul><pre><code class="lang-xml">    &lt;bean id=&quot;classes3&quot; class=&quot;com.item.Classes&quot;&gt;        &lt;!--  两种设置参数方式。--&gt;        &lt;constructor-arg name=&quot;name&quot; value=&quot;三班&quot; /&gt;        &lt;constructor-arg index=&quot;0&quot; value=&quot;2&quot; /&gt;    &lt;/bean&gt;</code></pre><h2 id="集合注入"><a href="#集合注入" class="headerlink" title="集合注入"></a>集合注入</h2><blockquote><p>使用 <code>list</code> 标签 注入类型的集合对象。</p></blockquote><pre><code class="lang-xml">    &lt;bean id=&quot;student&quot; class=&quot;com.item.Student&quot; &gt;        &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;        &lt;property name=&quot;name&quot; value=&quot;张三&quot; /&gt;        &lt;property name=&quot;age&quot; value=&quot;12&quot; /&gt;        &lt;property name=&quot;classes_List&quot; &gt;            &lt;list&gt;                &lt;ref bean=&quot;classes&quot;&gt;&lt;/ref&gt;                &lt;ref bean=&quot;classes2&quot;&gt;&lt;/ref&gt;            &lt;/list&gt;        &lt;/property&gt;    &lt;/bean&gt;    &lt;bean id=&quot;classes&quot; class=&quot;com.item.Classes&quot; &gt;        &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;        &lt;property name=&quot;name&quot; value=&quot;一班&quot; /&gt;    &lt;/bean&gt;    &lt;bean id=&quot;classes2&quot; class=&quot;com.item.Classes&quot; &gt;        &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;        &lt;property name=&quot;name&quot; value=&quot;一班&quot; /&gt;    &lt;/bean&gt;</code></pre><h2 id="Scope-作用域"><a href="#Scope-作用域" class="headerlink" title="Scope 作用域"></a>Scope 作用域</h2><p>Spring 管理的bean是根据 <code>scope</code> 来生成的，表示bean的作用域</p><ul><li>singleton：单例模式，在加载文件时创建bean，通过IoC容器获取的bean是 <code>唯一</code> 的。</li><li>prototype：原型模式，在调用getBean时创建bean对象，通过IoC容器获取的bean是 <code>不同</code> 的。</li><li>request：请求，表示在一次HTTP请求内有效。</li><li>session：会话，表示在一个用户会话内有效。</li></ul><p>request和session只是用于web项目，大多情况下用单例和原型较多</p><pre><code class="lang-xml">&lt;bean id=&quot;classes&quot; class=&quot;com.item.Classes&quot; scope=&quot;singleton&quot; &gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;    &lt;property name=&quot;name&quot; value=&quot;一班&quot; /&gt;&lt;/bean&gt;</code></pre><h2 id="Spring-的继承"><a href="#Spring-的继承" class="headerlink" title="Spring 的继承"></a>Spring 的继承</h2><blockquote><p>Java 是类层面的继承，子类可以继承父类的内部结构信息。<br>Spring 是对象层面的继承，子对象可以继承父对象的属性值。(一种赋值方式)</p></blockquote><ul><li>对象层面的继承</li><li>可以使不同类之间继承，子类中必须包含父类所有属性</li></ul><pre><code class="lang-xml">&lt;bean id=&quot;classes&quot; class=&quot;com.item.Classes&quot; scope=&quot;singleton&quot; &gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;    &lt;property name=&quot;name&quot; value=&quot;一班&quot; /&gt;&lt;/bean&gt;&lt;bean id=&quot;cla&quot; class=&quot;com.item.Classes&quot; parent=&quot;classes&quot; &gt;    &lt;!--对属性进行重写 --&gt;    &lt;property name=&quot;id&quot; value=&quot;3&quot; /&gt;&lt;/bean&gt;</code></pre><h2 id="Spring-的依赖"><a href="#Spring-的依赖" class="headerlink" title="Spring 的依赖"></a>Spring 的依赖</h2><p>描述bean和bean之间的<code>关系</code>，配置依赖之后，被依赖对象一定<code>先创建</code>，再创建依赖bean</p><blockquote><p>修改创建顺序</p></blockquote><pre><code class="lang-xml">&lt;bean id=&quot;cla&quot; class=&quot;com.item.Classes&quot; parent=&quot;classes&quot; depends-on=&quot;student&quot;&gt;    &lt;property name=&quot;id&quot; value=&quot;3&quot; /&gt;&lt;/bean&gt;</code></pre><p><img src="https://gitee.com/KawYang/image/raw/master/img/image-20200620174623885.png" alt="image-20200620174623885"></p><h2 id="Spring-的-P-命名空间"><a href="#Spring-的-P-命名空间" class="headerlink" title="Spring 的 P 命名空间"></a>Spring 的 P 命名空间</h2><p>p 命名空间是对 IoC/ DI 的简化</p><blockquote><p>引入约束</p></blockquote><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;beans xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:p=&quot;http://www.springframework.org/schema/p&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;    &lt;bean&gt;        ...    &lt;/bean&gt;</code></pre><blockquote><p>使用方法</p></blockquote><pre><code class="lang-xml">&lt;!--p命名空间--&gt;&lt;bean id=&quot;classes_p&quot; class=&quot;com.item.Classes&quot; p:id=&quot;1&quot; p:name=&quot;adad&quot;/&gt;&lt;bean id=&quot;student_p&quot; class=&quot;com.item.Student&quot; p:id=&quot;1&quot; p:name=&quot;李四&quot; p:age=&quot;12&quot; p:classes-ref=&quot;classes_p&quot; /&gt;</code></pre><h2 id="IoC自动装载（Autowire）"><a href="#IoC自动装载（Autowire）" class="headerlink" title="IoC自动装载（Autowire）"></a>IoC自动装载（Autowire）</h2><p>IoC负责创建对象，<code>DI</code> 完成对象的依赖注入，配置 <code>property</code> 标签的 <code>ref</code>属性。</p><p>IoC自动选择bean 进行注入</p><ul><li><p>byName ：通过名称装载</p><blockquote><p>按照名字进行装载，没有为null</p></blockquote><pre><code class="lang-xml">&lt;!--传统装载--&gt;&lt;bean id=&quot;student&quot; class=&quot;com.item.Student&quot; &gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;    &lt;property name=&quot;name&quot; value=&quot;张三&quot; /&gt;    &lt;property name=&quot;age&quot; value=&quot;12&quot; /&gt;    &lt;property name=&quot;classes&quot; ref=&quot;classes&quot; /&gt;&lt;/bean&gt;&lt;!--自动装载--&gt;&lt;bean id=&quot;student2&quot; class=&quot;com.item.Student&quot; autowire=&quot;byName&quot;&gt;    &lt;property name=&quot;id&quot; value=&quot;1&quot; /&gt;    &lt;property name=&quot;name&quot; value=&quot;张三&quot; /&gt;    &lt;property name=&quot;age&quot; value=&quot;12&quot; /&gt; &lt;/bean&gt;</code></pre></li><li><p>byType ： 通过类型装载</p></li></ul><blockquote><p>多个同类型，抛出异常，不知装载那个.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IoC </tag>
            
            <tag> DI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法分析 (一)-  Analysis of Algorithm</title>
      <link href="//8ed8be26.html"/>
      <url>//8ed8be26.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="算法分析-一-Analysis-of-Algorithm"><a href="#算法分析-一-Analysis-of-Algorithm" class="headerlink" title="算法分析 (一)-  Analysis of Algorithm"></a>算法分析 (一)-  Analysis of Algorithm</h2><hr><blockquote><p>算法分析是关于计算机程序性能和<strong>资源利用</strong>的研究,这是关于性能的课程</p></blockquote><h3 id="什么是比性能更重要呢"><a href="#什么是比性能更重要呢" class="headerlink" title="什么是比性能更重要呢?"></a>什么是比性能更重要呢?</h3><ul><li>可维护性</li><li>软件的健壮性</li><li>特性</li><li>功能化 - 可复用行</li><li>安全性</li><li>可拓展性</li><li>用户友好 </li><li>…</li></ul><h3 id="为什么还要关注性能"><a href="#为什么还要关注性能" class="headerlink" title="为什么还要关注性能?"></a>为什么还要关注性能?</h3><ul><li>一 、 性能的好坏 往往直接决定这可行性 【<strong>算法能够将不可行变成可行】</strong></li><li>二 、 是一种描述性语言，是一种让程序最为简洁的思考方式，性能是确保良好的用户体验的前提，也是安全的保障。</li><li>三、带来喜悦，追求速度。</li></ul><h2 id="排序问题-Problem-Sorting"><a href="#排序问题-Problem-Sorting" class="headerlink" title="排序问题 - Problem Sorting"></a>排序问题 - Problem Sorting</h2><blockquote><p>输入序列，输出有序的数列。</p></blockquote><h3 id="Sorting-1-Insertion-Sort"><a href="#Sorting-1-Insertion-Sort" class="headerlink" title="Sorting 1 - Insertion Sort"></a>Sorting 1 - Insertion Sort</h3><h4 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h4><pre><code class="lang-java">InsertionSort(An) // Sorts A[1 ... n]for i &lt;- 2 to n    key &lt;- A[i]    j &lt;- i -1    while j &gt; 0 &amp;&amp; A[j] &gt; key        A[j] &lt;- A[j-1]        j &lt;- j-1    A[j+1] &lt;- key</code></pre><p>示例</p><pre><code class="lang-java">void InsertionSort(int [] n)&#123;    for(i = 2; i &lt; n.length() ; i++)&#123;        int key = n[i];        int j = i - 1;        // 大元素后移        while(j &gt; 0 &amp;&amp; n[j] &gt; key)&#123;            n[j+1] = n[j];            j --;        &#125;        // 插入位置 【j+1 -&gt; 最后一次 循环 j 与插入位置 差 1】        n[j+1] = key;    &#125;&#125;</code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/e4c8957e85cd0397cf9b0d5494153d2b.png" alt="示意图"></p><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><ul><li>取决于输入的内容</li><li>取决于输入的大小<ul><li>依据输入的规模进行参数化</li></ul></li><li>运行时间的上界 【该算法 至少运行 3秒？？？显然不合理】<strong>代表了对用户的承诺</strong></li></ul><h4 id="对时间的分析方法"><a href="#对时间的分析方法" class="headerlink" title="对时间的分析方法"></a>对时间的分析方法</h4><ol><li>最长运行时间<ul><li>T(n) = max Time on any input of size </li><li><strong>T(n)在某种意义上表示的是一种相关性，而不能算函数</strong></li><li>如果使用最大值就可以是函数关系， 因为运行的最大时间只有一个。</li></ul></li><li><p>平均运行时间</p><ul><li>T(n) 就变成了所有输入的期望时间</li><li>每种输入的运行时间 * 输入出现的概率值 【加权平均数】</li><li>不可能知道每种输入的概率 - 所以需要作出假设，通常使用 <strong>均匀分布</strong>，即 <strong>每种输入出现的概率相同</strong></li></ul></li><li><p>最好输入情况 (假象) - (下界 )</p></li></ol><h3 id="插入排序的最坏时间"><a href="#插入排序的最坏时间" class="headerlink" title="插入排序的最坏时间"></a>插入排序的最坏时间</h3><p>依赖于计算机</p><ul><li>同一个计算机运行不同的算法 - 对比的是相对时间</li><li>同一个算法运行在不同的计算机上，不一定都很快 - 对比的是绝对时间</li></ul><h4 id="BIG-IDEA"><a href="#BIG-IDEA" class="headerlink" title="BIG IDEA"></a>BIG IDEA</h4><p>针对以上两种情况 产生了 大局观(<strong>BIG IDEA</strong>)</p><p>即 渐进分析(asymptotic anaiysis)</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol><li>忽略掉依赖于计算机的常量</li><li>不是去检查运行的实际时间，而是关注运行时间的增长 T(n) n-&gt;∞</li></ol><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ol><li><p>θ 符号</p><blockquote><p>丢弃低阶项，并忽略常数因子</p></blockquote></li></ol><p>Ex: <script type="math/tex">3n^3 + 90n^2 - n = \theta(n^3)</script></p><p>当 n -&gt;∞ ， θ(n<sup>3</sup>) 迟早高于 θ(n<sup>2</sup>) 【与常数项是无关的 只不过交点x坐标的大小】 同时满足以上两种对比(未知)</p><p><img src="https://img-blog.csdnimg.cn/img_convert/9dd2e7efbb1fa7c78eda292ddc74b416.png" alt=""></p><blockquote><p>一开始，尽管 n<sup>2</sup> 在渐进的观点来看是慢的，但是仍可以在合理(数据量少)的输入下是快的。<br><code>因此需要在数学理解和工程直觉 上做好权衡才能写出更好的程序</code></p></blockquote><h3 id="最坏情况分析"><a href="#最坏情况分析" class="headerlink" title="最坏情况分析"></a>最坏情况分析</h3><ul><li>输入顺序为 逆序</li></ul><blockquote><p>内存引用计数，某个变量访问的次数</p></blockquote><ol><li><script type="math/tex; mode=display">T(n) =\sum_{i=2}^n\theta(i) = \theta(n^2)</script></li></ol><blockquote><script type="math/tex; mode=display">θ(i) : 执行 i 次的时间</script><script type="math/tex; mode=display">θ(n^2): 类似 1 + 2 ... + n = n(n+1)/2 = \theta(n^2)</script></blockquote><ul><li>θ符号是一种弱符号运算。 极限的莱布尼茨 公式 是强符号运算。</li></ul><p><strong>所以 ： 插入排序的最坏时间 为 T(n<sup>2</sup>)</strong></p><h1 id="参考信息"><a href="#参考信息" class="headerlink" title="参考信息"></a>参考信息</h1><p><a href="htps://www.bilibili.com/video/BV1Kx411f7bL?t=3771">学习视频</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-IoC(控制反转)&amp;DI(依赖注入)</title>
      <link href="//92a38b2.html"/>
      <url>//92a38b2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote><p>指定原型实例制定创建对象的类型，通过拷贝完成对象创建。</p><p>Java 的克隆机制</p></blockquote><p>实现 <code>Cloneable</code> 标记接口<br>        需要实现 <code>clone</code> 方法</p><pre><code class="lang-java">package 设计模式.原型模式;/** * @author LiYang * @Project Name: Java设计模式 * @Package Name: 设计模式.原型模式 * Created by MacBook Air on 2020/07/17. * Copyright © 2020 LiYang. All rights reserved. */public class Solution &#123;    public static void main(String[] args) &#123;        Product product = new Product();        Product clone = null;        try &#123;            clone = ((Product) product.clone());        &#125; catch (CloneNotSupportedException e) &#123;            e.printStackTrace();        &#125;        clone.setId(1);        System.out.println(clone.toString());    &#125;&#125;class Product implements Cloneable&#123;    int id = 2;    @Override    public String toString() &#123;        return &quot;Product&#123;&quot; +                &quot;id=&quot; + id +                &#39;&#125;&#39;;    &#125;    public int getId() &#123;        return id;    &#125;    public void setId(int id) &#123;        this.id = id;    &#125;    /**     * Creates and returns a copy of this object.  The precise meaning     * of &quot;copy&quot; may depend on the class of the object. The general     * intent is that, for any object &#123;@code x&#125;, the expression:     * &lt;blockquote&gt;     * &lt;pre&gt;     * x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;     * will be true, and that the expression:     * &lt;blockquote&gt;     * &lt;pre&gt;     * x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;     * will be &#123;@code true&#125;, but these are not absolute requirements.     * While it is typically the case that:     * &lt;blockquote&gt;     * &lt;pre&gt;     * x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;     * will be &#123;@code true&#125;, this is not an absolute requirement.     * &lt;p&gt;     * By convention, the returned object should be obtained by calling     * &#123;@code super.clone&#125;.  If a class and all of its superclasses (except     * &#123;@code Object&#125;) obey this convention, it will be the case that     * &#123;@code x.clone().getClass() == x.getClass()&#125;.     * &lt;p&gt;     * By convention, the object returned by this method should be independent     * of this object (which is being cloned).  To achieve this independence,     * it may be necessary to modify one or more fields of the object returned     * by &#123;@code super.clone&#125; before returning it.  Typically, this means     * copying any mutable objects that comprise the internal &quot;deep structure&quot;     * of the object being cloned and replacing the references to these     * objects with references to the copies.  If a class contains only     * primitive fields or references to immutable objects, then it is usually     * the case that no fields in the object returned by &#123;@code super.clone&#125;     * need to be modified.     * &lt;p&gt;     *      * 数组拷贝方式是浅拷贝     * The method &#123;@code clone&#125; for class &#123;@code Object&#125; performs a     * specific cloning operation. First, if the class of this object does     * not implement the interface &#123;@code Cloneable&#125;, then a     * &#123;@code CloneNotSupportedException&#125; is thrown. Note that all arrays     * are considered to implement the interface &#123;@code Cloneable&#125; and that     * the return type of the &#123;@code clone&#125; method of an array type &#123;@code T[]&#125;     * is &#123;@code T[]&#125; where T is any reference or primitive type.     * Otherwise, this method creates a new instance of the class of this     * object and initializes all its fields with exactly the contents of     * the corresponding fields of this object, as if by assignment; the     * contents of the fields are not themselves cloned. Thus, this method     * performs a &quot;shallow copy&quot; of this object, not a &quot;deep copy&quot; operation.     * &lt;p&gt;     * The class &#123;@code Object&#125; does not itself implement the interface     * &#123;@code Cloneable&#125;, so calling the &#123;@code clone&#125; method on an object     * whose class is &#123;@code Object&#125; will result in throwing an     * exception at run time.     *     * @return a clone of this instance.     * @throws CloneNotSupportedException if the object&#39;s class does not     *                                    support the &#123;@code Cloneable&#125; interface. Subclasses     *                                    that override the &#123;@code clone&#125; method can also     *                                    throw this exception to indicate that an instance cannot     *                                    be cloned.     * @see Cloneable     */    @Override    protected Object clone() throws CloneNotSupportedException &#123;        return super.clone();    &#125;&#125;</code></pre><h2 id="含有依赖注入的类的clone-方法"><a href="#含有依赖注入的类的clone-方法" class="headerlink" title="含有依赖注入的类的clone 方法"></a>含有依赖注入的类的clone 方法</h2><pre><code class="lang-java"> @Override    protected Object clone() throws CloneNotSupportedException &#123;        // 修改clone 方法，实现深复制        // return super.clone();        Product clone = (Product) super.clone();        System.out.println(clone.toString());        Inner inner = ((Inner) clone.getInner().clone());        clone.setInner(inner);        return clone;     &#125;</code></pre><h2 id="序列化实现拷贝"><a href="#序列化实现拷贝" class="headerlink" title="序列化实现拷贝"></a>序列化实现拷贝</h2><p>ArrayList .clone();</p><p>类及其子类实现 <code>Serializable</code> 接口</p><pre><code class="lang-java">        //序列化        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();        try(ObjectOutputStream outputStream = new ObjectOutputStream(byteArrayOutputStream)) &#123;            outputStream.writeObject(this);        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());        try(ObjectInputStream inputStream = new ObjectInputStream(byteArrayInputStream))&#123;            Product product = ((Product) inputStream.readObject());            return product;        &#125;catch (IOException e)&#123;            e.printStackTrace();        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;        return null;</code></pre><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>代码不应该依赖于需要复制的对象的具体类事，使用Protoype模式</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>1、可以不耦合具体类的情况下克隆对象<br>2、避免重的初始化代码<br>3、方便构建复杂对象</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>org.springframwork.beans.factory.support.AvstrackBeanDefinition<br>java.util.Arrays<br>ArrayList</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-abbrlink-undefined</title>
      <link href="//b3b09752.html"/>
      <url>//b3b09752.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="错误信息Error"><a href="#错误信息Error" class="headerlink" title="错误信息Error"></a>错误信息Error</h2><pre><code class="lang-xml">&gt; hexo sINFO  Start processingFATAL Something&#39;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlTypeError: Cannot read property &#39;enable&#39; of undefined    at Hexo.logic (/Users/mac/blog/node_modules/hexo-abbrlink/lib/logic.js:59:44)    at Hexo.tryCatcher (/Users/mac/blog/node_modules/bluebird/js/release/util.js:16:23)    at Hexo.&lt;anonymous&gt; (/Users/mac/blog/node_modules/bluebird/js/release/method.js:15:34)    at /Users/mac/blog/node_modules/hexo/lib/extend/filter.js:62:52    at tryCatcher (/Users/mac/blog/node_modules/bluebird/js/release/util.js:16:23)    at Object.gotValue (/Users/mac/blog/node_modules/bluebird/js/release/reduce.js:166:18)    at Object.gotAccum (/Users/mac/blog/node_modules/bluebird/js/release/reduce.js:155:25)    at Object.tryCatcher (/Users/mac/blog/node_modules/bluebird/js/release/util.js:16:23)    at Promise._settlePromiseFromHandler (/Users/mac/blog/node_modules/bluebird/js/release/promise.js:547:31)    at Promise._settlePromise (/Users/mac/blog/node_modules/bluebird/js/release/promise.js:604:18)    at Promise._settlePromise0 (/Users/mac/blog/node_modules/bluebird/js/release/promise.js:649:10)    at Promise._settlePromises (/Users/mac/blog/node_modules/bluebird/js/release/promise.js:729:18)    at _drainQueueStep (/Users/mac/blog/node_modules/bluebird/js/release/async.js:93:12)    at _drainQueue (/Users/mac/blog/node_modules/bluebird/js/release/async.js:86:9)    at Async._drainQueues (/Users/mac/blog/node_modules/bluebird/js/release/async.js:102:5)    at Immediate.Async.drainQueues [as _onImmediate] (/Users/mac/blog/node_modules/bluebird/js/release/async.js:15:14)    at processImmediate (internal/timers.js:456:21)</code></pre><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>根据错误提示，找到<code>/Users/mac/blog/node_modules/hexo-abbrlink/lib/logic.js:59:44</code> 59 行，如图<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20vS2F3WWFuZy9pbWFnZS9yYXcvbWFzdGVyL2ltZy8yMDIwMDcwNzAwMDYxNy5wbmc?x-oss-process=image/format,png" alt=""><br>发现提示 <code>abbrlink.auto_category.enable</code> 未定义，因此在根目录配置文件内添加该属性即可解决。<br>最终 <code>abbrlink</code> 配置如下：</p><blockquote><p>修改 abbrlink 配置：</p><pre><code class="lang-xml">#permalink: :year/:month/:day/:title/permalink: kawyang/:abbrlink.htmlabbrlink:   auto_category:     enable: false  alg: crc32  rep: hex</code></pre></blockquote><h2 id="enable-差别"><a href="#enable-差别" class="headerlink" title="enable 差别"></a>enable 差别</h2><ul><li><p>true : 含有提示, 如图所示<br><img src="https://gitee.com/KawYang/image/raw/master/img/20200707001755.png" alt=""></p></li><li><p>false : 没有提示，如图所示</p></li></ul><p><img src="https://gitee.com/KawYang/image/raw/master/img/20200707001913.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> Error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA创建JavaWeb项目</title>
      <link href="//194d96f2.html"/>
      <url>//194d96f2.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://img-blog.csdnimg.cn/20200306111735159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5nNTIwNTIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200306112111894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5nNTIwNTIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="完成项目创建"><a href="#完成项目创建" class="headerlink" title="完成项目创建"></a>完成项目创建</h3><h2 id="配置TomCat"><a href="#配置TomCat" class="headerlink" title="配置TomCat"></a>配置TomCat</h2><p><img src="https://img-blog.csdnimg.cn/20200306112945675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5nNTIwNTIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200306113223490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5nNTIwNTIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200306113308738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5nNTIwNTIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200306115346742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5nNTIwNTIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="完成TomCat-配置"><a href="#完成TomCat-配置" class="headerlink" title="完成TomCat 配置"></a>完成TomCat 配置</h3><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><img src="https://img-blog.csdnimg.cn/20200306115102223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5nNTIwNTIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二次创建"><a href="#二次创建" class="headerlink" title="二次创建"></a>二次创建</h2><h3 id="直接选择Tomcat即可"><a href="#直接选择Tomcat即可" class="headerlink" title="直接选择Tomcat即可"></a>直接选择Tomcat即可</h3><p><img src="https://img-blog.csdnimg.cn/20200306120255515.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYW5nNTIwNTIx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>===========</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-数据缓存</title>
      <link href="//579a3ded.html"/>
      <url>//579a3ded.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h2><blockquote><p>一级缓存是 SqlSession 级别的缓存，只要 SqlSession 没有被 close 或 flush ，就会存在。</p></blockquote><ul><li><p>当执行两次相同的查询时，MyBatis 会将第一次查询的结果保存到缓存中，再次运行查询代码，就不需要执行SQL 语句，直接从缓存中获取数据。</p></li><li><p>当调用 SqlSession 对数据进行 修改、插入、删除、commit()、close() 等就会清空一级缓存。以保证缓存中数据为最新数据，避免脏读。</p></li><li>一级缓存清空：<ul><li>调用 SqlSession对象的 <code>clearCache()</code> 方法</li><li>close()</li><li>commit()</li></ul></li></ul><h2 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h2><blockquote><p>二级缓存是 <code>Mapper</code> 映射级别的缓存，多个 SqlSession 对象，操作同一个 Mapper 映射的 SQL ，公用一个缓存对象。</p></blockquote><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><h4 id="引入坐标"><a href="#引入坐标" class="headerlink" title="引入坐标"></a>引入坐标</h4><pre><code class="lang-xml">&lt;!-- ehchache 缓存  --&gt;&lt;dependency&gt;    &lt;groupId&gt;net.sf.ehcache&lt;/groupId&gt;    &lt;artifactId&gt;ehcache&lt;/artifactId&gt;    &lt;version&gt;2.8.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-ehcache&lt;/artifactId&gt;    &lt;version&gt;1.0.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="开启缓存"><a href="#开启缓存" class="headerlink" title="开启缓存"></a>开启缓存</h4><p>在 MyBatis的配置文件中(config.xml)，使用 settings 标签下 的 setting 标签 开启缓存。</p><pre><code class="lang-xml">&lt;settings&gt;        &lt;!--  打印SQL  --&gt;        &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot;/&gt;        &lt;!--  开启延迟加载  --&gt;        &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;        &lt;!--  开启二级缓存  --&gt;        &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;    &lt;/settings&gt;</code></pre><h4 id="配置Mapper"><a href="#配置Mapper" class="headerlink" title="配置Mapper"></a>配置Mapper</h4><pre><code class="lang-xml">&lt;mapper namespace=&quot;...&quot;&gt;    &lt;cache&gt;&lt;/cache&gt;    &lt;cache type=&quot;org.mybatis.caches.ehcache.LoggingEhcache&quot; &gt;        &lt;!--   创建缓存之后，对吼一次访问缓存的时间值缓存失效的时间间隔  --&gt;        &lt;property name=&quot;timeToIdleSeconds&quot; value=&quot;3600&quot;/&gt;&lt;!--1 hour--&gt;        &lt;!--   缓存自创建时间起至失效的时间间隔  --&gt;        &lt;property name=&quot;timeToLiveSeconds&quot; value=&quot;3600&quot;/&gt;&lt;!--1 hour--&gt;        &lt;!--        --&gt;        &lt;property name=&quot;maxEntriesLocalHeap&quot; value=&quot;1000&quot;/&gt;        &lt;property name=&quot;maxEntriesLocalDisk&quot; value=&quot;10000000&quot;/&gt;        &lt;!--   缓存回收策略，移除-近期使用最少的对象 --&gt;        &lt;property name=&quot;memoryStoreEvictionPolicy&quot; value=&quot;LRU&quot;/&gt;    &lt;/cache&gt;&lt;/mapper&gt;</code></pre><h4 id="配置-useCache-属性"><a href="#配置-useCache-属性" class="headerlink" title="配置 useCache 属性"></a>配置 useCache 属性</h4><blockquote><p>如果每次查询都需要最新的数据，需要将 select🏷️ 中的 <code>useCache</code> 属性设置为 <code>false</code>, 禁用二级缓存。</p></blockquote><pre><code class="lang-xml">&lt;select id=&quot;findAll&quot; resultType=&quot;com.item.entity.Student&quot; useCache=&quot;false&quot;&gt;    select id,name from student &lt;/select&gt;</code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><blockquote><p>步骤</p></blockquote><p>使用<code>同一个</code>Mapper映射，创建两个<code>不同</code>的 SqlSession 对象，分别执行<code>相同</code> 的SQL操作</p><p>if : 执行一次 SQL 语句<br>    二级缓存成功！<br>else :<br>    二级缓存失败！</p><pre><code class="lang-java">public class FindCache &#123;    public static void main(String[] args) &#123;        InputStream resourceAsStream = FindCache.class.getClassLoader().getResourceAsStream(&quot;config.xml&quot;);        SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();        SqlSessionFactory build = builder.build(resourceAsStream);        SqlSession sqlSession = build.openSession();        IGoodRepository mapper = sqlSession.getMapper(IGoodRepository.class);        Good goodById = mapper.findGoodById(2);        System.out.println(goodById.toString());        //关闭一级缓存        sqlSession.close();        SqlSession sqlSession1 = build.openSession();        IGoodRepository mapper1 = sqlSession1.getMapper(IGoodRepository.class);        Good goodById1 = mapper1.findGoodById(2);        System.out.println(goodById1);    &#125;&#125;</code></pre><p>结果:</p><pre><code class="lang-shell">Cache Hit Ratio [com.kawyang.repository.IGoodRepository]: 0.0Opening JDBC ConnectionCreated connection 392918519.Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@176b75f7]==&gt;  Preparing: select * from good where id=?==&gt; Parameters: 2(Integer)&lt;==    Columns: id, name&lt;==        Row: 2, 电冰箱&lt;==      Total: 1Good(id=2, name=电冰箱, consumers=null)Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@176b75f7]Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@176b75f7]Returned connection 392918519 to pool.Cache Hit Ratio [com.kawyang.repository.IGoodRepository]: 0.5Good(id=2, name=电冰箱, consumers=null)</code></pre><blockquote><p>一下具体内容及原因，有待进一步了解学习。</p></blockquote><p>⚠️ : 如果使用 sqlSession.clearCache(); 清除缓存，但依然缓存着其他 SqlSession 对象的缓存数据。</p><p>如下测试：</p><pre><code class="lang-java">public class FindCache &#123;    public static void main(String[] args) &#123;        InputStream resourceAsStream = FindCache.class.getClassLoader().getResourceAsStream(&quot;config.xml&quot;);        SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();        SqlSessionFactory build = builder.build(resourceAsStream);        SqlSession sqlSession = build.openSession();        IGoodRepository mapper = sqlSession.getMapper(IGoodRepository.class);        Good goodById = mapper.findGoodById(2);        System.out.println(goodById.toString());        SqlSession sqlSession1 = build.openSession();        IGoodRepository mapper1 = sqlSession1.getMapper(IGoodRepository.class);        Good goodById1 = mapper1.findGoodById(2);        System.out.println(goodById1.toString());        //关闭一级缓存        sqlSession.clearCache();        System.out.println(&quot;====    🆑 sqlSession缓存    ====&quot;);        System.out.println(sqlSession1.getMapper(IGoodRepository.class).findGoodById(2));    &#125;&#125;</code></pre><p>结果:</p><pre><code class="lang-shell">Opening JDBC ConnectionCreated connection 392918519.Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@176b75f7]==&gt;  Preparing: select * from good where id=?==&gt; Parameters: 2(Integer)&lt;==    Columns: id, name&lt;==        Row: 2, 电冰箱&lt;==      Total: 1Good(id=2, name=电冰箱, consumers=null)Cache Hit Ratio [com.kawyang.repository.IGoodRepository]: 0.0Opening JDBC ConnectionCreated connection 1804126860.Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@6b88ca8c]==&gt;  Preparing: select * from good where id=?==&gt; Parameters: 2(Integer)&lt;==    Columns: id, name&lt;==        Row: 2, 电冰箱&lt;==      Total: 1Good(id=2, name=电冰箱, consumers=null)====    🆑 sqlSession缓存    ====Cache Hit Ratio [com.kawyang.repository.IGoodRepository]: 0.0Good(id=2, name=电冰箱, consumers=null)</code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-延迟加载</title>
      <link href="//70e7f4d8.html"/>
      <url>//70e7f4d8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="assocation-延迟加载"><a href="#assocation-延迟加载" class="headerlink" title="assocation 延迟加载"></a>assocation 延迟加载</h3><blockquote><p>assocation实现一对一延迟加载</p></blockquote><p>将级联操作 转换为两条SQL语句，通过两次查询方式进行获取数据。</p><p>含有 注入对象的对象查询，当查询结果不涉及注入对象信息时，不进行内嵌对象的查询。</p><pre><code class="lang-xml">&lt;!--  延迟加载  --&gt;&lt;resultMap id=&quot;resultStuLazy&quot; type=&quot;com.item.entity.Student&quot; &gt;    &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;    &lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt;    &lt;!-- 添加select 属性 --&gt;    &lt;association property=&quot;classes&quot; javaType=&quot;com.item.entity.Classes_&quot;                 select=&quot;com.item.repository.IClasses.findById&quot;                 column=&quot;cid&quot;&gt;    &lt;/association&gt;&lt;/resultMap&gt;&lt;select id=&quot;findById&quot; resultMap=&quot;resultStuLazy&quot;&gt;    select id,name,cid from student where id=#&#123;id&#125;&lt;/select&gt;</code></pre><blockquote><p>在全局配置文件中开启延迟加载</p></blockquote><pre><code class="lang-xml">&lt;settings&gt;    &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;     &lt;setting name=&quot;aggressiveLazyLoading&quot; value=&quot;false&quot;/&gt;&lt;/settings&gt;</code></pre><p><a href="https://www.jianshu.com/p/6f5b42d52d38">name 参数参考</a></p><h3 id="Collection-延迟加载"><a href="#Collection-延迟加载" class="headerlink" title="Collection 延迟加载"></a>Collection 延迟加载</h3><blockquote><p>Collection 实现一对多延迟加载。</p></blockquote><p>在查询班级信息时，如果需要查询班级内所有👨‍🎓信息，需要进行级联操作。<br>可以将该操作分为两步：</p><ul><li>先根据🆔查询出班级信息 =&gt; select * from classes where id=?</li><li>再根据👩‍🎓的班级🆔，查询出班级内所有👨‍🎓 =&gt; select * from student where cid=?</li></ul><blockquote><p>查询班级信息</p></blockquote><p>采用配置文件的方式，用 <code>collection</code> 配置第二步的操作，使用 <code>ofType</code> 属性，完成数据类型的指定。<br>如下：</p><pre><code class="lang-xml">    &lt;!--  延迟加载start  --&gt;    &lt;resultMap id=&quot;classLazy&quot; type=&quot;com.kawyang.entity.ClassesStu&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;id&quot; /&gt;        &lt;result property=&quot;name&quot; column=&quot;name&quot; /&gt;        &lt;collection property=&quot;students&quot; ofType=&quot;com.kawyang.entity.Student&quot;                    select=&quot;com.kawyang.repository.IStudentRepository.findByCid&quot;                    column=&quot;id&quot; /&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;findByIdLazy&quot; resultMap=&quot;classLazy&quot; parameterType=&quot;int&quot;&gt;        select * from classes where id=#&#123;id&#125;    &lt;/select&gt;    &lt;!--  延迟加载end  --&gt;</code></pre><blockquote><p>根据班级 🆔 查询所有👩‍🎓👨‍🎓，使用注解方式如下：</p></blockquote><pre><code class="lang-java">/** * * @param id * @return */@Select(&quot;select * from student where cid=#&#123;id&#125;&quot;)List&lt;Student&gt; findByCid(int id);</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code class="lang-java">IStudentRepository mapper = MapperUtil.getMapper(&quot;config.xml&quot;, IStudentRepository.class);Student byIdLazy = mapper.findByIdLazy(2);//通过 🆔 查询学生信息，只需要获取 name 属性，不需要进行第二步操作。System.out.println(byIdLazy.getName());System.out.println(&quot;------------&quot;);//需要获取班级的名称，需要进行两次查询操作。System.out.println(byIdLazy.getClasses().getName());System.out.println(&quot;============&quot;);IClassRepository mapper1 = MapperUtil.getMapper(&quot;config.xml&quot;, IClassRepository.class);ClassesStu byIdLazy1 = mapper1.findByIdLazy(2);//通过 🆔 查询本季信息，只需要获取 name 属性，不需要进行第二步操作。System.out.println(byIdLazy1.getName());System.out.println(&quot;------------&quot;);//需要获取班级所有👩‍🎓👨‍🎓信息，需要进行两次查询操作。System.out.println(byIdLazy1.getStudents());</code></pre><blockquote><p>运行结果</p></blockquote><pre><code class="lang-shell">Opening JDBC ConnectionCreated connection 1267149311.Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@4b8729ff]==&gt;  Preparing: select * from student where id=?==&gt; Parameters: 2(Integer)&lt;==    Columns: id, name, cid&lt;==        Row: 2, KawYang, 2&lt;==      Total: 1KawYang------------==&gt;  Preparing: select * from classes where id=?==&gt; Parameters: 2(Integer)&lt;==    Columns: id, name&lt;==        Row: 2, 二班&lt;==      Total: 1二班============Opening JDBC ConnectionCreated connection 1414549197.Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@54504ecd]==&gt;  Preparing: select * from classes where id=?==&gt; Parameters: 2(Integer)&lt;==    Columns: id, name&lt;==        Row: 2, 二班&lt;==      Total: 1二班------------==&gt;  Preparing: select * from student where cid=?==&gt; Parameters: 2(Integer)&lt;==    Columns: id, name, cid&lt;==        Row: 2, KawYang, 2&lt;==        Row: 3, 张三, 2&lt;==      Total: 2[Student(id=2, name=KawYang, classes=null), Student(id=3, name=张三, classes=null)]Process finished with exit code 0</code></pre><p>⚠️ : 由于 MyBatis 默认开启一级缓存，所以在第二步查询时，只执行了第二条SQL语句。</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-模糊查询&amp;动态SQL</title>
      <link href="//5882fb3c.html"/>
      <url>//5882fb3c.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><ul><li>#{} sql语句占位符</li><li>${} sql语句拼接</li></ul><pre><code class="lang-sql">select * from student where name like #&#123;data&#125;;-- =&gt; select * from student where name like ?;select * from student where name like &#39;%$&#123;data&#125;%&#39;; -- =&gt; select * from student where name like &#39;%data%&#39;;</code></pre><h2 id="配置实体类路径-别名"><a href="#配置实体类路径-别名" class="headerlink" title="配置实体类路径 (别名)"></a>配置实体类路径 (别名)</h2><p>在全局配置文件中使用</p><pre><code class="lang-xml">&lt;!--  别名设置，放在settings标签之下，environment 标签之前  --&gt;&lt;typeAliases&gt;    &lt;!-- 单个别名配置 --&gt;    &lt;typeAlias alias=&quot;student&quot; type=&quot;com.kawyang.entity.Student&quot;/&gt;    &lt;!--   批量别名，扫描包内所有内容，别名为类名(首字母大小写都可以)     --&gt;    &lt;package name=&quot;com.kawyang.entity&quot;/&gt;&lt;/typeAliases&gt;</code></pre><blockquote><p>配置文件书写顺序<br>properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,<br>objectWrapperFactory?,plugins?,environments?,databaseIdProvider?,mappers?</p></blockquote><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><blockquote><p>通过 if 标签可以判断是否包含查询的字段</p></blockquote><pre><code class="lang-xml">&lt;select id=&quot;findByStudent&quot; parameterType=&quot;student&quot; resultType=&quot;student&quot;&gt;        select * from student where 1=1        &lt;if test=&quot;name != null and name != &#39;&#39;&quot;&gt;            and name like #&#123;name&#125;        &lt;/if&gt;        &lt;if test=&quot;age != -1&quot;&gt;            and age=#&#123;age&#125;        &lt;/if&gt;    &lt;/select&gt;</code></pre><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><blockquote><p>通过 where 标签可以解决以上 1=1 的多余内容  </p></blockquote><pre><code class="lang-xml">&lt;select id=&quot;findByStudent&quot; parameterType=&quot;student&quot; resultType=&quot;student&quot;&gt;        select * from student        &lt;where&gt;            &lt;if test=&quot;name != null and name != &#39;&#39;&quot;&gt;                and name like #&#123;name&#125;            &lt;/if&gt;            &lt;if test=&quot;age != -1&quot;&gt;                and age=#&#123;age&#125;            &lt;/if&gt;        &lt;/where&gt;    &lt;/select&gt;</code></pre><p>where 会自动判断第一条判断条件，并将 and 删除</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>select * from student where id in (1,2,3);</p><p>后端传递的参数为 Integer 的 集合<br>需要对该集合进行封装</p><pre><code class="lang-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class ListIds extends Serializable&#123;    private List&lt;Integer&gt; listIds;&#125;</code></pre><pre><code class="lang-xml">&lt;!-- 查询所有用户在 id 的集合之中 --&gt;&lt;select id=&quot;findInIds&quot; resultType=&quot;student&quot; parameterType=&quot;ListIds&quot;&gt; &lt;!--select * from student where id in (1,2,3);--&gt;    select * from student    &lt;where&gt;        &lt;if test=&quot;ids != null and ids.size() &gt; 0&quot;&gt;            &lt;foreach collection=&quot;student&quot; open=&quot;id in ( &quot; close=&quot;)&quot; separator=&quot;,&quot; item=&quot;id&quot; &gt;                #&#123;id&#125;            &lt;/foreach&gt;        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;&lt;select id=&quot;findByIds&quot; resultType=&quot;com.kawyang.entity.Student&quot; parameterType=&quot;com.kawyang.entity.ListIds&quot;&gt;        select * from student        &lt;where&gt;        &lt;!--             foreach             collection=&quot;需要遍历的元素&quot;             open=&quot;元素之前的部分&quot;            close=&quot;之后部分&quot;             separator=&quot;分割方式&quot;             item=&quot;属性名&quot; &lt;/foreach&gt;  --&gt;            &lt;foreach collection=&quot;ids&quot;  open=&quot;id in ( &quot; close=&quot;)&quot; separator=&quot;,&quot; item=&quot;id&quot; &gt;                #&#123;id&#125;            &lt;/foreach&gt;        &lt;/where&gt;    &lt;/select&gt;</code></pre><h3 id="choose"><a href="#choose" class="headerlink" title="choose"></a>choose</h3><p>choose 标签，类似 java 中的 <code>switch-case-default</code> 结构。</p><pre><code class="lang-xml">&lt;select id=&quot;findByStu&quot; parameterType=&quot;com.item.entity.Student&quot; &gt;    select * from student    &lt;where&gt;        &lt;choose&gt;            &lt;when test=&quot;id != 0&quot;&gt;                id = #&#123;id&#125;            &lt;/when&gt;            &lt;when test=&quot;name != null&quot;&gt;                name=#&#123;name&#125;            &lt;/when&gt;        &lt;/choose&gt;    &lt;/where&gt;&lt;/select&gt;</code></pre><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>使用 sql 标签 将 使用次数较多的sql语句用sql🏷️进行定义，使用 include🏷️引入到真正的查询语句中，使用方便。<br>例子：</p><pre><code class="lang-xml">&lt;sql id=&quot;selectAll&quot; &gt;    select * from student&lt;/sql&gt;&lt;select id=&quot;findByStudent&quot; parameterType=&quot;com.kawyang.entity.Student&quot; resultType=&quot;com.kawyang.entity.Student&quot; &gt;--         select * from student&lt;include refid=&quot;selectAll&quot;&gt;&lt;/include&gt;&lt;where&gt;    &lt;choose&gt;        &lt;when test=&quot;id != 0&quot;&gt;            id=#&#123;id&#125;        &lt;/when&gt;        &lt;when test=&quot;name != null&quot;&gt;            name=#&#123;name&#125;        &lt;/when&gt;    &lt;/choose&gt;&lt;/where&gt;&lt;/select&gt;</code></pre><h3 id="注解形式使用动态SQL-待补充"><a href="#注解形式使用动态SQL-待补充" class="headerlink" title="注解形式使用动态SQL(待补充)"></a>注解形式使用动态SQL(待补充)</h3><p>添加  <code>&lt;script&gt;</code> 标签，即可使用 xml 中形式进行配置。</p><pre><code class="lang-java">    @Select(&quot;&lt;script&gt;&quot; +            &quot;select * from student&quot; +            &quot;        &lt;where&gt;&quot; +            &quot;            &lt;if test=\&quot;ids != null and ids.size&gt;0\&quot;&gt;&quot; +            &quot;                &lt;foreach collection=\&quot;ids\&quot;  open=\&quot;id in ( \&quot; close=\&quot;)\&quot; separator=\&quot;,\&quot; item=\&quot;id\&quot; &gt;&quot; +            &quot;                    #&#123;id&#125;&quot; +            &quot;                &lt;/foreach&gt;&quot; +            &quot;            &lt;/if&gt;&quot; +            &quot;        &lt;/where&gt; &quot; +            &quot;&lt;/script&gt;&quot;)    List&lt;Student&gt; findByIds(ListIds listIds);</code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-级联操作</title>
      <link href="//fb315360.html"/>
      <url>//fb315360.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MyBatis-级联操作"><a href="#MyBatis-级联操作" class="headerlink" title="MyBatis 级联操作"></a>MyBatis 级联操作</h1><p><a href="http://c.biancheng.net/view/4367.html">详细教程网络资源</a></p><p><a href="https://github.com/LYgithub/IDEAProjects/tree/master/MyBatisNodeDemo2">项目</a></p><h2 id="一对一-student-gt-class"><a href="#一对一-student-gt-class" class="headerlink" title="一对一 (student -&gt; class)"></a>一对一 (student -&gt; class)</h2><p>student 包含个人基本信息和内嵌对象 classes。<br>在查询student时，需要联合 student表和classes表进行查询。</p><h3 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h3><pre><code class="lang-sql">CREATE TABLE classes(    id int not null primary key,    name varchar(20));insert into classes (id,name) values (1,&quot;一班&quot;),(2,&quot;二班&quot;),(3,&quot;三班&quot;);CREATE TABLE student(    id int not null primary key auto_increment,    name varchar(10),    cid int,    foreign key (cid) references classes(id));insert into student (id, name, cid)     values (1,&quot;KawYang&quot;,1),(2,&quot;KawYang&quot;,2),(3,&quot;张三&quot;,2),(4,&quot;李四&quot;,3),(5,&quot;Tom&quot;,3),(6,&quot;Jary&quot;,3);</code></pre><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><ul><li>Classes类对象</li></ul><pre><code class="lang-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class Classes&#123;    private int id;    private String name;&#125;</code></pre><ul><li>Student类对象</li></ul><pre><code class="lang-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class Student&#123;    private int id;    private String name;    private Classes classes;&#125;</code></pre><h3 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h3><p>编写数据库操作的接口</p><pre><code class="lang-java">public interface IStudentRepository &#123;    /**     * find by id     * @param id     * @return student     */    Student findById(int id);    /**     * find all     * @return student list     */    List&lt;Student&gt; findAll();&#125;</code></pre><h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><p>mapper🏷️ : <code>namespace</code> 属性映射到 <code>student</code> 的操作接口。<br>resultMap🏷️ : 配置类对象 —&gt; 在 <code>select</code> 标签中，使用 <code>resultMap</code> 属性进行映射。<br>association🏷️ : 注入内嵌对象，<code>javaType</code> 将内嵌对象映射到实体类。</p><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.kawyang.repository.IStudentRepository&quot;&gt;    &lt;resultMap id=&quot;student&quot; type=&quot;com.kawyang.entity.Student&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;sid&quot;/&gt;        &lt;result property=&quot;name&quot; column=&quot;sname&quot; /&gt;        &lt;association property=&quot;classes&quot; ofType=&quot;com.kawyang.entity.Classes&quot;&gt;            &lt;id property=&quot;id&quot; column=&quot;cid&quot; /&gt;            &lt;result property=&quot;name&quot; column=&quot;cname&quot; /&gt;        &lt;/association&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;findById&quot; resultMap=&quot;student&quot; parameterType=&quot;int&quot;&gt;        select s.id as sid,s.name as sname, c.id as cid, c.name as cname        from student s,classes c        where s.cid=c.id and s.id=#&#123;id&#125;    &lt;/select&gt;    &lt;select id=&quot;findAll&quot; resultMap=&quot;student&quot;&gt;        select s.id as sid,s.name as sname, c.id as cid, c.name as cname        from student s,classes c        where s.cid=c.id    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h2 id="一对多-class-gt-studentes"><a href="#一对多-class-gt-studentes" class="headerlink" title="一对多 (class -&gt; studentes)"></a>一对多 (class -&gt; studentes)</h2><p>一个班级含有多个👨‍🎓，通过查询班级信息，能够将班级中的所有学生信息查询出来<br>需要联合 classes类和student进行查询。</p><h3 id="数据表-1"><a href="#数据表-1" class="headerlink" title="数据表"></a>数据表</h3><p>同上</p><h3 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h3><ul><li>ClassesStu</li></ul><pre><code class="lang-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class ClassesStu&#123;    int id;    String name;    List&lt;Student&gt; students;&#125;</code></pre><h3 id="Repository-1"><a href="#Repository-1" class="headerlink" title="Repository"></a>Repository</h3><pre><code class="lang-java">public interface IClassesStuRepository &#123;    /**     * find classesStu by id     * @param id key     * @return classesStu     */    ClassesStu findById(int id);    /**     * find all classesStu     * @return classesStu list     */    List&lt;ClassesStu&gt; findAll();&#125;</code></pre><h3 id="Mapper-1"><a href="#Mapper-1" class="headerlink" title="Mapper"></a>Mapper</h3><p>配置文件resultMap</p><pre><code class="lang-xml">    &lt;resultMap id=&quot;classesStu&quot; type=&quot;com.kawyang.entity.ClassesStu&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;cid&quot; /&gt;        &lt;result property=&quot;name&quot; column=&quot;cname&quot; /&gt;        &lt;collection property=&quot;students&quot; ofType=&quot;com.kawyang.entity.Student&quot; &gt;            &lt;id property=&quot;id&quot; column=&quot;sid&quot; /&gt;            &lt;result property=&quot;name&quot; column=&quot;sname&quot; /&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;</code></pre><p>collection🏷️ : 将查询的 <code>cid &amp; cname</code> 相同的结果，将 sid 和 sname 封装成 <code>ofType</code> 指定类型的对象，并将多个对象以集合的方式返回。</p><pre><code class="lang-shell">==&gt;  Preparing: select c.id as cid, c.name as cname, s.id as sid, s.name as sname from student s, classes c where c.id=s.cid==&gt; Parameters: &lt;==    Columns: cid, cname, sid, sname&lt;==        Row: 1, 一班, 1, KawYang&lt;==        Row: 2, 二班, 2, KawYang&lt;==        Row: 2, 二班, 3, 张三&lt;==        Row: 3, 三班, 4, 李四&lt;==        Row: 3, 三班, 5, Tom&lt;==        Row: 3, 三班, 6, Jary&lt;==      Total: 6</code></pre><h2 id="多对多-goods-lt-gt-consumers"><a href="#多对多-goods-lt-gt-consumers" class="headerlink" title="多对多 (goods &lt;-&gt; consumers)"></a>多对多 (goods &lt;-&gt; consumers)</h2><pre><code class="lang-vim">一种商品可以被多个消费者购买一个消费者可以购买多个商品商品与消费者事多对多的关系。</code></pre><h3 id="数据表-2"><a href="#数据表-2" class="headerlink" title="数据表"></a>数据表</h3><p>good : 商品信息表<br>consumer : 消费者信息表<br>con_good : 中间表</p><pre><code class="lang-sql">CREATE TABLE good(    id int primary key not null ,    name varchar(30));insert into good (id, name) VALUES (1,&quot;电视&quot;),(2, &quot;电冰箱&quot;),(3, &quot;洗衣机&quot;),(4,&quot;笔记本&quot;);CREATE TABLE consumer(    id int primary key not null,    name varchar(30));insert into consumer (id, name) VALUES  (1,&quot;KawYang&quot;),(2,&quot;李四&quot;),(3,&quot;张三&quot;);CREATE TABLE con_good(    id int primary key not null ,    gid int,    cid int,    foreign key (gid) references good(id),    foreign key (cid) references consumer(id));insert into con_good (id, gid, cid) VALUES (1,1,1),(2,3,2),(3,1,3),(4,2,1),(5,4,2),(6,3,3);</code></pre><h3 id="Mapper-2"><a href="#Mapper-2" class="headerlink" title="Mapper"></a>Mapper</h3><blockquote><p>多对多相当于两个一对多的关系，需要配置两个xml文件</p></blockquote><ul><li><p>IGoodMapper</p><pre><code class="lang-xml">&lt;mapper namespace=&quot;com.kawyang.repository.IGoodRepository&quot;&gt;  &lt;resultMap id=&quot;good&quot; type=&quot;com.kawyang.entity.Good&quot;&gt;      &lt;id property=&quot;id&quot; column=&quot;gid&quot;/&gt;      &lt;result property=&quot;name&quot; column=&quot;gname&quot; /&gt;      &lt;collection property=&quot;consumers&quot; ofType=&quot;com.kawyang.entity.Consumer&quot;&gt;          &lt;id property=&quot;id&quot; column=&quot;cid&quot; /&gt;          &lt;result property=&quot;name&quot; column=&quot;cname&quot; /&gt;      &lt;/collection&gt;  &lt;/resultMap&gt;  &lt;select id=&quot;findAll&quot; resultMap=&quot;good&quot; &gt;      select g.id as gid,g.name as gname, c.id as cid, c.name as cname      from good g,consumer c,con_good m      where g.id=m.gid and m.cid=c.id  &lt;/select&gt;  &lt;select id=&quot;findById&quot; resultMap=&quot;good&quot; parameterType=&quot;int&quot;&gt;      select c.id as cid,c.name as cname,g.id as gid,g.name as gname      from Good as g,Consumer as c, Con_good m      where c.id = m.cid and g.id=m.gid and g.id=#&#123;id&#125;  &lt;/select&gt;&lt;/mapper&gt;</code></pre></li><li><p>IConsumerMapper</p></li></ul><pre><code class="lang-xml">&lt;mapper namespace=&quot;com.kawyang.repository.IConsumerRepository&quot;&gt;    &lt;resultMap id=&quot;consumer&quot; type=&quot;com.kawyang.entity.Consumer&quot; &gt;        &lt;id column=&quot;id&quot; property=&quot;id&quot; /&gt;        &lt;result column=&quot;name&quot; property=&quot;name&quot; /&gt;        &lt;collection property=&quot;goods&quot; ofType=&quot;com.kawyang.entity.Good&quot; &gt;            &lt;id column=&quot;gid&quot; property=&quot;id&quot; /&gt;            &lt;result column=&quot;gname&quot; property=&quot;name&quot; /&gt;        &lt;/collection&gt;    &lt;/resultMap&gt;    &lt;select id=&quot;findAll&quot; resultMap=&quot;consumer&quot; &gt;        select c.id as id,c.name as name,g.id as gid,g.name as gname        from Good as g,Consumer as c, Con_good m        where c.id = m.cid and g.id=m.gid;    &lt;/select&gt;    &lt;select id=&quot;findById&quot; resultMap=&quot;consumer&quot; parameterType=&quot;int&quot;&gt;        select c.id as id,c.name as name,g.id as gid,g.name as gname        from Good as g,Consumer as c, Con_good m        where c.id = m.cid and g.id=m.gid and g.id=#&#123;id&#125;    &lt;/select&gt;&lt;/mapper&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-基本操作</title>
      <link href="//8661f06f.html"/>
      <url>//8661f06f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h2><h2 id="pom-xml-导入相关依赖"><a href="#pom-xml-导入相关依赖" class="headerlink" title="pom.xml 导入相关依赖"></a>pom.xml 导入相关依赖</h2><ul><li>org.mybatis -&gt; mybatis</li><li>mysql-connection-java -&gt; mysql</li><li>org.projectlombok -&gt; lombok</li><li>log4j -&gt; log4j</li></ul><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;org.example&lt;/groupId&gt;    &lt;artifactId&gt;MyBatis&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;            &lt;version&gt;3.5.5&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;8.0.20&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;            &lt;artifactId&gt;lombok&lt;/artifactId&gt;            &lt;version&gt;1.18.12&lt;/version&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;log4j&lt;/groupId&gt;            &lt;artifactId&gt;log4j&lt;/artifactId&gt;            &lt;version&gt;1.2.17&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><ul><li><strong>配置 <code>mapper</code> 读取位置</strong> ，解决Mapper配置文件读取不到的关键<pre><code class="lang-xml">&lt;build&gt; &lt;resources&gt;     &lt;resource&gt;         &lt;directory&gt;src/main/java&lt;/directory&gt;         &lt;includes&gt;             &lt;include&gt;**/*.xml&lt;/include&gt;         &lt;/includes&gt;     &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt;</code></pre></li></ul><blockquote><p>resources/config.xml</p></blockquote><p>通过 <code>config.xml</code> 进行数据库的配置和相关Mapper的导入。</p><ul><li>约束</li></ul><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;    &lt;configuration&gt;        &lt;!-- SQL配置 --&gt;        &lt;!-- 连接配置 --&gt;        &lt;!-- 注册Mapper --&gt;    &lt;/configuration&gt;</code></pre><ul><li>SQL 的相关配置</li></ul><pre><code class="lang-xml">&lt;settings&gt;    &lt;!-- 打印SQL语句 --&gt;    &lt;setting name=&quot;logImpl&quot; value=&quot;STDOUT_LOGGING&quot; /&gt;&lt;/settings&gt;</code></pre><ul><li>连接配置</li></ul><pre><code class="lang-xml">&lt;environments default=&quot;mysql&quot;&gt;    &lt;environment id=&quot;mysql&quot;&gt;        &lt;transactionManager type=&quot;JDBC&quot; /&gt;        &lt;dataSource type=&quot;POOLED&quot;&gt;            &lt;property name=&quot;driver&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;            &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;            &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;            &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/JavaWeb?userSSL=false&amp;amp;allowPublicKeyRetrieval=true&quot;/&gt;        &lt;/dataSource&gt;    &lt;/environment&gt;&lt;/environments&gt;</code></pre><ul><li><p>注册Mapper</p><pre><code class="lang-xml">&lt;mappers&gt;  &lt;!-- 注解形式注册 --&gt;  &lt;mapper class=&quot;com.kawyang.repository.IClass&quot; /&gt;  &lt;!-- 配置文件方式注册 --&gt;  &lt;mapper resource=&quot;com/kawyang/mapper/IClassesMapper.xml&quot; /&gt;  &lt;mapper resource=&quot;com/kawyang/mapper/IStudentMapper.xml&quot; /&gt;&lt;/mappers&gt;</code></pre></li></ul><h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><p>创建实体类对象。</p><p>lombok 会通过以下注解快速🔜完成设置<br>            <code>@Data</code> : 自动添加 Get/Set 方法。<br>            <code>@AllArgsConstructor</code> : 有参构造<br>            <code>@NoArgsConstructor</code> : 无参构造  </p><ul><li>配置文件形式</li></ul><pre><code class="lang-java">@Data@AllArgsConstructor@NoArgsConstructorpublic class Classes &#123;    private int id;    private String name;&#125;</code></pre><h2 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h2><blockquote><p>编写数据库操作接口</p></blockquote><ul><li><p>配置文件形式</p><p>通过配置文件形式，需要编写相应的 <code>Mapper</code> 配置文件，将接口中的方法与 数据库的操作进行映射。<br>并且在 <code>config.xml</code> 中对配置文件 通过 mapper 🏷️的 <code>resource</code> 属性，完成注册。</p></li></ul><pre><code class="lang-java">public interface IClasses &#123;    Classes findById(int id);    List&lt;Classes&gt; findAll();    int insertClass(Classes classes);    int deleteById(int id);    int updateClass(Classes classes);    ClassesStudents findClassAndStudentById(int id);    List&lt;ClassesStudents&gt; findAllClassAndStudent();&#125;</code></pre><ul><li>注解形式</li></ul><p>通过一下注解，编写相应的SQL语句，完成接口方法与数据库操作的映射，不需要配置文件，在 <code>config.xml</code> 中，使用 mapper🏷️ 的  <code>class</code> 属性完成注册。</p><ul><li>@Insert(String sql) : 增</li><li>@Delete(String sql) : 删</li><li>@Update(String sql) : 改</li><li>@Select(String sql) : 查</li></ul><pre><code class="lang-java">public interface IClasses &#123;    @Select(&quot;select * from classes where id=#&#123;id&#125;&quot;)    Classes findById(int id);    @Select(&quot;select * from classes&quot;)    List&lt;Classes&gt; findAll();    @Insert(&quot;insert into classes (id,name) values (#&#123;id&#125;,#&#123;name&#125;)&quot;)    int insertClass(Classes classes);    @Delete(&quot;delete from classes where id=#&#123;id&#125;&quot;)    int deleteById(int id);    @Update(&quot;update from classes set name=#&#123;name&#125; where id=#&#123;id&#125;&quot;)    int updateClass(Classes classes);&#125;</code></pre><h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><p>com.mapper.IClassesMapper</p><p>编写数据库操作的Mapper文件，完成方法与查询语句的映射。</p><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper&gt;    &lt;select &gt;..&lt;/select&gt;    &lt;delete &gt;..&lt;/delete&gt;    &lt;update &gt;..&lt;/update&gt;    &lt;insert &gt;..&lt;/insert&gt;&lt;/mapper&gt;</code></pre><p>Mapper🏷️ 通过属性 <code>namespace</code> : 数据库操作接口的全路径<br>数据库操作🏷️ :</p><ul><li>select<ul><li>id : 映射接口的方法名</li><li>parameterType : 方法参数的类型</li><li>resultType : 返回值类型的全路径</li></ul></li><li>delete<ul><li>id : 映射接口的方法名</li><li>parameterType : 方法参数的类型</li><li>无返回值属性，返回值为 <code>int</code> 类型</li></ul></li><li>update<ul><li>id : 映射接口的方法名</li><li>parameterType : 方法参数的类型</li><li>无返回值属性，返回值为 <code>int</code> 类型</li></ul></li><li><p>insert</p><ul><li>id : 映射接口的方法名</li><li>parameterType : 方法参数的类型</li></ul></li><li><p>resultMap:</p></li></ul><p>通过 <code>resultMap</code> 进行含有内嵌对象类的配置。  </p><p>如：StudentClas 类，除了包含student的基本信息外，含有内嵌对象 classes，需要通过 resultMap 来完成数据的配置。</p><pre><code class="lang-xml">&lt;resultMap id=&quot;StudentCla&quot; type=&quot;com.kawyang.entity.StudentCla&quot; &gt;    &lt;id property=&quot;id&quot; column=&quot;sid&quot;/&gt;    &lt;result property=&quot;name&quot; column=&quot;sname&quot; /&gt;    &lt;collection property=&quot;students&quot; ofType=&quot;com.kawyang.model.Classes&quot;&gt;        &lt;id property=&quot;id&quot; column=&quot;cid&quot;/&gt;        &lt;result property=&quot;name&quot; column=&quot;cname&quot; /&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id=&quot;selectStudentClaById&quot; resultMap=&quot;StudentCla&quot; parameterType=&quot;ind&quot;&gt;    select s.id as sid, s.name as sname, c.id as cid, c.name as cname    from student s,classes c     where s.cid=c.id and s.id=#&#123;id&#125;&lt;/select&gt;</code></pre><ul><li>resultMap🏷️ :   <ul><li>id -&gt; resultMap 的 id  </li><li>type -&gt; 实体类类型  </li></ul></li><li>id 和 result🏷️ : <ul><li>id : 指定主键信息 </li><li>result : 指定非主键信息</li><li>property -&gt; 类的属性名称  </li><li>column -&gt; 查询结果的列名  </li></ul></li><li>collection🏷️：完成对象注入  <ul><li>property -&gt; 类的注入对象的名称  </li><li>ofType -&gt; 注入对象的类型  </li></ul></li></ul><h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><ol><li>读取配置文件</li><li>创建SQLSession对象</li><li>使用SQLSession对象，创建 相应操作的 mapper 对象</li><li>使用 mapper 对象完成 数据库的操作</li></ol><pre><code class="lang-java">public class Main&#123;    public static void main(String[] args) &#123;        // 1. 读取配置文件        InputStream in = Main.class.getClassLoader().getResourceAsStream(&quot;config.xml&quot;);        // 2. 创建SQLSession对象        // 2.1 创建 SqlSession 工厂🏭类        SqlSessionFactoryBuilder bulider = new SqlSessionFactoryBuilder();        // 2.2 使用配置文件 完成🏭创建        SqlSessionFactory bulid = bulider.build(in);        // 2.3 使用🏭创建 SqlSession        SqlSession session = build.openSession();        // 3. 使用SQLSession对象，创建 相应操作的 mapper 对象        IStudentCla mapper = session.getMapper(IStudentCla.class);        // 4. 使用 mapper 对象完成 数据库的操作        StudentCla student = mapper.findById(2);        // 5. 提交事务  添加数据时使用        session.commit();        // 5. 关闭 SqlSession        session.close();    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http</title>
      <link href="//78493f3f.html"/>
      <url>//78493f3f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="转发和重定向的区别"><a href="#转发和重定向的区别" class="headerlink" title="转发和重定向的区别"></a>转发和重定向的区别</h1><div class="table-container"><table><thead><tr><th>区别</th><th style="text-align:left">转发 <strong>forword()</strong></th><th>重定向 <strong>sendredirect()</strong></th></tr></thead><tbody><tr><td>定义</td><td style="text-align:left">由服务器端进行跳转</td><td>客户端进行跳转</td></tr><tr><td>请求数</td><td style="text-align:left">一次</td><td>两次</td></tr><tr><td>格式</td><td style="text-align:left">req.getRequestDispatcher(“responseDemo3”).forward(req, resp);</td><td>resp.sendRedirect(“/HomeWork/responseDemo2”);</td></tr><tr><td>地址栏</td><td style="text-align:left">不变</td><td>改变，可以跳转到服务器外的网站</td></tr><tr><td>数据</td><td style="text-align:left">请求域中数据不会丢失</td><td>请求域中数据丢失</td></tr></tbody></table></div><h1 id="doPost-amp-doGet-请求"><a href="#doPost-amp-doGet-请求" class="headerlink" title="doPost &amp; doGet 请求"></a>doPost &amp; doGet 请求</h1><pre><code class="lang-java">@Overrideprotected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        System.out.println(&quot;Demo3...&quot;);        // 默认 ISO-8859 TomCat        resp.setCharacterEncoding(&quot;utf8&quot;);        //告诉浏览器编码 包含设置 TomCat        resp.setHeader(&quot;Content-type&quot;, &quot;text/html;charset=utf-8&quot;);        //简单方式        resp.setContentType(&quot;text/html;charset=utf-8&quot;);        //字节输出流        PrintWriter writer = resp.getWriter();        writer.write(&quot;Hello Response&quot;);        //window  JBK， JB132        writer.write(&quot;你好！！&quot;);        // 字节输出流        ServletOutputStream outputStream = resp.getOutputStream();        resp.setContentType(&quot;text/html;charset=utf-8&quot;);        outputStream.write(&quot;hello&quot;.getBytes(StandardCharsets.UTF_8));        outputStream.write(&quot;你好&quot;.getBytes(&quot;utf-8&quot;));    &#125;</code></pre><h1 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h1><blockquote><p>设置response 请求头，content-disposition:attachment;filename=file “ 设置 </p><p>MIME 类型：多用途互联网邮件扩展类型。是设定某种扩展名的<a href="">文件</a>用一种<a href="">应用程序</a>来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。</p></blockquote><ol><li>通过浏览器发送的请求获取需要的内容</li><li>使用字节输入流加载进内存</li><li>设置相应头信息</li><li>将数据传送到网络</li></ol><pre><code class="lang-java">// Download?filename=images_1.png@Overrideprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;        //1. 获取请求参数        String filename = request.getParameter(&quot;filename&quot;);        //2.使用字节输入流加载进内存        //2.1 找到真实路径        ServletContext servletContext = this.getServletContext();        String path = servletContext.getRealPath(&quot;/img/&quot; + filename);        //2.2 关联字节流        FileInputStream fileInputStream = new FileInputStream(path);// -------------        //3. 设置response的响应头        //MIME 类型        String mimeType = servletContext.getMimeType(path);        response.setHeader(&quot;content-type&quot;, mimeType);        //设置打开方式 打开方式        response.setHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + filename);// -------------         // 4. 输出到网络        ServletOutputStream outputStream = response.getOutputStream();        byte[]buff = new byte[1024 * 8];        int len = 0;        while((len = fileInputStream.read(buff)) != -1)&#123;            outputStream.write(buff, 0, len);        &#125;        outputStream.shu        fileInputStream.close();    &#125;</code></pre><h1 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h1><p><a href="https://blog.csdn.net/weixin_40001125/article/details/88663468">转发和重定向的区别和使用</a></p><p> <a href="https://baike.baidu.com/item/MIME/2900607#2">MIME类型</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>验证码</title>
      <link href="//3523544f.html"/>
      <url>//3523544f.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>验证码使用</p></blockquote><h1 id="验证码生成步骤"><a href="#验证码生成步骤" class="headerlink" title="验证码生成步骤"></a>验证码生成步骤</h1><ol><li>创建图片缓存对象<code>BufferedImage</code></li><li>画图 </li><li>生成随机数据</li><li>填充到图片中</li><li>干扰线</li><li>将图片展示到前端页面</li></ol><pre><code class="lang-java">package com.servlet;import javax.imageio.ImageIO;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import java.awt.*;import java.awt.image.BufferedImage;import java.io.IOException;import java.util.Random;/** * @author LiYang * 验证码生成并展示 */@SuppressWarnings(&quot;all&quot;)@WebServlet(&quot;/CheckCode&quot;)public class CheckCodeServlet extends HttpServlet &#123;    @Override    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        this.doPost(req, resp);    &#125;    @Override    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;        int width = 100;        int height = 50;        resp.setCharacterEncoding(&quot;utf-8&quot;);        //resp.setContentType(&quot;text/html;charset=utf-8&quot;);        // 1. 创建一个对象，在内存中代表图片        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);        // 2. 画图        Graphics g = image.getGraphics();        // 2.1 填充        g.setColor(Color.RED);        g.fillRect(0, 0, width, height);        //2.2 画边框        g.setColor(Color.BLACK);        g.drawRect(0, 0, width-1, height-1);        String s = &quot;ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&quot;;        //生成随机数据        Random random = new Random();        g.setFont(new Font(&quot;黑体&quot;,Font.BOLD, 35));        String str = &quot;&quot;;        for (int j = 0; j &lt; 4 ; j++) &#123;            int index = random.nextInt(s.length());            str += String.valueOf(s.charAt(index));            g.drawString(String.valueOf(s.charAt(index)), 20* j, 40);        &#125;        //设置干扰线        g.setColor(Color.GREEN);        for(int i = 0; i&lt; 6; i++)&#123;            int x1 = random.nextInt(width);            int x2 = random.nextInt(width);            int y1 = random.nextInt(height);            int y2 = random.nextInt(height);            g.drawLine(x1, y1, x2, y2);        &#125;        System.out.println(str);        req.setAttribute(&quot;CheckCode&quot;,str);        // 图片输出展示//        PrintWriter writer = resp.getWriter();//        writer.write(&quot;&lt;form action=\&quot;\&quot; method=\&quot;post\&quot; id=\&quot;form1\&quot;&gt;\n&quot; +//                &quot;    请输入验证码：&lt;input type=\&quot;text\&quot; id=\&quot;reset\&quot; name=\&quot;kayValue\&quot; /&gt;\n&quot; +//                &quot;    &lt;input type=\&quot;submit\&quot; value=\&quot;验证\&quot; /&gt;\n&quot; +//                &quot;&lt;/form&gt;&quot;);        ImageIO.write(image, &quot;jpg&quot;, resp.getOutputStream());    &#125;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate</title>
      <link href="//ffb50895.html"/>
      <url>//ffb50895.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>ORM 框架</p><p>显示数据局</p></blockquote><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol><li>创建 Maven 项目</li><li>导入相关依赖</li></ol><ul><li>hibernate-core</li><li>mysql-connector-java</li><li>jaxb-api</li><li>jaxb-impl</li><li>jaxb-core</li><li>junit-jupiter</li><li>c3p0-c3p0</li><li>lombok</li></ul><ol><li>创建 hibernate.cfg.xml</li></ol><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;&lt;hibernate-configuration&gt;    &lt;session-factory&gt;    &lt;/session-factory&gt;&lt;/hibernate-configuration&gt;</code></pre><ol><li>创建 JavaBean 及 classMapper.hbm.xml</li></ol><pre><code class="lang-xml">&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;&lt;hibernate-mapping package=&quot;com.kawyang.entity&quot;&gt;    &lt;class table=&quot;Student&quot; name=&quot;Student&quot;&gt;        &lt;id name=&quot;id&quot; column=&quot;id&quot; type=&quot;int&quot; &gt;            &lt;!-- 由 数据库设置 主键的生成方式 --&gt;            &lt;generator class=&quot;native&quot;&gt;&lt;/generator&gt;        &lt;/id&gt;        &lt;property name=&quot;name&quot; column=&quot;name&quot; type=&quot;java.lang.String&quot; /&gt;        &lt;property name=&quot;age&quot; column=&quot;age&quot; type=&quot;int&quot;/&gt;        &lt;property name=&quot;birthday&quot; column=&quot;birthday&quot; type=&quot;date&quot; /&gt;    &lt;/class&gt;&lt;/hibernate-mapping&gt;</code></pre><ol><li>数据查询</li></ol>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernater Error</title>
      <link href="//53f99461.html"/>
      <url>//53f99461.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="javax-xml-bind-JAXBException"><a href="#javax-xml-bind-JAXBException" class="headerlink" title="javax/xml/bind/JAXBException"></a>javax/xml/bind/JAXBException</h2><blockquote><p>缺少相关依赖</p></blockquote><h2 id="没有提供链接"><a href="#没有提供链接" class="headerlink" title="没有提供链接"></a>没有提供链接</h2><pre><code class="lang-shell">WARN: HHH000181: No appropriate connection provider encountered, assuming application will be supplying connections8月 21, 2020 10:58:46 上午 org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator initiateServiceWARN: HHH000342: Could not obtain connection to query metadata : The application must supply JDBC connections</code></pre><blockquote><p>原因：Configuration configuration = new Configuration(); 没有调用<code>configure()</code>方法获取配置文件</p><p>修改：Configuration configuration = new Configuration().configure(); </p></blockquote><h2 id="配置文件版本"><a href="#配置文件版本" class="headerlink" title="配置文件版本"></a>配置文件版本</h2><pre><code class="lang-sh">WARN: HHH90000012: Recognized obsolete hibernate namespace http://hibernate.sourceforge.net/hibernate-configuration. Use namespace http://www.hibernate.org/dtd/hibernate-configuration instead.  Support for obsolete DTD/XSD namespaces may be removed at any time.WARN: HHH90000012: Recognized obsolete hibernate namespace http://hibernate.sourceforge.net/hibernate-mapping. Use namespace http://www.hibernate.org/dtd/hibernate-mapping instead.  Support for obsolete DTD/XSD namespaces may be removed at any time.</code></pre><blockquote><p>提示 使用<code>Use namespace http://www.hibernate.org/dtd/hibernate-configuration</code> 替换<code>http://hibernate.sourceforge.net/hibernate-configuration</code></p><p>使用：  <code>http://www.hibernate.org/dtd/hibernate-mapping</code> 替换 <code>http://hibernate.sourceforge.net/hibernate-mapping.</code></p></blockquote><h2 id="java-lang-NoClassDefFoundError-com-sun-xml-bind-v2-model-annotation-AnnotationReader"><a href="#java-lang-NoClassDefFoundError-com-sun-xml-bind-v2-model-annotation-AnnotationReader" class="headerlink" title="java.lang.NoClassDefFoundError: com/sun/xml/bind/v2/model/annotation/AnnotationReader"></a>java.lang.NoClassDefFoundError: com/sun/xml/bind/v2/model/annotation/AnnotationReader</h2><h2 id="org-hibernate-internal-util-config-ConfigurationException-Unable-to-perform-unmarshalling-at-line-number-0-and-column-0-in-RESOURCE-hibernate-cfg-xml-Message-null"><a href="#org-hibernate-internal-util-config-ConfigurationException-Unable-to-perform-unmarshalling-at-line-number-0-and-column-0-in-RESOURCE-hibernate-cfg-xml-Message-null" class="headerlink" title="org.hibernate.internal.util.config.ConfigurationException: Unable to perform unmarshalling at line number 0 and column 0 in RESOURCE hibernate.cfg.xml. Message: null"></a>org.hibernate.internal.util.config.ConfigurationException: Unable to perform unmarshalling at line number 0 and column 0 in RESOURCE hibernate.cfg.xml. Message: null</h2><blockquote><p> 缺少依赖</p></blockquote><h2 id="Hibernate-依赖"><a href="#Hibernate-依赖" class="headerlink" title="Hibernate 依赖"></a>Hibernate 依赖</h2><ul><li>hibernate-core</li><li>Mysql-connection-java</li><li>jaxb-api</li><li>jaxb-impl</li><li>jab-core</li><li>activation</li></ul><pre><code class="lang-xml">&lt;dependency&gt;  &lt;groupId&gt;org.hibernate&lt;/groupId&gt;  &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;  &lt;version&gt;5.3.7.Final&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;mysql&lt;/groupId&gt;  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  &lt;version&gt;8.0.20&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;  &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;  &lt;version&gt;2.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;  &lt;artifactId&gt;jaxb-impl&lt;/artifactId&gt;  &lt;version&gt;2.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;com.sun.xml.bind&lt;/groupId&gt;  &lt;artifactId&gt;jaxb-core&lt;/artifactId&gt;  &lt;version&gt;2.3.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;javax.activation&lt;/groupId&gt;  &lt;artifactId&gt;activation&lt;/artifactId&gt;  &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 id="xml文件引用"><a href="#xml文件引用" class="headerlink" title="xml文件引用"></a>xml文件引用</h2><h3 id="hinernate-cfg-xml"><a href="#hinernate-cfg-xml" class="headerlink" title="hinernate.cfg.xml"></a>hinernate.cfg.xml</h3><pre><code class="lang-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE hibernate-configuration PUBLIC        &quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;        &quot;http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd&quot;&gt;&lt;hibernate-configuration&gt;    &lt;session-factory&gt;        &lt;property&gt;&lt;/property&gt;    &lt;/session-factory&gt;&lt;/hibernate-configuration&gt;</code></pre><h3 id="mapper-hbm-xml"><a href="#mapper-hbm-xml" class="headerlink" title="mapper.hbm.xml"></a>mapper.hbm.xml</h3><pre><code class="lang-xml">&lt;!DOCTYPE hibernate-mapping PUBLIC &quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;        &quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;&gt;&lt;hibernate-mapping package=&quot;kawyang.entity&quot;&gt;    &lt;class&gt;    &lt;/class&gt;&lt;/hibernate-mapping&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
